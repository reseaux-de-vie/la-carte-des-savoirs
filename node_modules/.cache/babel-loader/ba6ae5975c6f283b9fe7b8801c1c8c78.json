{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _asyncToGenerator = require(\"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _require = require('../util'),\n  parseLinkHeader = _require.parseLinkHeader,\n  buildHeaders = _require.buildHeaders;\nvar _require2 = require('../constants'),\n  LINK_HEADER_CONTEXT = _require2.LINK_HEADER_CONTEXT;\nvar JsonLdError = require('../JsonLdError');\nvar RequestQueue = require('../RequestQueue');\nvar _require3 = require('../url'),\n  prependBase = _require3.prependBase;\nvar REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\nmodule.exports = function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      headers: {}\n    },\n    secure = _ref.secure,\n    _ref$headers = _ref.headers,\n    headers = _ref$headers === void 0 ? {} : _ref$headers,\n    xhr = _ref.xhr;\n  headers = buildHeaders(headers);\n  var queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n  function loader(_x) {\n    return _loader.apply(this, arguments);\n  }\n  function _loader() {\n    _loader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n      var req, doc, alternate, contentType, linkHeader, linkHeaders, linkedContext;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0)) {\n              _context.next = 2;\n              break;\n            }\n            throw new JsonLdError('URL could not be dereferenced; only \"http\" and \"https\" URLs are ' + 'supported.', 'jsonld.InvalidUrl', {\n              code: 'loading document failed',\n              url: url\n            });\n          case 2:\n            if (!(secure && url.indexOf('https') !== 0)) {\n              _context.next = 4;\n              break;\n            }\n            throw new JsonLdError('URL could not be dereferenced; secure mode is enabled and ' + 'the URL\\'s scheme is not \"https\".', 'jsonld.InvalidUrl', {\n              code: 'loading document failed',\n              url: url\n            });\n          case 4:\n            _context.prev = 4;\n            _context.next = 7;\n            return _get(xhr, url, headers);\n          case 7:\n            req = _context.sent;\n            _context.next = 13;\n            break;\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](4);\n            throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {\n              code: 'loading document failed',\n              url: url,\n              cause: _context.t0\n            });\n          case 13:\n            if (!(req.status >= 400)) {\n              _context.next = 15;\n              break;\n            }\n            throw new JsonLdError('URL could not be dereferenced: ' + req.statusText, 'jsonld.LoadDocumentError', {\n              code: 'loading document failed',\n              url: url,\n              httpStatusCode: req.status\n            });\n          case 15:\n            doc = {\n              contextUrl: null,\n              documentUrl: url,\n              document: req.response\n            };\n            alternate = null; // handle Link Header (avoid unsafe header warning by existence testing)\n            contentType = req.getResponseHeader('Content-Type');\n            if (REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n              linkHeader = req.getResponseHeader('Link');\n            }\n            if (!(linkHeader && contentType !== 'application/ld+json')) {\n              _context.next = 30;\n              break;\n            }\n            // only 1 related link header permitted\n            linkHeaders = parseLinkHeader(linkHeader);\n            linkedContext = linkHeaders[LINK_HEADER_CONTEXT];\n            if (!Array.isArray(linkedContext)) {\n              _context.next = 24;\n              break;\n            }\n            throw new JsonLdError('URL could not be dereferenced, it has more than one ' + 'associated HTTP Link Header.', 'jsonld.InvalidUrl', {\n              code: 'multiple context link headers',\n              url: url\n            });\n          case 24:\n            if (linkedContext) {\n              doc.contextUrl = linkedContext.target;\n            }\n\n            // \"alternate\" link header is a redirect\n            alternate = linkHeaders['alternate'];\n            if (!(alternate && alternate.type == 'application/ld+json' && !(contentType || '').match(/^application\\/(\\w*\\+)?json$/))) {\n              _context.next = 30;\n              break;\n            }\n            _context.next = 29;\n            return loader(prependBase(url, alternate.target));\n          case 29:\n            doc = _context.sent;\n          case 30:\n            return _context.abrupt(\"return\", doc);\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[4, 10]]);\n    }));\n    return _loader.apply(this, arguments);\n  }\n};\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  var req = new xhr();\n  return new Promise(function (resolve, reject) {\n    req.onload = function () {\n      return resolve(req);\n    };\n    req.onerror = function (err) {\n      return reject(err);\n    };\n    req.open('GET', url, true);\n    for (var k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n    req.send();\n  });\n}","map":{"version":3,"names":["require","parseLinkHeader","buildHeaders","LINK_HEADER_CONTEXT","JsonLdError","RequestQueue","prependBase","REGEX_LINK_HEADER","module","exports","headers","secure","xhr","queue","wrapLoader","loader","url","indexOf","code","_get","req","cause","status","statusText","httpStatusCode","doc","contextUrl","documentUrl","document","response","alternate","contentType","getResponseHeader","test","getAllResponseHeaders","linkHeader","linkHeaders","linkedContext","Array","isArray","target","type","match","XMLHttpRequest","Promise","resolve","reject","onload","onerror","err","open","k","setRequestHeader","send"],"sources":["/home/jean-daniel/Documents/Projets/Développement/ActivityPods/BCM/frontend/node_modules/jsonld/lib/documentLoaders/xhr.js"],"sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {parseLinkHeader, buildHeaders} = require('../util');\nconst {LINK_HEADER_CONTEXT} = require('../constants');\nconst JsonLdError = require('../JsonLdError');\nconst RequestQueue = require('../RequestQueue');\nconst {prependBase} = require('../url');\n\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\nmodule.exports = ({\n  secure,\n  headers = {},\n  xhr\n} = {headers: {}}) => {\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  async function loader(url) {\n    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; only \"http\" and \"https\" URLs are ' +\n        'supported.',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    if(secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; secure mode is enabled and ' +\n        'the URL\\'s scheme is not \"https\".',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n\n    let req;\n    try {\n      req = await _get(xhr, url, headers);\n    } catch(e) {\n      throw new JsonLdError(\n        'URL could not be dereferenced, an error occurred.',\n        'jsonld.LoadDocumentError',\n        {code: 'loading document failed', url, cause: e});\n    }\n\n    if(req.status >= 400) {\n      throw new JsonLdError(\n        'URL could not be dereferenced: ' + req.statusText,\n        'jsonld.LoadDocumentError', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: req.status\n        });\n    }\n\n    let doc = {contextUrl: null, documentUrl: url, document: req.response};\n    let alternate = null;\n\n    // handle Link Header (avoid unsafe header warning by existence testing)\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n    if(linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      const linkHeaders = parseLinkHeader(linkHeader);\n      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];\n      if(Array.isArray(linkedContext)) {\n        throw new JsonLdError(\n          'URL could not be dereferenced, it has more than one ' +\n          'associated HTTP Link Header.',\n          'jsonld.InvalidUrl',\n          {code: 'multiple context link headers', url});\n      }\n      if(linkedContext) {\n        doc.contextUrl = linkedContext.target;\n      }\n\n      // \"alternate\" link header is a redirect\n      alternate = linkHeaders['alternate'];\n      if(alternate &&\n        alternate.type == 'application/ld+json' &&\n        !(contentType || '').match(/^application\\/(\\w*\\+)?json$/)) {\n        doc = await loader(prependBase(url, alternate.target));\n      }\n    }\n\n    return doc;\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n    req.onerror = err => reject(err);\n    req.open('GET', url, true);\n    for(const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n    req.send();\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}