{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nvar inputRegex = /^\\s*>\\s$/;\nvar Blockquote = Node.create({\n  name: 'blockquote',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: 'block+',\n  group: 'block',\n  defining: true,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'blockquote'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setBlockquote: function setBlockquote() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.wrapIn(_this.name);\n        };\n      },\n      toggleBlockquote: function toggleBlockquote() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleWrap(_this.name);\n        };\n      },\n      unsetBlockquote: function unsetBlockquote() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.lift(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-b': function ModShiftB() {\n        return _this2.editor.commands.toggleBlockquote();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Blockquote, Blockquote as default, inputRegex };","map":{"version":3,"sources":["../src/blockquote.ts"],"names":[],"mappings":";AAyBO,IAAM,UAAU,GAAG,UAAA;AAEb,IAAA,UAAU,GAAG,IAAI,CAAC,MAAM,CAAoB;EAEvD,IAAI,EAAE,YAAY;EAElB,UAAU,wBAAA;IACR,OAAO;MACL,cAAc,EAAE,CAAA;KACjB;GACF;EAED,OAAO,EAAE,QAAQ;EAEjB,KAAK,EAAE,OAAO;EAEd,QAAQ,EAAE,IAAI;EAEd,SAAS,uBAAA;IACP,OAAO,CACL;MAAE,GAAG,EAAE;IAAY,CAAE,CACtB;GACF;EAED,UAAU,4BAAmB;IAAA,IAAhB,cAAc,QAAd,cAAc;IACzB,OAAO,CAAC,YAAY,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;GACvF;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,aAAa,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAC9B,OAAO,QAAQ,CAAC,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC;SAClC;MAAA;MACD,gBAAgB,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UACjC,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,CAAC;SACtC;MAAA;MACD,eAAe,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAChC,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,IAAI,CAAC;SAChC;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO;MACL,aAAa,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,gBAAgB,EAAE;MAAA;KAC7D;GACF;EAED,aAAa,2BAAA;IACX,OAAO,CACL,iBAAiB,CAAC;MAChB,IAAI,EAAE,UAAU;MAChB,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,CACH;EACF;AACF,CAAA,CAAA","sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface BlockquoteOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blockQuote: {\n      /**\n       * Set a blockquote node\n       */\n      setBlockquote: () => ReturnType,\n      /**\n       * Toggle a blockquote node\n       */\n      toggleBlockquote: () => ReturnType,\n      /**\n       * Unset a blockquote node\n       */\n      unsetBlockquote: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^\\s*>\\s$/\n\nexport const Blockquote = Node.create<BlockquoteOptions>({\n\n  name: 'blockquote',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'block+',\n\n  group: 'block',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      { tag: 'blockquote' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBlockquote: () => ({ commands }) => {\n        return commands.wrapIn(this.name)\n      },\n      toggleBlockquote: () => ({ commands }) => {\n        return commands.toggleWrap(this.name)\n      },\n      unsetBlockquote: () => ({ commands }) => {\n        return commands.lift(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}