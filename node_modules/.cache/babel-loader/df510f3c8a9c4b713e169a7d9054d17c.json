{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nvar inputRegex = /^\\s*([-+*])\\s$/;\nvar BulletList = Node.create({\n  name: 'bulletList',\n  addOptions: function addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block list',\n  content: function content() {\n    return \"\".concat(this.options.itemTypeName, \"+\");\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'ul'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      toggleBulletList: function toggleBulletList() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.toggleList(_this.name, _this.options.itemTypeName);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-8': function ModShift8() {\n        return _this2.editor.commands.toggleBulletList();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  }\n});\nexport { BulletList, BulletList as default, inputRegex };","map":{"version":3,"sources":["../src/bullet-list.ts"],"names":[],"mappings":";AAkBO,IAAM,UAAU,GAAG,gBAAA;AAEb,IAAA,UAAU,GAAG,IAAI,CAAC,MAAM,CAAoB;EACvD,IAAI,EAAE,YAAY;EAElB,UAAU,wBAAA;IACR,OAAO;MACL,YAAY,EAAE,UAAU;MACxB,cAAc,EAAE,CAAA;KACjB;GACF;EAED,KAAK,EAAE,YAAY;EAEnB,OAAO,qBAAA;IACL,iBAAU,IAAI,CAAC,OAAO,CAAC,YAAY;GACpC;EAED,SAAS,uBAAA;IACP,OAAO,CACL;MAAE,GAAG,EAAE;IAAI,CAAE,CACd;GACF;EAED,UAAU,4BAAmB;IAAA,IAAhB,cAAc,QAAd,cAAc;IACzB,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;GAC/E;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,gBAAgB,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UACjC,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,CAAC,YAAY,CAAC;SACjE;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO;MACL,aAAa,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,gBAAgB,EAAE;MAAA;KAC7D;GACF;EAED,aAAa,2BAAA;IACX,OAAO,CACL,iBAAiB,CAAC;MAChB,IAAI,EAAE,UAAU;MAChB,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,CACH;EACF;AACF,CAAA,CAAA","sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface BulletListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bulletList: {\n      /**\n       * Toggle a bullet list\n       */\n      toggleBulletList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^\\s*([-+*])\\s$/\n\nexport const BulletList = Node.create<BulletListOptions>({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [\n      { tag: 'ul' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList: () => ({ commands }) => {\n        return commands.toggleList(this.name, this.options.itemTypeName)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}