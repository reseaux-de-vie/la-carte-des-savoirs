{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nvar starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/;\nvar starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g;\nvar underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/;\nvar underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g;\nvar Italic = Mark.create({\n  name: 'italic',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: function getAttrs(node) {\n        return node.style.fontStyle !== 'normal' && null;\n      }\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setItalic: function setItalic() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this.name);\n        };\n      },\n      toggleItalic: function toggleItalic() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this.name);\n        };\n      },\n      unsetItalic: function unsetItalic() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-i': function ModI() {\n        return _this2.editor.commands.toggleItalic();\n      },\n      'Mod-I': function ModI() {\n        return _this2.editor.commands.toggleItalic();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Italic, Italic as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"sources":["../src/italic.ts"],"names":[],"mappings":";AA8BO,IAAM,cAAc,GAAG,oCAAA;AACvB,IAAM,cAAc,GAAG,oCAAA;AACvB,IAAM,oBAAoB,GAAG,kCAAA;AAC7B,IAAM,oBAAoB,GAAG,kCAAA;AAEvB,IAAA,MAAM,GAAG,IAAI,CAAC,MAAM,CAAgB;EAC/C,IAAI,EAAE,QAAQ;EAEd,UAAU,wBAAA;IACR,OAAO;MACL,cAAc,EAAE,CAAA;KACjB;GACF;EAED,SAAS,uBAAA;IACP,OAAO,CACL;MACE,GAAG,EAAE;IACN,CAAA,EACD;MACE,GAAG,EAAE,GAAG;MACR,QAAQ,EAAE,kBAAA,IAAI;QAAA,OAAK,IAAoB,CAAC,KAAK,CAAC,SAAS,KAAK,QAAQ,IAAI,IAAI;MAAA;IAC7E,CAAA,EACD;MACE,KAAK,EAAE;IACR,CAAA,CACF;GACF;EAED,UAAU,4BAAmB;IAAA,IAAhB,cAAc,QAAd,cAAc;IACzB,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;GAC/E;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,SAAS,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAC1B,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,IAAI,CAAC;SACnC;MAAA;MACD,YAAY,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAC7B,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,CAAC;SACtC;MAAA;MACD,WAAW,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAC5B,OAAO,QAAQ,CAAC,SAAS,CAAC,KAAI,CAAC,IAAI,CAAC;SACrC;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO;MACL,OAAO,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE;MAAA;MAClD,OAAO,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE;MAAA;KACnD;GACF;EAED,aAAa,2BAAA;IACX,OAAO,CACL,aAAa,CAAC;MACZ,IAAI,EAAE,cAAc;MACpB,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,EACF,aAAa,CAAC;MACZ,IAAI,EAAE,oBAAoB;MAC1B,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,CACH;GACF;EAED,aAAa,2BAAA;IACX,OAAO,CACL,aAAa,CAAC;MACZ,IAAI,EAAE,cAAc;MACpB,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,EACF,aAAa,CAAC;MACZ,IAAI,EAAE,oBAAoB;MAC1B,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,CACH;EACF;AACF,CAAA,CAAA","sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    italic: {\n      /**\n       * Set an italic mark\n       */\n      setItalic: () => ReturnType,\n      /**\n       * Toggle an italic mark\n       */\n      toggleItalic: () => ReturnType,\n      /**\n       * Unset an italic mark\n       */\n      unsetItalic: () => ReturnType,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/\nexport const starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g\nexport const underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/\nexport const underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g\n\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}