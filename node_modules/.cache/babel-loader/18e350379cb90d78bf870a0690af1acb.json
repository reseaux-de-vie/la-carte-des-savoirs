{"ast":null,"code":"import _objectWithoutProperties from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"start\"];\nimport { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nvar inputRegex = /^(\\d+)\\.\\s$/;\nvar OrderedList = Node.create({\n  name: 'orderedList',\n  addOptions: function addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block list',\n  content: function content() {\n    return \"\".concat(this.options.itemTypeName, \"+\");\n  },\n  addAttributes: function addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: function parseHTML(element) {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1;\n        }\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    var start = HTMLAttributes.start,\n      attributesWithoutStart = _objectWithoutProperties(HTMLAttributes, _excluded);\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      toggleOrderedList: function toggleOrderedList() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.toggleList(_this.name, _this.options.itemTypeName);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Shift-7': function ModShift7() {\n        return _this2.editor.commands.toggleOrderedList();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          start: +match[1]\n        };\n      },\n      joinPredicate: function joinPredicate(match, node) {\n        return node.childCount + node.attrs.start === +match[1];\n      }\n    })];\n  }\n});\nexport { OrderedList, OrderedList as default, inputRegex };","map":{"version":3,"sources":["../src/ordered-list.ts"],"names":[],"mappings":";;;AAkBO,IAAM,UAAU,GAAG,aAAA;AAEb,IAAA,WAAW,GAAG,IAAI,CAAC,MAAM,CAAqB;EACzD,IAAI,EAAE,aAAa;EAEnB,UAAU,wBAAA;IACR,OAAO;MACL,YAAY,EAAE,UAAU;MACxB,cAAc,EAAE,CAAA;KACjB;GACF;EAED,KAAK,EAAE,YAAY;EAEnB,OAAO,qBAAA;IACL,iBAAU,IAAI,CAAC,OAAO,CAAC,YAAY;GACpC;EAED,aAAa,2BAAA;IACX,OAAO;MACL,KAAK,EAAE;QACL,OAAO,EAAE,CAAC;QACV,SAAS,EAAE,mBAAA,OAAO,EAAG;UACnB,OAAO,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,GAChC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,GACjD,CAAC;QACN;MACF;KACF;GACF;EAED,SAAS,uBAAA;IACP,OAAO,CACL;MACE,GAAG,EAAE;IACN,CAAA,CACF;GACF;EAED,UAAU,4BAAmB;IAAA,IAAhB,cAAc,QAAd,cAAc;IACzB,IAAQ,KAAK,GAAgC,cAAc,CAAnD,KAAK;MAAK,sBAAsB,4BAAK,cAAc;IAE3D,OAAO,KAAK,KAAK,CAAC,GACd,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,sBAAsB,CAAC,EAAE,CAAC,CAAC,GAC/E,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;GAC5E;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,iBAAiB,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAClC,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,OAAO,CAAC,YAAY,CAAC;SACjE;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO;MACL,aAAa,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE;MAAA;KAC9D;GACF;EAED,aAAa,2BAAA;IACX,OAAO,CACL,iBAAiB,CAAC;MAChB,IAAI,EAAE,UAAU;MAChB,IAAI,EAAE,IAAI,CAAC,IAAI;MACf,aAAa,EAAE,uBAAA,KAAK;QAAA,OAAK;UAAE,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC;QAAC,CAAE;MAAA,CAAC;MAC9C,aAAa,EAAE,uBAAC,KAAK,EAAE,IAAI;QAAA,OAAK,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;MAAA;KACjF,CAAC,CACH;EACF;AACF,CAAA,CAAA","sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface OrderedListOptions {\n  itemTypeName: string,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       */\n      toggleOrderedList: () => ReturnType,\n    }\n  }\n}\n\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1\n        },\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands }) => {\n        return commands.toggleList(this.name, this.options.itemTypeName)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        getAttributes: match => ({ start: +match[1] }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}