{"ast":null,"code":"(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) {\n      return '';\n    }\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n      if (component === '') {\n        continue;\n      }\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n      resultArray.push(component);\n    }\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n  return function () {\n    var input;\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n    return normalize(input);\n  };\n});","map":{"version":3,"names":["name","context","definition","module","exports","define","amd","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","input","arguments","slice","call"],"sources":["/home/jean-daniel/Documents/Projets/DÃ©veloppement/ActivityPods/BCM/frontend/node_modules/url-join/lib/url-join.js"],"sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}