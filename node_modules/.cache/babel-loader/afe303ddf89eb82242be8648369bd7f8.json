{"ast":null,"code":"var MILLISECONDS_IN_MINUTE = 60000;\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","map":{"version":3,"names":["MILLISECONDS_IN_MINUTE","getTimezoneOffsetInMilliseconds","dirtyDate","date","Date","getTime","baseTimezoneOffset","Math","ceil","getTimezoneOffset","setSeconds","millisecondsPartOfTimezoneOffset"],"sources":["/home/jean-daniel/Documents/Projets/DÃ©veloppement/ActivityPods/BCM/frontend/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js"],"sourcesContent":["var MILLISECONDS_IN_MINUTE = 60000;\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}"],"mappings":"AAAA,IAAIA,sBAAsB,GAAG,KAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,+BAA+B,CAACC,SAAS,EAAE;EACjE,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAACG,OAAO,EAAE,CAAC;EACxC,IAAIC,kBAAkB,GAAGC,IAAI,CAACC,IAAI,CAACL,IAAI,CAACM,iBAAiB,EAAE,CAAC;EAC5DN,IAAI,CAACO,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;EACrB,IAAIC,gCAAgC,GAAGR,IAAI,CAACE,OAAO,EAAE,GAAGL,sBAAsB;EAC9E,OAAOM,kBAAkB,GAAGN,sBAAsB,GAAGW,gCAAgC;AACvF"},"metadata":{},"sourceType":"module"}