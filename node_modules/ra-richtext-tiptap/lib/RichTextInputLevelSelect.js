"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RichTextInputLevelSelect = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var core_1 = require("@material-ui/core");
var styles_1 = require("@material-ui/core/styles");
var ArrowDropDown_1 = __importDefault(require("@material-ui/icons/ArrowDropDown"));
var ra_core_1 = require("ra-core");
var clsx_1 = __importDefault(require("clsx"));
var useTiptapEditor_1 = require("./useTiptapEditor");
var RichTextInputLevelSelect = function (props) {
    var _a;
    var translate = (0, ra_core_1.useTranslate)();
    var editor = (0, useTiptapEditor_1.useTiptapEditor)();
    var _b = (0, react_1.useState)(null), anchorElement = _b[0], setAnchorElement = _b[1];
    var classes = useStyles(props);
    var size = props.size;
    var handleMenuItemClick = function (event, index) {
        setAnchorElement(null);
        var selectedItem = options[index];
        if (selectedItem.value === 'paragraph') {
            editor.chain().focus().setParagraph().run();
        }
        else if (selectedItem.value === 'heading') {
            editor.chain().focus().setHeading({ level: selectedItem.level }).run();
        }
    };
    var handleClickListItem = function (event) {
        setAnchorElement(event.currentTarget);
    };
    var handleClose = function (event) {
        setAnchorElement(null);
    };
    var selectedOption = options.find(function (option) { return isSelectedOption(editor, option); }) || options[0];
    return (React.createElement(React.Fragment, null,
        React.createElement(core_1.List, { component: "nav", "aria-label": translate('ra.tiptap.select_level', {
                _: 'Select the level',
            }), dense: true, disablePadding: true, className: classes.list },
            React.createElement(core_1.ListItem, { button: true, "aria-haspopup": "true", "aria-controls": "level-menu", "aria-label": translate('ra.tiptap.current_level', {
                    _: 'Current level',
                }), onClick: handleClickListItem, className: (0, clsx_1.default)((_a = {},
                    _a[classes.sizeSmall] = size === 'small',
                    _a[classes.sizeLarge] = size === 'large',
                    _a)) },
                React.createElement(core_1.ListItemText, { primary: translate(selectedOption.label, {
                        _: selectedOption.defaultLabel,
                    }) }),
                React.createElement(ArrowDropDown_1.default, null))),
        React.createElement(core_1.Menu, { anchorEl: anchorElement, open: Boolean(anchorElement), id: "level-menu", onClose: handleClose }, options.map(function (option, index) { return (React.createElement(core_1.MenuItem, { key: option.label, selected: option === selectedOption, onClick: function (event) {
                handleMenuItemClick(event, index);
            } }, translate(option.label, { _: option.defaultLabel }))); }))));
};
exports.RichTextInputLevelSelect = RichTextInputLevelSelect;
var options = [
    { label: 'ra.tiptap.paragraph', defaultLabel: 'Normal', value: 'paragraph' },
    {
        label: 'ra.tiptap.heading1',
        defaultLabel: 'Heading 1',
        value: 'heading',
        level: 1,
    },
    {
        label: 'ra.tiptap.heading2',
        defaultLabel: 'Heading 2',
        value: 'heading',
        level: 2,
    },
    {
        label: 'ra.tiptap.heading3',
        defaultLabel: 'Heading 3',
        value: 'heading',
        level: 3,
    },
    {
        label: 'ra.tiptap.heading4',
        defaultLabel: 'Heading 4',
        value: 'heading',
        level: 4,
    },
    {
        label: 'ra.tiptap.heading5',
        defaultLabel: 'Heading 5',
        value: 'heading',
        level: 5,
    },
    {
        label: 'ra.tiptap.heading6',
        defaultLabel: 'Heading 6',
        value: 'heading',
        level: 6,
    },
];
var isSelectedOption = function (editor, option) {
    if (!editor) {
        return false;
    }
    if (option.value === 'paragraph') {
        return editor.isActive('paragraph');
    }
    return editor.isActive('heading', { level: option.level });
};
var useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    list: {
        borderRadius: theme.shape.borderRadius,
        border: "1px solid " + (0, styles_1.alpha)(theme.palette.action.active, 0.12),
    },
    /* Styles applied to the root element if `size="small"`. */
    sizeSmall: {
        paddingTop: 1,
        paddingBottom: 1,
        '& .MuiTypography-root': {
            fontSize: theme.typography.pxToRem(13),
        },
    },
    /* Styles applied to the root element if `size="large"`. */
    sizeLarge: {
        paddingTop: 8,
        paddingBottom: 8,
        '& .MuiTypography-root': {
            fontSize: theme.typography.pxToRem(15),
        },
    },
}); }, {
    name: 'RaRichTextInputLevelSelect',
});
