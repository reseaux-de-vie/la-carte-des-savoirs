var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';
import FormatBold from '@material-ui/icons/FormatBold';
import FormatItalic from '@material-ui/icons/FormatItalic';
import FormatUnderlined from '@material-ui/icons/FormatUnderlined';
import FormatStrikethrough from '@material-ui/icons/FormatStrikethrough';
import FormatListBulleted from '@material-ui/icons/FormatListBulleted';
import FormatListNumbered from '@material-ui/icons/FormatListNumbered';
import FormatAlignCenter from '@material-ui/icons/FormatAlignCenter';
import FormatAlignLeft from '@material-ui/icons/FormatAlignLeft';
import FormatAlignRight from '@material-ui/icons/FormatAlignRight';
import FormatAlignJustify from '@material-ui/icons/FormatAlignJustify';
import FormatQuote from '@material-ui/icons/FormatQuote';
import FormatClear from '@material-ui/icons/FormatClear';
import InsertLink from '@material-ui/icons/InsertLink';
import Code from '@material-ui/icons/Code';
import { useTranslate } from 'ra-core';
import { useTiptapEditor } from './useTiptapEditor';
export var FormatButtons = function (props) {
    var editor = useTiptapEditor();
    var translate = useTranslate();
    var boldLabel = translate('ra.tiptap.bold', {
        _: 'Bold',
    });
    var italicLabel = translate('ra.tiptap.Italic', {
        _: 'Italic',
    });
    var underlineLabel = translate('ra.tiptap.underline', {
        _: 'Underline',
    });
    var strikeLabel = translate('ra.tiptap.strike', {
        _: 'Strikethrough',
    });
    var codeLabel = translate('ra.tiptap.code', {
        _: 'Code',
    });
    return (React.createElement(ToggleButtonGroup, __assign({}, props),
        React.createElement(ToggleButton, { "aria-label": boldLabel, title: boldLabel, onClick: function () { return editor.chain().focus().toggleBold().run(); }, selected: editor && editor.isActive('bold') },
            React.createElement(FormatBold, { fontSize: "inherit" })),
        React.createElement(ToggleButton, { "aria-label": italicLabel, title: italicLabel, onClick: function () { return editor.chain().focus().toggleItalic().run(); }, selected: editor && editor.isActive('italic') },
            React.createElement(FormatItalic, { fontSize: "inherit" })),
        React.createElement(ToggleButton, { "aria-label": underlineLabel, title: underlineLabel, onClick: function () { return editor.chain().focus().toggleUnderline().run(); }, selected: editor && editor.isActive('underline') },
            React.createElement(FormatUnderlined, { fontSize: "inherit" })),
        React.createElement(ToggleButton, { "aria-label": strikeLabel, title: strikeLabel, onClick: function () { return editor.chain().focus().toggleStrike().run(); }, selected: editor && editor.isActive('strike') },
            React.createElement(FormatStrikethrough, { fontSize: "inherit" })),
        React.createElement(ToggleButton, { "aria-label": codeLabel, title: codeLabel, onClick: function () { return editor.chain().focus().toggleCode().run(); }, selected: editor && editor.isActive('code') },
            React.createElement(Code, { fontSize: "inherit" }))));
};
export var ListButtons = function (props) {
    var editor = useTiptapEditor();
    var translate = useTranslate();
    var bulletListLabel = translate('ra.tiptap.list_bulleted', {
        _: 'Bulleted list',
    });
    var numberListLabel = translate('ra.tiptap.list_numbered', {
        _: 'Numbered list',
    });
    return (React.createElement(ToggleButtonGroup, __assign({}, props),
        React.createElement(ToggleButton, { "aria-label": bulletListLabel, title: bulletListLabel, onClick: function () { return editor.chain().focus().toggleBulletList().run(); }, selected: editor && editor.isActive('bulletList') },
            React.createElement(FormatListBulleted, { fontSize: "inherit" })),
        React.createElement(ToggleButton, { "aria-label": numberListLabel, title: numberListLabel, onClick: function () { return editor.chain().focus().toggleOrderedList().run(); }, selected: editor && editor.isActive('orderedList') },
            React.createElement(FormatListNumbered, { fontSize: "inherit" }))));
};
export var AlignmentButtons = function (props) {
    var editor = useTiptapEditor();
    var translate = useTranslate();
    var leftLabel = translate('ra.tiptap.align_left', { _: 'Align left' });
    var rightLabel = translate('ra.tiptap.align_right', { _: 'Align right' });
    var centerLabel = translate('ra.tiptap.align_center', { _: 'Center' });
    var justifyLabel = translate('ra.tiptap.align_justify', { _: 'Justify' });
    return (React.createElement(ToggleButtonGroup, __assign({}, props),
        React.createElement(ToggleButton, { "aria-label": leftLabel, title: leftLabel, onClick: function () { return editor.chain().focus().setTextAlign('left').run(); }, selected: editor && editor.isActive({ textAlign: 'left' }) },
            React.createElement(FormatAlignLeft, { fontSize: "inherit" })),
        React.createElement(ToggleButton, { "aria-label": centerLabel, title: centerLabel, onClick: function () { return editor.chain().focus().setTextAlign('center').run(); }, selected: editor && editor.isActive({ textAlign: 'center' }) },
            React.createElement(FormatAlignCenter, { fontSize: "inherit" })),
        React.createElement(ToggleButton, { "aria-label": rightLabel, title: rightLabel, onClick: function () { return editor.chain().focus().setTextAlign('right').run(); }, selected: editor && editor.isActive({ textAlign: 'right' }) },
            React.createElement(FormatAlignRight, { fontSize: "inherit" })),
        React.createElement(ToggleButton, { "aria-label": justifyLabel, title: justifyLabel, onClick: function () { return editor.chain().focus().setTextAlign('justify').run(); }, selected: editor && editor.isActive({ textAlign: 'justify' }) },
            React.createElement(FormatAlignJustify, { fontSize: "inherit" }))));
};
export var LinkButtons = function (props) {
    var editor = useTiptapEditor();
    var translate = useTranslate();
    var disabled = editor
        ? editor.state.doc.textBetween(editor.state.selection.from, editor.state.selection.to).length === 0
        : false;
    var label = translate('ra.tiptap.link', {
        _: 'Add a link',
    });
    return (React.createElement(ToggleButtonGroup, __assign({}, props),
        React.createElement(ToggleButton, { "aria-label": label, title: label, onClick: function () {
                if (!editor.can().setLink({ href: '' })) {
                    return;
                }
                var url = window.prompt('URL');
                editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();
            }, selected: editor && editor.isActive('link'), disabled: disabled },
            React.createElement(InsertLink, { fontSize: "inherit" }))));
};
export var QuoteButtons = function (props) {
    var editor = useTiptapEditor();
    var translate = useTranslate();
    var label = translate('ra.tiptap.blockquote', {
        _: 'Blockquote',
    });
    return (React.createElement(ToggleButtonGroup, __assign({}, props),
        React.createElement(ToggleButton, { "aria-label": label, title: label, onClick: function () { return editor.chain().focus().toggleBlockquote().run(); }, selected: editor && editor.isActive('blockquote') },
            React.createElement(FormatQuote, { fontSize: "inherit" }))));
};
export var ClearButtons = function (props) {
    var editor = useTiptapEditor();
    var translate = useTranslate();
    var label = translate('ra.tiptap.clear_format', {
        _: 'Clear format',
    });
    return (React.createElement(ToggleButtonGroup, __assign({}, props),
        React.createElement(ToggleButton, { "aria-label": label, title: label, onClick: function () { return editor.chain().focus().unsetAllMarks().run(); }, selected: false },
            React.createElement(FormatClear, { fontSize: "inherit" }))));
};
