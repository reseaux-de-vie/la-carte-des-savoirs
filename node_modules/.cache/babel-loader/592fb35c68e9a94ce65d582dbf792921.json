{"ast":null,"code":"import _toConsumableArray from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nimport { Plugin, PluginKey, TextSelection } from 'prosemirror-state';\nvar backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/;\nvar tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/;\nvar CodeBlock = Node.create({\n  name: 'codeBlock',\n  addOptions: function addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      HTMLAttributes: {}\n    };\n  },\n  content: 'text*',\n  marks: '',\n  group: 'block',\n  code: true,\n  defining: true,\n  addAttributes: function addAttributes() {\n    var _this = this;\n    return {\n      language: {\n        default: null,\n        parseHTML: function parseHTML(element) {\n          var _a;\n          var languageClassPrefix = _this.options.languageClassPrefix;\n          var classNames = _toConsumableArray(((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || []);\n          var languages = classNames.filter(function (className) {\n            return className.startsWith(languageClassPrefix);\n          }).map(function (className) {\n            return className.replace(languageClassPrefix, '');\n          });\n          var language = languages[0];\n          if (!language) {\n            return null;\n          }\n          return language;\n        },\n        rendered: false\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'pre',\n      preserveWhitespace: 'full'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var node = _ref.node,\n      HTMLAttributes = _ref.HTMLAttributes;\n    return ['pre', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), ['code', {\n      class: node.attrs.language ? this.options.languageClassPrefix + node.attrs.language : null\n    }, 0]];\n  },\n  addCommands: function addCommands() {\n    var _this2 = this;\n    return {\n      setCodeBlock: function setCodeBlock(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setNode(_this2.name, attributes);\n        };\n      },\n      toggleCodeBlock: function toggleCodeBlock(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleNode(_this2.name, 'paragraph', attributes);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this3 = this;\n    return {\n      'Mod-Alt-c': function ModAltC() {\n        return _this3.editor.commands.toggleCodeBlock();\n      },\n      // remove code block when at start of document or code block is empty\n      Backspace: function Backspace() {\n        var _this3$editor$state$s = _this3.editor.state.selection,\n          empty = _this3$editor$state$s.empty,\n          $anchor = _this3$editor$state$s.$anchor;\n        var isAtStart = $anchor.pos === 1;\n        if (!empty || $anchor.parent.type.name !== _this3.name) {\n          return false;\n        }\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return _this3.editor.commands.clearNodes();\n        }\n        return false;\n      },\n      // exit node on triple enter\n      Enter: function Enter(_ref4) {\n        var editor = _ref4.editor;\n        if (!_this3.options.exitOnTripleEnter) {\n          return false;\n        }\n        var state = editor.state;\n        var selection = state.selection;\n        var $from = selection.$from,\n          empty = selection.empty;\n        if (!empty || $from.parent.type !== _this3.type) {\n          return false;\n        }\n        var isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        var endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n');\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false;\n        }\n        return editor.chain().command(function (_ref5) {\n          var tr = _ref5.tr;\n          tr.delete($from.pos - 2, $from.pos);\n          return true;\n        }).exitCode().run();\n      },\n      // exit node on arrow down\n      ArrowDown: function ArrowDown(_ref6) {\n        var editor = _ref6.editor;\n        if (!_this3.options.exitOnArrowDown) {\n          return false;\n        }\n        var state = editor.state;\n        var selection = state.selection,\n          doc = state.doc;\n        var $from = selection.$from,\n          empty = selection.empty;\n        if (!empty || $from.parent.type !== _this3.type) {\n          return false;\n        }\n        var isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        if (!isAtEnd) {\n          return false;\n        }\n        var after = $from.after();\n        if (after === undefined) {\n          return false;\n        }\n        var nodeAfter = doc.nodeAt(after);\n        if (nodeAfter) {\n          return false;\n        }\n        return editor.commands.exitCode();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [textblockTypeInputRule({\n      find: backtickInputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          language: match[1]\n        };\n      }\n    }), textblockTypeInputRule({\n      find: tildeInputRegex,\n      type: this.type,\n      getAttributes: function getAttributes(match) {\n        return {\n          language: match[1]\n        };\n      }\n    })];\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this4 = this;\n    return [\n    // this plugin creates a code block for pasted content from VS Code\n    // we can also detect the copied code language\n    new Plugin({\n      key: new PluginKey('codeBlockVSCodeHandler'),\n      props: {\n        handlePaste: function handlePaste(view, event) {\n          if (!event.clipboardData) {\n            return false;\n          }\n          // donâ€™t create a new code block within code blocks\n          if (_this4.editor.isActive(_this4.type.name)) {\n            return false;\n          }\n          var text = event.clipboardData.getData('text/plain');\n          var vscode = event.clipboardData.getData('vscode-editor-data');\n          var vscodeData = vscode ? JSON.parse(vscode) : undefined;\n          var language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;\n          if (!text || !language) {\n            return false;\n          }\n          var tr = view.state.tr;\n          // create an empty code block\n          tr.replaceSelectionWith(_this4.type.create({\n            language: language\n          }));\n          // put cursor inside the newly created code block\n          tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));\n          // add text to code block\n          // strip carriage return chars from text pasted as code\n          // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n          tr.insertText(text.replace(/\\r\\n?/g, '\\n'));\n          // store meta information\n          // this is useful for other plugins that depends on the paste event\n          // like the paste rule plugin\n          tr.setMeta('paste', true);\n          view.dispatch(tr);\n          return true;\n        }\n      }\n    })];\n  }\n});\nexport { CodeBlock, backtickInputRegex, CodeBlock as default, tildeInputRegex };","map":{"version":3,"sources":["../src/code-block.ts"],"names":[],"mappings":"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","sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\nimport { Plugin, PluginKey, TextSelection } from 'prosemirror-state'\n\nexport interface CodeBlockOptions {\n  /**\n   * Adds a prefix to language classes that are applied to code tags.\n   * Defaults to `'language-'`.\n   */\n  languageClassPrefix: string,\n  /**\n   * Define whether the node should be exited on triple enter.\n   * Defaults to `true`.\n   */\n  exitOnTripleEnter: boolean,\n  /**\n   * Define whether the node should be exited on arrow down if there is no node after it.\n   * Defaults to `true`.\n   */\n  exitOnArrowDown: boolean,\n  /**\n   * Custom HTML attributes that should be added to the rendered HTML tag.\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    codeBlock: {\n      /**\n       * Set a code block\n       */\n      setCodeBlock: (attributes?: { language: string }) => ReturnType,\n      /**\n       * Toggle a code block\n       */\n      toggleCodeBlock: (attributes?: { language: string }) => ReturnType,\n    }\n  }\n}\n\nexport const backtickInputRegex = /^```([a-z]+)?[\\s\\n]$/\nexport const tildeInputRegex = /^~~~([a-z]+)?[\\s\\n]$/\n\nexport const CodeBlock = Node.create<CodeBlockOptions>({\n  name: 'codeBlock',\n\n  addOptions() {\n    return {\n      languageClassPrefix: 'language-',\n      exitOnTripleEnter: true,\n      exitOnArrowDown: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'text*',\n\n  marks: '',\n\n  group: 'block',\n\n  code: true,\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      language: {\n        default: null,\n        parseHTML: element => {\n          const { languageClassPrefix } = this.options\n          const classNames = [...element.firstElementChild?.classList || []]\n          const languages = classNames\n            .filter(className => className.startsWith(languageClassPrefix))\n            .map(className => className.replace(languageClassPrefix, ''))\n          const language = languages[0]\n\n          if (!language) {\n            return null\n          }\n\n          return language\n        },\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'pre',\n        preserveWhitespace: 'full',\n      },\n    ]\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      'pre',\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      [\n        'code',\n        {\n          class: node.attrs.language\n            ? this.options.languageClassPrefix + node.attrs.language\n            : null,\n        },\n        0,\n      ],\n    ]\n  },\n\n  addCommands() {\n    return {\n      setCodeBlock: attributes => ({ commands }) => {\n        return commands.setNode(this.name, attributes)\n      },\n      toggleCodeBlock: attributes => ({ commands }) => {\n        return commands.toggleNode(this.name, 'paragraph', attributes)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),\n\n      // remove code block when at start of document or code block is empty\n      Backspace: () => {\n        const { empty, $anchor } = this.editor.state.selection\n        const isAtStart = $anchor.pos === 1\n\n        if (!empty || $anchor.parent.type.name !== this.name) {\n          return false\n        }\n\n        if (isAtStart || !$anchor.parent.textContent.length) {\n          return this.editor.commands.clearNodes()\n        }\n\n        return false\n      },\n\n      // exit node on triple enter\n      Enter: ({ editor }) => {\n        if (!this.options.exitOnTripleEnter) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith('\\n\\n')\n\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          return false\n        }\n\n        return editor\n          .chain()\n          .command(({ tr }) => {\n            tr.delete($from.pos - 2, $from.pos)\n\n            return true\n          })\n          .exitCode()\n          .run()\n      },\n\n      // exit node on arrow down\n      ArrowDown: ({ editor }) => {\n        if (!this.options.exitOnArrowDown) {\n          return false\n        }\n\n        const { state } = editor\n        const { selection, doc } = state\n        const { $from, empty } = selection\n\n        if (!empty || $from.parent.type !== this.type) {\n          return false\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2\n\n        if (!isAtEnd) {\n          return false\n        }\n\n        const after = $from.after()\n\n        if (after === undefined) {\n          return false\n        }\n\n        const nodeAfter = doc.nodeAt(after)\n\n        if (nodeAfter) {\n          return false\n        }\n\n        return editor.commands.exitCode()\n      },\n    }\n  },\n\n  addInputRules() {\n    return [\n      textblockTypeInputRule({\n        find: backtickInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n      textblockTypeInputRule({\n        find: tildeInputRegex,\n        type: this.type,\n        getAttributes: match => ({\n          language: match[1],\n        }),\n      }),\n    ]\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // this plugin creates a code block for pasted content from VS Code\n      // we can also detect the copied code language\n      new Plugin({\n        key: new PluginKey('codeBlockVSCodeHandler'),\n        props: {\n          handlePaste: (view, event) => {\n            if (!event.clipboardData) {\n              return false\n            }\n\n            // donâ€™t create a new code block within code blocks\n            if (this.editor.isActive(this.type.name)) {\n              return false\n            }\n\n            const text = event.clipboardData.getData('text/plain')\n            const vscode = event.clipboardData.getData('vscode-editor-data')\n            const vscodeData = vscode\n              ? JSON.parse(vscode)\n              : undefined\n            const language = vscodeData?.mode\n\n            if (!text || !language) {\n              return false\n            }\n\n            const { tr } = view.state\n\n            // create an empty code block\n            tr.replaceSelectionWith(this.type.create({ language }))\n\n            // put cursor inside the newly created code block\n            tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))))\n\n            // add text to code block\n            // strip carriage return chars from text pasted as code\n            // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n            tr.insertText(text.replace(/\\r\\n?/g, '\\n'))\n\n            // store meta information\n            // this is useful for other plugins that depends on the paste event\n            // like the paste rule plugin\n            tr.setMeta('paste', true)\n\n            view.dispatch(tr)\n\n            return true\n          },\n        },\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}