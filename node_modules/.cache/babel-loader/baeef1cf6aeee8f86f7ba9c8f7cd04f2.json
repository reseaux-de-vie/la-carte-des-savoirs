{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nvar HardBreak = Node.create({\n  name: 'hardBreak',\n  addOptions: function addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {}\n    };\n  },\n  inline: true,\n  group: 'inline',\n  selectable: false,\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'br'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  renderText: function renderText() {\n    return '\\n';\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setHardBreak: function setHardBreak() {\n        return function (_ref2) {\n          var commands = _ref2.commands,\n            chain = _ref2.chain,\n            state = _ref2.state,\n            editor = _ref2.editor;\n          return commands.first([function () {\n            return commands.exitCode();\n          }, function () {\n            return commands.command(function () {\n              var selection = state.selection,\n                storedMarks = state.storedMarks;\n              if (selection.$from.parent.type.spec.isolating) {\n                return false;\n              }\n              var keepMarks = _this.options.keepMarks;\n              var splittableMarks = editor.extensionManager.splittableMarks;\n              var marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n              return chain().insertContent({\n                type: _this.name\n              }).command(function (_ref3) {\n                var tr = _ref3.tr,\n                  dispatch = _ref3.dispatch;\n                if (dispatch && marks && keepMarks) {\n                  var filteredMarks = marks.filter(function (mark) {\n                    return splittableMarks.includes(mark.type.name);\n                  });\n                  tr.ensureMarks(filteredMarks);\n                }\n                return true;\n              }).run();\n            });\n          }]);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Enter': function ModEnter() {\n        return _this2.editor.commands.setHardBreak();\n      },\n      'Shift-Enter': function ShiftEnter() {\n        return _this2.editor.commands.setHardBreak();\n      }\n    };\n  }\n});\nexport { HardBreak, HardBreak as default };","map":{"version":3,"sources":["../src/hard-break.ts"],"names":[],"mappings":";AAkBa,IAAA,SAAS,GAAG,IAAI,CAAC,MAAM,CAAmB;EACrD,IAAI,EAAE,WAAW;EAEjB,UAAU,wBAAA;IACR,OAAO;MACL,SAAS,EAAE,IAAI;MACf,cAAc,EAAE,CAAA;KACjB;GACF;EAED,MAAM,EAAE,IAAI;EAEZ,KAAK,EAAE,QAAQ;EAEf,UAAU,EAAE,KAAK;EAEjB,SAAS,uBAAA;IACP,OAAO,CACL;MAAE,GAAG,EAAE;IAAI,CAAE,CACd;GACF;EAED,UAAU,4BAAmB;IAAA,IAAhB,cAAc,QAAd,cAAc;IACzB,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;GAC5E;EAED,UAAU,wBAAA;IACR,OAAO,IAAI;GACZ;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,YAAY,EAAE;QAAA,OAAM,iBAKf;UAAA,IAJH,QAAQ,SAAR,QAAQ;YACR,KAAK,SAAL,KAAK;YACL,KAAK,SAAL,KAAK;YACL,MAAM,SAAN,MAAM;UAEN,OAAO,QAAQ,CAAC,KAAK,CAAC,CACpB;YAAA,OAAM,QAAQ,CAAC,QAAQ,EAAE;UAAA,GACzB;YAAA,OAAM,QAAQ,CAAC,OAAO,CAAC,YAAK;cAC1B,IAAQ,SAAS,GAAkB,KAAK,CAAhC,SAAS;gBAAE,WAAW,GAAK,KAAK,CAArB,WAAW;cAE9B,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBAC9C,OAAO,KAAK;cACb;cAED,IAAQ,SAAS,GAAK,KAAI,CAAC,OAAO,CAA1B,SAAS;cACjB,IAAQ,eAAe,GAAK,MAAM,CAAC,gBAAgB,CAA3C,eAAe;cACvB,IAAM,KAAK,GAAG,WAAW,IACnB,SAAS,CAAC,GAAG,CAAC,YAAY,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,EAAG;cAE5D,OAAO,KAAK,EAAE,CACX,aAAa,CAAC;gBAAE,IAAI,EAAE,KAAI,CAAC;cAAI,CAAE,CAAC,CAClC,OAAO,CAAC,iBAAqB;gBAAA,IAAlB,EAAE,SAAF,EAAE;kBAAE,QAAQ,SAAR,QAAQ;gBACtB,IAAI,QAAQ,IAAI,KAAK,IAAI,SAAS,EAAE;kBAClC,IAAM,aAAa,GAAG,KAAK,CACxB,MAAM,CAAC,UAAA,IAAI;oBAAA,OAAI,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;kBAAA,EAAC;kBAE3D,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC;gBAC9B;gBAED,OAAO,IAAI;cACb,CAAC,CAAC,CACD,GAAG,EAAE;YACV,CAAC,CAAC;UAAA,EACH,CAAC;SACH;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO;MACL,WAAW,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE;MAAA;MACtD,aAAa,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE;MAAA;KACzD;EACF;AACF,CAAA,CAAA","sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface HardBreakOptions {\n  keepMarks: boolean,\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    hardBreak: {\n      /**\n       * Add a hard break\n       */\n      setHardBreak: () => ReturnType,\n    }\n  }\n}\n\nexport const HardBreak = Node.create<HardBreakOptions>({\n  name: 'hardBreak',\n\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline: true,\n\n  group: 'inline',\n\n  selectable: false,\n\n  parseHTML() {\n    return [\n      { tag: 'br' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  renderText() {\n    return '\\n'\n  },\n\n  addCommands() {\n    return {\n      setHardBreak: () => ({\n        commands,\n        chain,\n        state,\n        editor,\n      }) => {\n        return commands.first([\n          () => commands.exitCode(),\n          () => commands.command(() => {\n            const { selection, storedMarks } = state\n\n            if (selection.$from.parent.type.spec.isolating) {\n              return false\n            }\n\n            const { keepMarks } = this.options\n            const { splittableMarks } = editor.extensionManager\n            const marks = storedMarks\n              || (selection.$to.parentOffset && selection.$from.marks())\n\n            return chain()\n              .insertContent({ type: this.name })\n              .command(({ tr, dispatch }) => {\n                if (dispatch && marks && keepMarks) {\n                  const filteredMarks = marks\n                    .filter(mark => splittableMarks.includes(mark.type.name))\n\n                  tr.ensureMarks(filteredMarks)\n                }\n\n                return true\n              })\n              .run()\n          }),\n        ])\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak(),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}