{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\nvar starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/;\nvar starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/g;\nvar underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/;\nvar underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/g;\nvar Bold = Mark.create({\n  name: 'bold',\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'strong'\n    }, {\n      tag: 'b',\n      getAttrs: function getAttrs(node) {\n        return node.style.fontWeight !== 'normal' && null;\n      }\n    }, {\n      style: 'font-weight',\n      getAttrs: function getAttrs(value) {\n        return /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null;\n      }\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setBold: function setBold() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setMark(_this.name);\n        };\n      },\n      toggleBold: function toggleBold() {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          return commands.toggleMark(_this.name);\n        };\n      },\n      unsetBold: function unsetBold() {\n        return function (_ref4) {\n          var commands = _ref4.commands;\n          return commands.unsetMark(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-b': function ModB() {\n        return _this2.editor.commands.toggleBold();\n      },\n      'Mod-B': function ModB() {\n        return _this2.editor.commands.toggleBold();\n      }\n    };\n  },\n  addInputRules: function addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules: function addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Bold, Bold as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"sources":["../src/bold.ts"],"names":[],"mappings":";AA8BO,IAAM,cAAc,GAAG,wCAAA;AACvB,IAAM,cAAc,GAAG,wCAAA;AACvB,IAAM,oBAAoB,GAAG,qCAAA;AAC7B,IAAM,oBAAoB,GAAG,qCAAA;AAEvB,IAAA,IAAI,GAAG,IAAI,CAAC,MAAM,CAAc;EAC3C,IAAI,EAAE,MAAM;EAEZ,UAAU,wBAAA;IACR,OAAO;MACL,cAAc,EAAE,CAAA;KACjB;GACF;EAED,SAAS,uBAAA;IACP,OAAO,CACL;MACE,GAAG,EAAE;IACN,CAAA,EACD;MACE,GAAG,EAAE,GAAG;MACR,QAAQ,EAAE,kBAAA,IAAI;QAAA,OAAK,IAAoB,CAAC,KAAK,CAAC,UAAU,KAAK,QAAQ,IAAI,IAAI;MAAA;IAC9E,CAAA,EACD;MACE,KAAK,EAAE,aAAa;MACpB,QAAQ,EAAE,kBAAA,KAAK;QAAA,OAAI,2BAA2B,CAAC,IAAI,CAAC,KAAe,CAAC,IAAI,IAAI;MAAA;IAC7E,CAAA,CACF;GACF;EAED,UAAU,4BAAmB;IAAA,IAAhB,cAAc,QAAd,cAAc;IACzB,OAAO,CAAC,QAAQ,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;GACnF;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,OAAO,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UACxB,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,IAAI,CAAC;SACnC;MAAA;MACD,UAAU,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAC3B,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,CAAC;SACtC;MAAA;MACD,SAAS,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAC1B,OAAO,QAAQ,CAAC,SAAS,CAAC,KAAI,CAAC,IAAI,CAAC;SACrC;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO;MACL,OAAO,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE;MAAA;MAChD,OAAO,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE;MAAA;KACjD;GACF;EAED,aAAa,2BAAA;IACX,OAAO,CACL,aAAa,CAAC;MACZ,IAAI,EAAE,cAAc;MACpB,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,EACF,aAAa,CAAC;MACZ,IAAI,EAAE,oBAAoB;MAC1B,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,CACH;GACF;EAED,aAAa,2BAAA;IACX,OAAO,CACL,aAAa,CAAC;MACZ,IAAI,EAAE,cAAc;MACpB,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,EACF,aAAa,CAAC;MACZ,IAAI,EAAE,oBAAoB;MAC1B,IAAI,EAAE,IAAI,CAAC;KACZ,CAAC,CACH;EACF;AACF,CAAA,CAAA","sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface BoldOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bold: {\n      /**\n       * Set a bold mark\n       */\n      setBold: () => ReturnType,\n      /**\n       * Toggle a bold mark\n       */\n      toggleBold: () => ReturnType,\n      /**\n       * Unset a bold mark\n       */\n      unsetBold: () => ReturnType,\n    }\n  }\n}\n\nexport const starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/\nexport const starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/g\nexport const underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/\nexport const underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/g\n\nexport const Bold = Mark.create<BoldOptions>({\n  name: 'bold',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'strong',\n      },\n      {\n        tag: 'b',\n        getAttrs: node => (node as HTMLElement).style.fontWeight !== 'normal' && null,\n      },\n      {\n        style: 'font-weight',\n        getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value as string) && null,\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['strong', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBold: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleBold: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetBold: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-b': () => this.editor.commands.toggleBold(),\n      'Mod-B': () => this.editor.commands.toggleBold(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"]},"metadata":{},"sourceType":"module"}