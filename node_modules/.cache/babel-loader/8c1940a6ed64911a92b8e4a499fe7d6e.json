{"ast":null,"code":"import _assertThisInitialized from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _objectSpread from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Plugin, PluginKey, TextSelection, Selection, NodeSelection, EditorState } from 'prosemirror-state';\nimport { EditorView } from 'prosemirror-view';\nimport { keymap } from 'prosemirror-keymap';\nimport { Schema, Fragment, DOMParser, DOMSerializer, Node as Node$1, Slice } from 'prosemirror-model';\nimport { liftTarget, ReplaceStep, ReplaceAroundStep, Transform, canSplit, canJoin, findWrapping } from 'prosemirror-transform';\nimport { createParagraphNear as createParagraphNear$1, deleteSelection as deleteSelection$1, exitCode as exitCode$1, joinUp as joinUp$1, joinDown as joinDown$1, joinBackward as joinBackward$1, joinForward as joinForward$1, lift as lift$1, liftEmptyBlock as liftEmptyBlock$1, newlineInCode as newlineInCode$1, selectNodeBackward as selectNodeBackward$1, selectNodeForward as selectNodeForward$1, selectParentNode as selectParentNode$1, selectTextblockEnd as selectTextblockEnd$1, selectTextblockStart as selectTextblockStart$1, setBlockType, wrapIn as wrapIn$1 } from 'prosemirror-commands';\nimport { liftListItem as liftListItem$1, sinkListItem as sinkListItem$1, wrapInList as wrapInList$1 } from 'prosemirror-schema-list';\nfunction createChainableState(config) {\n  var state = config.state,\n    transaction = config.transaction;\n  var selection = transaction.selection;\n  var doc = transaction.doc;\n  var storedMarks = transaction.storedMarks;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    filterTransaction: state.filterTransaction,\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks;\n    },\n    get selection() {\n      return selection;\n    },\n    get doc() {\n      return doc;\n    },\n    get tr() {\n      selection = transaction.selection;\n      doc = transaction.doc;\n      storedMarks = transaction.storedMarks;\n      return transaction;\n    }\n  });\n}\nvar CommandManager = /*#__PURE__*/function () {\n  function CommandManager(props) {\n    _classCallCheck(this, CommandManager);\n    this.editor = props.editor;\n    this.rawCommands = this.editor.extensionManager.commands;\n    this.customState = props.state;\n  }\n  _createClass(CommandManager, [{\n    key: \"hasCustomState\",\n    get: function get() {\n      return !!this.customState;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.customState || this.editor.state;\n    }\n  }, {\n    key: \"commands\",\n    get: function get() {\n      var _this = this;\n      var rawCommands = this.rawCommands,\n        editor = this.editor,\n        state = this.state;\n      var view = editor.view;\n      var tr = state.tr;\n      var props = this.buildProps(tr);\n      return Object.fromEntries(Object.entries(rawCommands).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          command = _ref2[1];\n        var method = function method() {\n          var callback = command.apply(void 0, arguments)(props);\n          if (!tr.getMeta('preventDispatch') && !_this.hasCustomState) {\n            view.dispatch(tr);\n          }\n          return callback;\n        };\n        return [name, method];\n      }));\n    }\n  }, {\n    key: \"chain\",\n    get: function get() {\n      var _this2 = this;\n      return function () {\n        return _this2.createChain();\n      };\n    }\n  }, {\n    key: \"can\",\n    get: function get() {\n      var _this3 = this;\n      return function () {\n        return _this3.createCan();\n      };\n    }\n  }, {\n    key: \"createChain\",\n    value: function createChain(startTr) {\n      var _this4 = this;\n      var shouldDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rawCommands = this.rawCommands,\n        editor = this.editor,\n        state = this.state;\n      var view = editor.view;\n      var callbacks = [];\n      var hasStartTransaction = !!startTr;\n      var tr = startTr || state.tr;\n      var run = function run() {\n        if (!hasStartTransaction && shouldDispatch && !tr.getMeta('preventDispatch') && !_this4.hasCustomState) {\n          view.dispatch(tr);\n        }\n        return callbacks.every(function (callback) {\n          return callback === true;\n        });\n      };\n      var chain = _objectSpread(_objectSpread({}, Object.fromEntries(Object.entries(rawCommands).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          name = _ref4[0],\n          command = _ref4[1];\n        var chainedCommand = function chainedCommand() {\n          var props = _this4.buildProps(tr, shouldDispatch);\n          var callback = command.apply(void 0, arguments)(props);\n          callbacks.push(callback);\n          return chain;\n        };\n        return [name, chainedCommand];\n      }))), {}, {\n        run: run\n      });\n      return chain;\n    }\n  }, {\n    key: \"createCan\",\n    value: function createCan(startTr) {\n      var _this5 = this;\n      var rawCommands = this.rawCommands,\n        state = this.state;\n      var dispatch = false;\n      var tr = startTr || state.tr;\n      var props = this.buildProps(tr, dispatch);\n      var formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          name = _ref6[0],\n          command = _ref6[1];\n        return [name, function () {\n          return command.apply(void 0, arguments)(_objectSpread(_objectSpread({}, props), {}, {\n            dispatch: undefined\n          }));\n        }];\n      }));\n      return _objectSpread(_objectSpread({}, formattedCommands), {}, {\n        chain: function chain() {\n          return _this5.createChain(tr, dispatch);\n        }\n      });\n    }\n  }, {\n    key: \"buildProps\",\n    value: function buildProps(tr) {\n      var _this6 = this;\n      var shouldDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rawCommands = this.rawCommands,\n        editor = this.editor,\n        state = this.state;\n      var view = editor.view;\n      if (state.storedMarks) {\n        tr.setStoredMarks(state.storedMarks);\n      }\n      var props = {\n        tr: tr,\n        editor: editor,\n        view: view,\n        state: createChainableState({\n          state: state,\n          transaction: tr\n        }),\n        dispatch: shouldDispatch ? function () {\n          return undefined;\n        } : undefined,\n        chain: function chain() {\n          return _this6.createChain(tr);\n        },\n        can: function can() {\n          return _this6.createCan(tr);\n        },\n        get commands() {\n          return Object.fromEntries(Object.entries(rawCommands).map(function (_ref7) {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              name = _ref8[0],\n              command = _ref8[1];\n            return [name, function () {\n              return command.apply(void 0, arguments)(props);\n            }];\n          }));\n        }\n      };\n      return props;\n    }\n  }]);\n  return CommandManager;\n}();\nvar EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n    this.callbacks = {};\n  }\n  _createClass(EventEmitter, [{\n    key: \"on\",\n    value: function on(event, fn) {\n      if (!this.callbacks[event]) {\n        this.callbacks[event] = [];\n      }\n      this.callbacks[event].push(fn);\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var _this7 = this;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var callbacks = this.callbacks[event];\n      if (callbacks) {\n        callbacks.forEach(function (callback) {\n          return callback.apply(_this7, args);\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, fn) {\n      var callbacks = this.callbacks[event];\n      if (callbacks) {\n        if (fn) {\n          this.callbacks[event] = callbacks.filter(function (callback) {\n            return callback !== fn;\n          });\n        } else {\n          delete this.callbacks[event];\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this.callbacks = {};\n    }\n  }]);\n  return EventEmitter;\n}();\nfunction getExtensionField(extension, field, context) {\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context);\n  }\n  if (typeof extension.config[field] === 'function') {\n    var value = extension.config[field].bind(_objectSpread(_objectSpread({}, context), {}, {\n      parent: extension.parent ? getExtensionField(extension.parent, field, context) : null\n    }));\n    return value;\n  }\n  return extension.config[field];\n}\nfunction splitExtensions(extensions) {\n  var baseExtensions = extensions.filter(function (extension) {\n    return extension.type === 'extension';\n  });\n  var nodeExtensions = extensions.filter(function (extension) {\n    return extension.type === 'node';\n  });\n  var markExtensions = extensions.filter(function (extension) {\n    return extension.type === 'mark';\n  });\n  return {\n    baseExtensions: baseExtensions,\n    nodeExtensions: nodeExtensions,\n    markExtensions: markExtensions\n  };\n}\n\n/**\r\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\r\n * @param extensions List of extensions\r\n */\nfunction getAttributesFromExtensions(extensions) {\n  var extensionAttributes = [];\n  var _splitExtensions = splitExtensions(extensions),\n    nodeExtensions = _splitExtensions.nodeExtensions,\n    markExtensions = _splitExtensions.markExtensions;\n  var nodeAndMarkExtensions = [].concat(_toConsumableArray(nodeExtensions), _toConsumableArray(markExtensions));\n  var defaultAttribute = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false\n  };\n  extensions.forEach(function (extension) {\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    var addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);\n    if (!addGlobalAttributes) {\n      return;\n    }\n    // TODO: remove `as GlobalAttributes`\n    var globalAttributes = addGlobalAttributes();\n    globalAttributes.forEach(function (globalAttribute) {\n      globalAttribute.types.forEach(function (type) {\n        Object.entries(globalAttribute.attributes).forEach(function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 2),\n            name = _ref10[0],\n            attribute = _ref10[1];\n          extensionAttributes.push({\n            type: type,\n            name: name,\n            attribute: _objectSpread(_objectSpread({}, defaultAttribute), attribute)\n          });\n        });\n      });\n    });\n  });\n  nodeAndMarkExtensions.forEach(function (extension) {\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    var addAttributes = getExtensionField(extension, 'addAttributes', context);\n    if (!addAttributes) {\n      return;\n    }\n    // TODO: remove `as Attributes`\n    var attributes = addAttributes();\n    Object.entries(attributes).forEach(function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n        name = _ref12[0],\n        attribute = _ref12[1];\n      var mergedAttr = _objectSpread(_objectSpread({}, defaultAttribute), attribute);\n      if ((attribute === null || attribute === void 0 ? void 0 : attribute.isRequired) && (attribute === null || attribute === void 0 ? void 0 : attribute.default) === undefined) {\n        delete mergedAttr.default;\n      }\n      extensionAttributes.push({\n        type: extension.name,\n        name: name,\n        attribute: mergedAttr\n      });\n    });\n  });\n  return extensionAttributes;\n}\nfunction getNodeType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(\"There is no node type named '\".concat(nameOrType, \"'. Maybe you forgot to add the extension?\"));\n    }\n    return schema.nodes[nameOrType];\n  }\n  return nameOrType;\n}\nfunction mergeAttributes() {\n  for (var _len2 = arguments.length, objects = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    objects[_key2] = arguments[_key2];\n  }\n  return objects.filter(function (item) {\n    return !!item;\n  }).reduce(function (items, item) {\n    var mergedAttributes = _objectSpread({}, items);\n    Object.entries(item).forEach(function (_ref13) {\n      var _ref14 = _slicedToArray(_ref13, 2),\n        key = _ref14[0],\n        value = _ref14[1];\n      var exists = mergedAttributes[key];\n      if (!exists) {\n        mergedAttributes[key] = value;\n        return;\n      }\n      if (key === 'class') {\n        mergedAttributes[key] = [mergedAttributes[key], value].join(' ');\n      } else if (key === 'style') {\n        mergedAttributes[key] = [mergedAttributes[key], value].join('; ');\n      } else {\n        mergedAttributes[key] = value;\n      }\n    });\n    return mergedAttributes;\n  }, {});\n}\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n  return extensionAttributes.filter(function (item) {\n    return item.attribute.rendered;\n  }).map(function (item) {\n    if (!item.attribute.renderHTML) {\n      return _defineProperty({}, item.name, nodeOrMark.attrs[item.name]);\n    }\n    return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n  }).reduce(function (attributes, attribute) {\n    return mergeAttributes(attributes, attribute);\n  }, {});\n}\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\n/**\r\n * Optionally calls `value` as a function.\r\n * Otherwise it is returned directly.\r\n * @param value Function or any value.\r\n * @param context Optional context to bind to function.\r\n * @param props Optional props to pass to function.\r\n */\nfunction callOrReturn(value) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (isFunction(value)) {\n    for (var _len3 = arguments.length, props = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      props[_key3 - 2] = arguments[_key3];\n    }\n    if (context) {\n      return value.bind(context).apply(void 0, props);\n    }\n    return value.apply(void 0, props);\n  }\n  return value;\n}\nfunction isEmptyObject() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.keys(value).length === 0 && value.constructor === Object;\n}\nfunction fromString(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value);\n  }\n  if (value === 'true') {\n    return true;\n  }\n  if (value === 'false') {\n    return false;\n  }\n  return value;\n}\n\n/**\r\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\r\n * Cancels when `getAttrs` returned `false`.\r\n * @param parseRule ProseMirror ParseRule\r\n * @param extensionAttributes List of attributes to inject\r\n */\nfunction injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n  if (parseRule.style) {\n    return parseRule;\n  }\n  return _objectSpread(_objectSpread({}, parseRule), {}, {\n    getAttrs: function getAttrs(node) {\n      var oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n      if (oldAttributes === false) {\n        return false;\n      }\n      var newAttributes = extensionAttributes.reduce(function (items, item) {\n        var value = item.attribute.parseHTML ? item.attribute.parseHTML(node) : fromString(node.getAttribute(item.name));\n        if (value === null || value === undefined) {\n          return items;\n        }\n        return _objectSpread(_objectSpread({}, items), {}, _defineProperty({}, item.name, value));\n      }, {});\n      return _objectSpread(_objectSpread({}, oldAttributes), newAttributes);\n    }\n  });\n}\nfunction cleanUpSchemaItem(data) {\n  return Object.fromEntries(Object.entries(data).filter(function (_ref16) {\n    var _ref17 = _slicedToArray(_ref16, 2),\n      key = _ref17[0],\n      value = _ref17[1];\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false;\n    }\n    return value !== null && value !== undefined;\n  }));\n}\nfunction getSchemaByResolvedExtensions(extensions) {\n  var _a;\n  var allAttributes = getAttributesFromExtensions(extensions);\n  var _splitExtensions2 = splitExtensions(extensions),\n    nodeExtensions = _splitExtensions2.nodeExtensions,\n    markExtensions = _splitExtensions2.markExtensions;\n  var topNode = (_a = nodeExtensions.find(function (extension) {\n    return getExtensionField(extension, 'topNode');\n  })) === null || _a === void 0 ? void 0 : _a.name;\n  var nodes = Object.fromEntries(nodeExtensions.map(function (extension) {\n    var extensionAttributes = allAttributes.filter(function (attribute) {\n      return attribute.type === extension.name;\n    });\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    var extraNodeFields = extensions.reduce(function (fields, e) {\n      var extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);\n      return _objectSpread(_objectSpread({}, fields), extendNodeSchema ? extendNodeSchema(extension) : {});\n    }, {});\n    var schema = cleanUpSchemaItem(_objectSpread(_objectSpread({}, extraNodeFields), {}, {\n      content: callOrReturn(getExtensionField(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(function (extensionAttribute) {\n        var _a;\n        return [extensionAttribute.name, {\n          default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n        }];\n      }))\n    }));\n    var parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(function (parseRule) {\n        return injectExtensionAttributesToParseRule(parseRule, extensionAttributes);\n      });\n    }\n    var renderHTML = getExtensionField(extension, 'renderHTML', context);\n    if (renderHTML) {\n      schema.toDOM = function (node) {\n        return renderHTML({\n          node: node,\n          HTMLAttributes: getRenderedAttributes(node, extensionAttributes)\n        });\n      };\n    }\n    var renderText = getExtensionField(extension, 'renderText', context);\n    if (renderText) {\n      schema.toText = renderText;\n    }\n    return [extension.name, schema];\n  }));\n  var marks = Object.fromEntries(markExtensions.map(function (extension) {\n    var extensionAttributes = allAttributes.filter(function (attribute) {\n      return attribute.type === extension.name;\n    });\n    var context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    var extraMarkFields = extensions.reduce(function (fields, e) {\n      var extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);\n      return _objectSpread(_objectSpread({}, fields), extendMarkSchema ? extendMarkSchema(extension) : {});\n    }, {});\n    var schema = cleanUpSchemaItem(_objectSpread(_objectSpread({}, extraMarkFields), {}, {\n      inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(function (extensionAttribute) {\n        var _a;\n        return [extensionAttribute.name, {\n          default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n        }];\n      }))\n    }));\n    var parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(function (parseRule) {\n        return injectExtensionAttributesToParseRule(parseRule, extensionAttributes);\n      });\n    }\n    var renderHTML = getExtensionField(extension, 'renderHTML', context);\n    if (renderHTML) {\n      schema.toDOM = function (mark) {\n        return renderHTML({\n          mark: mark,\n          HTMLAttributes: getRenderedAttributes(mark, extensionAttributes)\n        });\n      };\n    }\n    return [extension.name, schema];\n  }));\n  return new Schema({\n    topNode: topNode,\n    nodes: nodes,\n    marks: marks\n  });\n}\nfunction getSchemaTypeByName(name, schema) {\n  return schema.nodes[name] || schema.marks[name] || null;\n}\nfunction isExtensionRulesEnabled(extension, enabled) {\n  if (Array.isArray(enabled)) {\n    return enabled.some(function (enabledExtension) {\n      var name = typeof enabledExtension === 'string' ? enabledExtension : enabledExtension.name;\n      return name === extension.name;\n    });\n  }\n  return enabled;\n}\nvar getTextContentFromNodes = function getTextContentFromNodes($from) {\n  var maxMatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  var textBefore = '';\n  var sliceEndPos = $from.parentOffset;\n  $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, function (node, pos, parent, index) {\n    var _a, _b;\n    var chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\n      node: node,\n      pos: pos,\n      parent: parent,\n      index: index\n    })) || node.textContent || '%leaf%';\n    textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));\n  });\n  return textBefore;\n};\nfunction isRegExp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\nvar InputRule = /*#__PURE__*/_createClass(function InputRule(config) {\n  _classCallCheck(this, InputRule);\n  this.find = config.find;\n  this.handler = config.handler;\n});\nvar inputRuleMatcherHandler = function inputRuleMatcherHandler(text, find) {\n  if (isRegExp(find)) {\n    return find.exec(text);\n  }\n  var inputRuleMatch = find(text);\n  if (!inputRuleMatch) {\n    return null;\n  }\n  var result = [];\n  result.push(inputRuleMatch.text);\n  result.index = inputRuleMatch.index;\n  result.input = text;\n  result.data = inputRuleMatch.data;\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n    }\n    result.push(inputRuleMatch.replaceWith);\n  }\n  return result;\n};\nfunction run$1(config) {\n  var _a;\n  var editor = config.editor,\n    from = config.from,\n    to = config.to,\n    text = config.text,\n    rules = config.rules,\n    plugin = config.plugin;\n  var view = editor.view;\n  if (view.composing) {\n    return false;\n  }\n  var $from = view.state.doc.resolve(from);\n  if (\n  // check for code node\n  $from.parent.type.spec.code\n  // check for code mark\n  || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find(function (mark) {\n    return mark.type.spec.code;\n  }))) {\n    return false;\n  }\n  var matched = false;\n  var textBefore = getTextContentFromNodes($from) + text;\n  rules.forEach(function (rule) {\n    if (matched) {\n      return;\n    }\n    var match = inputRuleMatcherHandler(textBefore, rule.find);\n    if (!match) {\n      return;\n    }\n    var tr = view.state.tr;\n    var state = createChainableState({\n      state: view.state,\n      transaction: tr\n    });\n    var range = {\n      from: from - (match[0].length - text.length),\n      to: to\n    };\n    var _CommandManager = new CommandManager({\n        editor: editor,\n        state: state\n      }),\n      commands = _CommandManager.commands,\n      chain = _CommandManager.chain,\n      can = _CommandManager.can;\n    var handler = rule.handler({\n      state: state,\n      range: range,\n      match: match,\n      commands: commands,\n      chain: chain,\n      can: can\n    });\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return;\n    }\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from: from,\n      to: to,\n      text: text\n    });\n    view.dispatch(tr);\n    matched = true;\n  });\n  return matched;\n}\n/**\r\n * Create an input rules plugin. When enabled, it will cause text\r\n * input that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */\nfunction inputRulesPlugin(props) {\n  var editor = props.editor,\n    rules = props.rules;\n  var plugin = new Plugin({\n    state: {\n      init: function init() {\n        return null;\n      },\n      apply: function apply(tr, prev) {\n        var stored = tr.getMeta(plugin);\n        if (stored) {\n          return stored;\n        }\n        return tr.selectionSet || tr.docChanged ? null : prev;\n      }\n    },\n    props: {\n      handleTextInput: function handleTextInput(view, from, to, text) {\n        return run$1({\n          editor: editor,\n          from: from,\n          to: to,\n          text: text,\n          rules: rules,\n          plugin: plugin\n        });\n      },\n      handleDOMEvents: {\n        compositionend: function compositionend(view) {\n          setTimeout(function () {\n            var $cursor = view.state.selection.$cursor;\n            if ($cursor) {\n              run$1({\n                editor: editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules: rules,\n                plugin: plugin\n              });\n            }\n          });\n          return false;\n        }\n      },\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown: function handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false;\n        }\n        var $cursor = view.state.selection.$cursor;\n        if ($cursor) {\n          return run$1({\n            editor: editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules: rules,\n            plugin: plugin\n          });\n        }\n        return false;\n      }\n    },\n    // @ts-ignore\n    isInputRules: true\n  });\n  return plugin;\n}\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\nvar PasteRule = /*#__PURE__*/_createClass(function PasteRule(config) {\n  _classCallCheck(this, PasteRule);\n  this.find = config.find;\n  this.handler = config.handler;\n});\nvar pasteRuleMatcherHandler = function pasteRuleMatcherHandler(text, find) {\n  if (isRegExp(find)) {\n    return _toConsumableArray(text.matchAll(find));\n  }\n  var matches = find(text);\n  if (!matches) {\n    return [];\n  }\n  return matches.map(function (pasteRuleMatch) {\n    var result = [];\n    result.push(pasteRuleMatch.text);\n    result.index = pasteRuleMatch.index;\n    result.input = text;\n    result.data = pasteRuleMatch.data;\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n      }\n      result.push(pasteRuleMatch.replaceWith);\n    }\n    return result;\n  });\n};\nfunction run(config) {\n  var editor = config.editor,\n    state = config.state,\n    from = config.from,\n    to = config.to,\n    rule = config.rule;\n  var _CommandManager2 = new CommandManager({\n      editor: editor,\n      state: state\n    }),\n    commands = _CommandManager2.commands,\n    chain = _CommandManager2.chain,\n    can = _CommandManager2.can;\n  var handlers = [];\n  state.doc.nodesBetween(from, to, function (node, pos) {\n    if (!node.isTextblock || node.type.spec.code) {\n      return;\n    }\n    var resolvedFrom = Math.max(from, pos);\n    var resolvedTo = Math.min(to, pos + node.content.size);\n    var textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, \"\\uFFFC\");\n    var matches = pasteRuleMatcherHandler(textToMatch, rule.find);\n    matches.forEach(function (match) {\n      if (match.index === undefined) {\n        return;\n      }\n      var start = resolvedFrom + match.index + 1;\n      var end = start + match[0].length;\n      var range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end)\n      };\n      var handler = rule.handler({\n        state: state,\n        range: range,\n        match: match,\n        commands: commands,\n        chain: chain,\n        can: can\n      });\n      handlers.push(handler);\n    });\n  });\n  var success = handlers.every(function (handler) {\n    return handler !== null;\n  });\n  return success;\n}\n/**\r\n * Create an paste rules plugin. When enabled, it will cause pasted\r\n * text that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */\nfunction pasteRulesPlugin(props) {\n  var editor = props.editor,\n    rules = props.rules;\n  var dragSourceElement = null;\n  var isPastedFromProseMirror = false;\n  var isDroppedFromProseMirror = false;\n  var plugins = rules.map(function (rule) {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view: function view(_view) {\n        var handleDragstart = function handleDragstart(event) {\n          var _a;\n          dragSourceElement = ((_a = _view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target)) ? _view.dom.parentElement : null;\n        };\n        window.addEventListener('dragstart', handleDragstart);\n        return {\n          destroy: function destroy() {\n            window.removeEventListener('dragstart', handleDragstart);\n          }\n        };\n      },\n      props: {\n        handleDOMEvents: {\n          drop: function drop(view) {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\n            return false;\n          },\n          paste: function paste(view, event) {\n            var _a;\n            var html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');\n            isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));\n            return false;\n          }\n        }\n      },\n      appendTransaction: function appendTransaction(transactions, oldState, state) {\n        var transaction = transactions[0];\n        var isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;\n        var isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;\n        if (!isPaste && !isDrop) {\n          return;\n        }\n        // stop if there is no changed range\n        var from = oldState.doc.content.findDiffStart(state.doc.content);\n        var to = oldState.doc.content.findDiffEnd(state.doc.content);\n        if (!isNumber(from) || !to || from === to.b) {\n          return;\n        }\n        // build a chainable state\n        // so we can use a single transaction for all paste rules\n        var tr = state.tr;\n        var chainableState = createChainableState({\n          state: state,\n          transaction: tr\n        });\n        var handler = run({\n          editor: editor,\n          state: chainableState,\n          from: Math.max(from - 1, 0),\n          to: to.b - 1,\n          rule: rule\n        });\n        // stop if there are no changes\n        if (!handler || !tr.steps.length) {\n          return;\n        }\n        return tr;\n      }\n    });\n  });\n  return plugins;\n}\nfunction findDuplicates(items) {\n  var filtered = items.filter(function (el, index) {\n    return items.indexOf(el) !== index;\n  });\n  return _toConsumableArray(new Set(filtered));\n}\nvar ExtensionManager = /*#__PURE__*/function () {\n  function ExtensionManager(extensions, editor) {\n    var _this8 = this;\n    _classCallCheck(this, ExtensionManager);\n    this.splittableMarks = [];\n    this.editor = editor;\n    this.extensions = ExtensionManager.resolve(extensions);\n    this.schema = getSchemaByResolvedExtensions(this.extensions);\n    this.extensions.forEach(function (extension) {\n      var _a;\n      // store extension storage in editor\n      _this8.editor.extensionStorage[extension.name] = extension.storage;\n      var context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: _this8.editor,\n        type: getSchemaTypeByName(extension.name, _this8.schema)\n      };\n      if (extension.type === 'mark') {\n        var keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;\n        if (keepOnSplit) {\n          _this8.splittableMarks.push(extension.name);\n        }\n      }\n      var onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);\n      if (onBeforeCreate) {\n        _this8.editor.on('beforeCreate', onBeforeCreate);\n      }\n      var onCreate = getExtensionField(extension, 'onCreate', context);\n      if (onCreate) {\n        _this8.editor.on('create', onCreate);\n      }\n      var onUpdate = getExtensionField(extension, 'onUpdate', context);\n      if (onUpdate) {\n        _this8.editor.on('update', onUpdate);\n      }\n      var onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);\n      if (onSelectionUpdate) {\n        _this8.editor.on('selectionUpdate', onSelectionUpdate);\n      }\n      var onTransaction = getExtensionField(extension, 'onTransaction', context);\n      if (onTransaction) {\n        _this8.editor.on('transaction', onTransaction);\n      }\n      var onFocus = getExtensionField(extension, 'onFocus', context);\n      if (onFocus) {\n        _this8.editor.on('focus', onFocus);\n      }\n      var onBlur = getExtensionField(extension, 'onBlur', context);\n      if (onBlur) {\n        _this8.editor.on('blur', onBlur);\n      }\n      var onDestroy = getExtensionField(extension, 'onDestroy', context);\n      if (onDestroy) {\n        _this8.editor.on('destroy', onDestroy);\n      }\n    });\n  }\n  _createClass(ExtensionManager, [{\n    key: \"commands\",\n    get: function get() {\n      var _this9 = this;\n      return this.extensions.reduce(function (commands, extension) {\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor: _this9.editor,\n          type: getSchemaTypeByName(extension.name, _this9.schema)\n        };\n        var addCommands = getExtensionField(extension, 'addCommands', context);\n        if (!addCommands) {\n          return commands;\n        }\n        return _objectSpread(_objectSpread({}, commands), addCommands());\n      }, {});\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      var _this10 = this;\n      var editor = this.editor;\n      // With ProseMirror, first plugins within an array are executed first.\n      // In tiptap, we provide the ability to override plugins,\n      // so it feels more natural to run plugins at the end of an array first.\n      // That’s why we have to reverse the `extensions` array and sort again\n      // based on the `priority` option.\n      var extensions = ExtensionManager.sort(_toConsumableArray(this.extensions).reverse());\n      var inputRules = [];\n      var pasteRules = [];\n      var allPlugins = extensions.map(function (extension) {\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor: editor,\n          type: getSchemaTypeByName(extension.name, _this10.schema)\n        };\n        var plugins = [];\n        var addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);\n        var defaultBindings = {};\n        // bind exit handling\n        if (extension.type === 'mark' && extension.config.exitable) {\n          defaultBindings.ArrowRight = function () {\n            return Mark.handleExit({\n              editor: editor,\n              mark: extension\n            });\n          };\n        }\n        if (addKeyboardShortcuts) {\n          var bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(function (_ref18) {\n            var _ref19 = _slicedToArray(_ref18, 2),\n              shortcut = _ref19[0],\n              method = _ref19[1];\n            return [shortcut, function () {\n              return method({\n                editor: editor\n              });\n            }];\n          }));\n          defaultBindings = _objectSpread(_objectSpread({}, defaultBindings), bindings);\n        }\n        var keyMapPlugin = keymap(defaultBindings);\n        plugins.push(keyMapPlugin);\n        var addInputRules = getExtensionField(extension, 'addInputRules', context);\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push.apply(inputRules, _toConsumableArray(addInputRules()));\n        }\n        var addPasteRules = getExtensionField(extension, 'addPasteRules', context);\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push.apply(pasteRules, _toConsumableArray(addPasteRules()));\n        }\n        var addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);\n        if (addProseMirrorPlugins) {\n          var proseMirrorPlugins = addProseMirrorPlugins();\n          plugins.push.apply(plugins, _toConsumableArray(proseMirrorPlugins));\n        }\n        return plugins;\n      }).flat();\n      return [inputRulesPlugin({\n        editor: editor,\n        rules: inputRules\n      })].concat(_toConsumableArray(pasteRulesPlugin({\n        editor: editor,\n        rules: pasteRules\n      })), _toConsumableArray(allPlugins));\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return getAttributesFromExtensions(this.extensions);\n    }\n  }, {\n    key: \"nodeViews\",\n    get: function get() {\n      var _this11 = this;\n      var editor = this.editor;\n      var _splitExtensions3 = splitExtensions(this.extensions),\n        nodeExtensions = _splitExtensions3.nodeExtensions;\n      return Object.fromEntries(nodeExtensions.filter(function (extension) {\n        return !!getExtensionField(extension, 'addNodeView');\n      }).map(function (extension) {\n        var extensionAttributes = _this11.attributes.filter(function (attribute) {\n          return attribute.type === extension.name;\n        });\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor: editor,\n          type: getNodeType(extension.name, _this11.schema)\n        };\n        var addNodeView = getExtensionField(extension, 'addNodeView', context);\n        if (!addNodeView) {\n          return [];\n        }\n        var nodeview = function nodeview(node, view, getPos, decorations) {\n          var HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n          return addNodeView()({\n            editor: editor,\n            node: node,\n            getPos: getPos,\n            decorations: decorations,\n            HTMLAttributes: HTMLAttributes,\n            extension: extension\n          });\n        };\n        return [extension.name, nodeview];\n      }));\n    }\n  }], [{\n    key: \"resolve\",\n    value: function resolve(extensions) {\n      var resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n      var duplicatedNames = findDuplicates(resolvedExtensions.map(function (extension) {\n        return extension.name;\n      }));\n      if (duplicatedNames.length) {\n        console.warn(\"[tiptap warn]: Duplicate extension names found: [\".concat(duplicatedNames.map(function (item) {\n          return \"'\".concat(item, \"'\");\n        }).join(', '), \"]. This can lead to issues.\"));\n      }\n      return resolvedExtensions;\n    }\n  }, {\n    key: \"flatten\",\n    value: function flatten(extensions) {\n      var _this12 = this;\n      return extensions.map(function (extension) {\n        var context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage\n        };\n        var addExtensions = getExtensionField(extension, 'addExtensions', context);\n        if (addExtensions) {\n          return [extension].concat(_toConsumableArray(_this12.flatten(addExtensions())));\n        }\n        return extension;\n      })\n      // `Infinity` will break TypeScript so we set a number that is probably high enough\n      .flat(10);\n    }\n  }, {\n    key: \"sort\",\n    value: function sort(extensions) {\n      var defaultPriority = 100;\n      return extensions.sort(function (a, b) {\n        var priorityA = getExtensionField(a, 'priority') || defaultPriority;\n        var priorityB = getExtensionField(b, 'priority') || defaultPriority;\n        if (priorityA > priorityB) {\n          return -1;\n        }\n        if (priorityA < priorityB) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n  }]);\n  return ExtensionManager;\n}(); // see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\nfunction getType(value) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n}\nfunction isPlainObject(value) {\n  if (getType(value) !== 'Object') {\n    return false;\n  }\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\nfunction mergeDeep(target, source) {\n  var output = _objectSpread({}, target);\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(function (key) {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, _defineProperty({}, key, source[key]));\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, _defineProperty({}, key, source[key]));\n      }\n    });\n  }\n  return output;\n}\nvar Extension = /*#__PURE__*/function () {\n  function Extension() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Extension);\n    this.type = 'extension';\n    this.name = 'extension';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = _objectSpread(_objectSpread({}, this.config), config);\n    this.name = this.config.name;\n    if (config.defaultOptions) {\n      console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(this.name, \"\\\".\"));\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  _createClass(Extension, [{\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // return a new instance so we can use the same extension\n      // with different calls of `configure`\n      var extension = this.extend();\n      extension.options = mergeDeep(this.options, options);\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      var extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var extension = new Extension(extendedConfig);\n      extension.parent = this;\n      this.child = extension;\n      extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n      if (extendedConfig.defaultOptions) {\n        console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(extension.name, \"\\\".\"));\n      }\n      extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n        name: extension.name\n      }));\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Extension(config);\n    }\n  }]);\n  return Extension;\n}();\nfunction getTextBetween(startNode, range, options) {\n  var from = range.from,\n    to = range.to;\n  var _ref20 = options || {},\n    _ref20$blockSeparator = _ref20.blockSeparator,\n    blockSeparator = _ref20$blockSeparator === void 0 ? '\\n\\n' : _ref20$blockSeparator,\n    _ref20$textSerializer = _ref20.textSerializers,\n    textSerializers = _ref20$textSerializer === void 0 ? {} : _ref20$textSerializer;\n  var text = '';\n  var separated = true;\n  startNode.nodesBetween(from, to, function (node, pos, parent, index) {\n    var _a;\n    var textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n    if (textSerializer) {\n      if (node.isBlock && !separated) {\n        text += blockSeparator;\n        separated = true;\n      }\n      if (parent) {\n        text += textSerializer({\n          node: node,\n          pos: pos,\n          parent: parent,\n          index: index,\n          range: range\n        });\n      }\n    } else if (node.isText) {\n      text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\n      separated = false;\n    } else if (node.isBlock && !separated) {\n      text += blockSeparator;\n      separated = true;\n    }\n  });\n  return text;\n}\nfunction getTextSerializersFromSchema(schema) {\n  return Object.fromEntries(Object.entries(schema.nodes).filter(function (_ref21) {\n    var _ref22 = _slicedToArray(_ref21, 2),\n      node = _ref22[1];\n    return node.spec.toText;\n  }).map(function (_ref23) {\n    var _ref24 = _slicedToArray(_ref23, 2),\n      name = _ref24[0],\n      node = _ref24[1];\n    return [name, node.spec.toText];\n  }));\n}\nvar ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this13 = this;\n    return [new Plugin({\n      key: new PluginKey('clipboardTextSerializer'),\n      props: {\n        clipboardTextSerializer: function clipboardTextSerializer() {\n          var editor = _this13.editor;\n          var state = editor.state,\n            schema = editor.schema;\n          var doc = state.doc,\n            selection = state.selection;\n          var ranges = selection.ranges;\n          var from = Math.min.apply(Math, _toConsumableArray(ranges.map(function (range) {\n            return range.$from.pos;\n          })));\n          var to = Math.max.apply(Math, _toConsumableArray(ranges.map(function (range) {\n            return range.$to.pos;\n          })));\n          var textSerializers = getTextSerializersFromSchema(schema);\n          var range = {\n            from: from,\n            to: to\n          };\n          return getTextBetween(doc, range, {\n            textSerializers: textSerializers\n          });\n        }\n      }\n    })];\n  }\n});\nvar blur = function blur() {\n  return function (_ref25) {\n    var editor = _ref25.editor,\n      view = _ref25.view;\n    requestAnimationFrame(function () {\n      var _a;\n      if (!editor.isDestroyed) {\n        view.dom.blur();\n        // Browsers should remove the caret on blur but safari does not.\n        // See: https://github.com/ueberdosis/tiptap/issues/2405\n        (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n      }\n    });\n    return true;\n  };\n};\nvar clearContent = function clearContent() {\n  var emitUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return function (_ref26) {\n    var commands = _ref26.commands;\n    return commands.setContent('', emitUpdate);\n  };\n};\nvar clearNodes = function clearNodes() {\n  return function (_ref27) {\n    var state = _ref27.state,\n      tr = _ref27.tr,\n      dispatch = _ref27.dispatch;\n    var selection = tr.selection;\n    var ranges = selection.ranges;\n    if (!dispatch) {\n      return true;\n    }\n    ranges.forEach(function (_ref28) {\n      var $from = _ref28.$from,\n        $to = _ref28.$to;\n      state.doc.nodesBetween($from.pos, $to.pos, function (node, pos) {\n        if (node.type.isText) {\n          return;\n        }\n        var doc = tr.doc,\n          mapping = tr.mapping;\n        var $mappedFrom = doc.resolve(mapping.map(pos));\n        var $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n        var nodeRange = $mappedFrom.blockRange($mappedTo);\n        if (!nodeRange) {\n          return;\n        }\n        var targetLiftDepth = liftTarget(nodeRange);\n        if (node.type.isTextblock) {\n          var _$mappedFrom$parent$c = $mappedFrom.parent.contentMatchAt($mappedFrom.index()),\n            defaultType = _$mappedFrom$parent$c.defaultType;\n          tr.setNodeMarkup(nodeRange.start, defaultType);\n        }\n        if (targetLiftDepth || targetLiftDepth === 0) {\n          tr.lift(nodeRange, targetLiftDepth);\n        }\n      });\n    });\n    return true;\n  };\n};\nvar command = function command(fn) {\n  return function (props) {\n    return fn(props);\n  };\n};\nvar createParagraphNear = function createParagraphNear() {\n  return function (_ref29) {\n    var state = _ref29.state,\n      dispatch = _ref29.dispatch;\n    return createParagraphNear$1(state, dispatch);\n  };\n};\nvar deleteCurrentNode = function deleteCurrentNode() {\n  return function (_ref30) {\n    var tr = _ref30.tr,\n      dispatch = _ref30.dispatch;\n    var selection = tr.selection;\n    var currentNode = selection.$anchor.node();\n    // if there is content inside the current node, break out of this command\n    if (currentNode.content.size > 0) {\n      return false;\n    }\n    var $pos = tr.selection.$anchor;\n    for (var depth = $pos.depth; depth > 0; depth -= 1) {\n      var node = $pos.node(depth);\n      if (node.type === currentNode.type) {\n        if (dispatch) {\n          var from = $pos.before(depth);\n          var to = $pos.after(depth);\n          tr.delete(from, to).scrollIntoView();\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n};\nvar deleteNode = function deleteNode(typeOrName) {\n  return function (_ref31) {\n    var tr = _ref31.tr,\n      state = _ref31.state,\n      dispatch = _ref31.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    var $pos = tr.selection.$anchor;\n    for (var depth = $pos.depth; depth > 0; depth -= 1) {\n      var node = $pos.node(depth);\n      if (node.type === type) {\n        if (dispatch) {\n          var from = $pos.before(depth);\n          var to = $pos.after(depth);\n          tr.delete(from, to).scrollIntoView();\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n};\nvar deleteRange = function deleteRange(range) {\n  return function (_ref32) {\n    var tr = _ref32.tr,\n      dispatch = _ref32.dispatch;\n    var from = range.from,\n      to = range.to;\n    if (dispatch) {\n      tr.delete(from, to);\n    }\n    return true;\n  };\n};\nvar deleteSelection = function deleteSelection() {\n  return function (_ref33) {\n    var state = _ref33.state,\n      dispatch = _ref33.dispatch;\n    return deleteSelection$1(state, dispatch);\n  };\n};\nvar enter = function enter() {\n  return function (_ref34) {\n    var commands = _ref34.commands;\n    return commands.keyboardShortcut('Enter');\n  };\n};\nvar exitCode = function exitCode() {\n  return function (_ref35) {\n    var state = _ref35.state,\n      dispatch = _ref35.dispatch;\n    return exitCode$1(state, dispatch);\n  };\n};\n\n/**\r\n * Check if object1 includes object2\r\n * @param object1 Object\r\n * @param object2 Object\r\n */\nfunction objectIncludes(object1, object2) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    strict: true\n  };\n  var keys = Object.keys(object2);\n  if (!keys.length) {\n    return true;\n  }\n  return keys.every(function (key) {\n    if (options.strict) {\n      return object2[key] === object1[key];\n    }\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key]);\n    }\n    return object2[key] === object1[key];\n  });\n}\nfunction findMarkInSet(marks, type) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return marks.find(function (item) {\n    return item.type === type && objectIncludes(item.attrs, attributes);\n  });\n}\nfunction isMarkInSet(marks, type) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return !!findMarkInSet(marks, type, attributes);\n}\nfunction getMarkRange($pos, type) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!$pos || !type) {\n    return;\n  }\n  var start = $pos.parent.childAfter($pos.parentOffset);\n  if ($pos.parentOffset === start.offset && start.offset !== 0) {\n    start = $pos.parent.childBefore($pos.parentOffset);\n  }\n  if (!start.node) {\n    return;\n  }\n  var mark = findMarkInSet(_toConsumableArray(start.node.marks), type, attributes);\n  if (!mark) {\n    return;\n  }\n  var startIndex = start.index;\n  var startPos = $pos.start() + start.offset;\n  var endIndex = startIndex + 1;\n  var endPos = startPos + start.node.nodeSize;\n  findMarkInSet(_toConsumableArray(start.node.marks), type, attributes);\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1;\n    startPos -= $pos.parent.child(startIndex).nodeSize;\n  }\n  while (endIndex < $pos.parent.childCount && isMarkInSet(_toConsumableArray($pos.parent.child(endIndex).marks), type, attributes)) {\n    endPos += $pos.parent.child(endIndex).nodeSize;\n    endIndex += 1;\n  }\n  return {\n    from: startPos,\n    to: endPos\n  };\n}\nfunction getMarkType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(\"There is no mark type named '\".concat(nameOrType, \"'. Maybe you forgot to add the extension?\"));\n    }\n    return schema.marks[nameOrType];\n  }\n  return nameOrType;\n}\nvar extendMarkRange = function extendMarkRange(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref36) {\n    var tr = _ref36.tr,\n      state = _ref36.state,\n      dispatch = _ref36.dispatch;\n    var type = getMarkType(typeOrName, state.schema);\n    var doc = tr.doc,\n      selection = tr.selection;\n    var $from = selection.$from,\n      from = selection.from,\n      to = selection.to;\n    if (dispatch) {\n      var range = getMarkRange($from, type, attributes);\n      if (range && range.from <= from && range.to >= to) {\n        var newSelection = TextSelection.create(doc, range.from, range.to);\n        tr.setSelection(newSelection);\n      }\n    }\n    return true;\n  };\n};\nvar first = function first(commands) {\n  return function (props) {\n    var items = typeof commands === 'function' ? commands(props) : commands;\n    for (var i = 0; i < items.length; i += 1) {\n      if (items[i](props)) {\n        return true;\n      }\n    }\n    return false;\n  };\n};\nfunction isTextSelection(value) {\n  return value instanceof TextSelection;\n}\nfunction minMax() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return Math.min(Math.max(value, min), max);\n}\nfunction resolveFocusPosition(doc) {\n  var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!position) {\n    return null;\n  }\n  var selectionAtStart = Selection.atStart(doc);\n  var selectionAtEnd = Selection.atEnd(doc);\n  if (position === 'start' || position === true) {\n    return selectionAtStart;\n  }\n  if (position === 'end') {\n    return selectionAtEnd;\n  }\n  var minPos = selectionAtStart.from;\n  var maxPos = selectionAtEnd.to;\n  if (position === 'all') {\n    return TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\n  }\n  return TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\n}\nfunction isiOS() {\n  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;\n}\nvar focus = function focus() {\n  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref37) {\n    var editor = _ref37.editor,\n      view = _ref37.view,\n      tr = _ref37.tr,\n      dispatch = _ref37.dispatch;\n    options = _objectSpread({\n      scrollIntoView: true\n    }, options);\n    var delayedFocus = function delayedFocus() {\n      // focus within `requestAnimationFrame` breaks focus on iOS\n      // so we have to call this\n      if (isiOS()) {\n        view.dom.focus();\n      }\n      // For React we have to focus asynchronously. Otherwise wild things happen.\n      // see: https://github.com/ueberdosis/tiptap/issues/1520\n      requestAnimationFrame(function () {\n        if (!editor.isDestroyed) {\n          view.focus();\n          if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n            editor.commands.scrollIntoView();\n          }\n        }\n      });\n    };\n    if (view.hasFocus() && position === null || position === false) {\n      return true;\n    }\n    // we don’t try to resolve a NodeSelection or CellSelection\n    if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n      delayedFocus();\n      return true;\n    }\n    // pass through tr.doc instead of editor.state.doc\n    // since transactions could change the editors state before this command has been run\n    var selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\n    var isSameSelection = editor.state.selection.eq(selection);\n    if (dispatch) {\n      if (!isSameSelection) {\n        tr.setSelection(selection);\n      }\n      // `tr.setSelection` resets the stored marks\n      // so we’ll restore them if the selection is the same as before\n      if (isSameSelection && tr.storedMarks) {\n        tr.setStoredMarks(tr.storedMarks);\n      }\n      delayedFocus();\n    }\n    return true;\n  };\n};\nvar forEach = function forEach(items, fn) {\n  return function (props) {\n    return items.every(function (item, index) {\n      return fn(item, _objectSpread(_objectSpread({}, props), {}, {\n        index: index\n      }));\n    });\n  };\n};\nvar insertContent = function insertContent(value, options) {\n  return function (_ref38) {\n    var tr = _ref38.tr,\n      commands = _ref38.commands;\n    return commands.insertContentAt({\n      from: tr.selection.from,\n      to: tr.selection.to\n    }, value, options);\n  };\n};\nfunction elementFromString(value) {\n  // add a wrapper to preserve leading and trailing whitespace\n  var wrappedValue = \"<body>\".concat(value, \"</body>\");\n  return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;\n}\nfunction createNodeFromContent(content, schema, options) {\n  options = _objectSpread({\n    slice: true,\n    parseOptions: {}\n  }, options);\n  if (typeof content === 'object' && content !== null) {\n    try {\n      if (Array.isArray(content)) {\n        return Fragment.fromArray(content.map(function (item) {\n          return schema.nodeFromJSON(item);\n        }));\n      }\n      return schema.nodeFromJSON(content);\n    } catch (error) {\n      console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);\n      return createNodeFromContent('', schema, options);\n    }\n  }\n  if (typeof content === 'string') {\n    var parser = DOMParser.fromSchema(schema);\n    return options.slice ? parser.parseSlice(elementFromString(content), options.parseOptions).content : parser.parse(elementFromString(content), options.parseOptions);\n  }\n  return createNodeFromContent('', schema, options);\n}\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  var last = tr.steps.length - 1;\n  if (last < startLen) {\n    return;\n  }\n  var step = tr.steps[last];\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return;\n  }\n  var map = tr.mapping.maps[last];\n  var end = 0;\n  map.forEach(function (_from, _to, _newFrom, newTo) {\n    if (end === 0) {\n      end = newTo;\n    }\n  });\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\nvar isFragment = function isFragment(nodeOrFragment) {\n  return nodeOrFragment.toString().startsWith('<');\n};\nvar insertContentAt = function insertContentAt(position, value, options) {\n  return function (_ref39) {\n    var tr = _ref39.tr,\n      dispatch = _ref39.dispatch,\n      editor = _ref39.editor;\n    if (dispatch) {\n      options = _objectSpread({\n        parseOptions: {},\n        updateSelection: true\n      }, options);\n      var content = createNodeFromContent(value, editor.schema, {\n        parseOptions: _objectSpread({\n          preserveWhitespace: 'full'\n        }, options.parseOptions)\n      });\n      // don’t dispatch an empty fragment because this can lead to strange errors\n      if (content.toString() === '<>') {\n        return true;\n      }\n      var _ref40 = typeof position === 'number' ? {\n          from: position,\n          to: position\n        } : position,\n        from = _ref40.from,\n        to = _ref40.to;\n      var isOnlyTextContent = true;\n      var isOnlyBlockContent = true;\n      var nodes = isFragment(content) ? content : [content];\n      nodes.forEach(function (node) {\n        // check if added node is valid\n        node.check();\n        isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\n        isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n      });\n      // check if we can replace the wrapping node by\n      // the newly inserted content\n      // example:\n      // replace an empty paragraph by an inserted image\n      // instead of inserting the image below the paragraph\n      if (from === to && isOnlyBlockContent) {\n        var _tr$doc$resolve = tr.doc.resolve(from),\n          parent = _tr$doc$resolve.parent;\n        var isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n        if (isEmptyTextBlock) {\n          from -= 1;\n          to += 1;\n        }\n      }\n      // if there is only plain text we have to use `insertText`\n      // because this will keep the current marks\n      if (isOnlyTextContent) {\n        tr.insertText(value, from, to);\n      } else {\n        tr.replaceWith(from, to, content);\n      }\n      // set cursor at end of inserted content\n      if (options.updateSelection) {\n        selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n      }\n    }\n    return true;\n  };\n};\nvar joinUp = function joinUp() {\n  return function (_ref41) {\n    var state = _ref41.state,\n      dispatch = _ref41.dispatch;\n    return joinUp$1(state, dispatch);\n  };\n};\nvar joinDown = function joinDown() {\n  return function (_ref42) {\n    var state = _ref42.state,\n      dispatch = _ref42.dispatch;\n    return joinDown$1(state, dispatch);\n  };\n};\nvar joinBackward = function joinBackward() {\n  return function (_ref43) {\n    var state = _ref43.state,\n      dispatch = _ref43.dispatch;\n    return joinBackward$1(state, dispatch);\n  };\n};\nvar joinForward = function joinForward() {\n  return function (_ref44) {\n    var state = _ref44.state,\n      dispatch = _ref44.dispatch;\n    return joinForward$1(state, dispatch);\n  };\n};\nfunction isMacOS() {\n  return typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n}\nfunction normalizeKeyName(name) {\n  var parts = name.split(/-(?!$)/);\n  var result = parts[parts.length - 1];\n  if (result === 'Space') {\n    result = ' ';\n  }\n  var alt;\n  var ctrl;\n  var shift;\n  var meta;\n  for (var i = 0; i < parts.length - 1; i += 1) {\n    var mod = parts[i];\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true;\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true;\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true;\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true;\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true;\n      } else {\n        ctrl = true;\n      }\n    } else {\n      throw new Error(\"Unrecognized modifier name: \".concat(mod));\n    }\n  }\n  if (alt) {\n    result = \"Alt-\".concat(result);\n  }\n  if (ctrl) {\n    result = \"Ctrl-\".concat(result);\n  }\n  if (meta) {\n    result = \"Meta-\".concat(result);\n  }\n  if (shift) {\n    result = \"Shift-\".concat(result);\n  }\n  return result;\n}\nvar keyboardShortcut = function keyboardShortcut(name) {\n  return function (_ref45) {\n    var editor = _ref45.editor,\n      view = _ref45.view,\n      tr = _ref45.tr,\n      dispatch = _ref45.dispatch;\n    var keys = normalizeKeyName(name).split(/-(?!$)/);\n    var key = keys.find(function (item) {\n      return !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item);\n    });\n    var event = new KeyboardEvent('keydown', {\n      key: key === 'Space' ? ' ' : key,\n      altKey: keys.includes('Alt'),\n      ctrlKey: keys.includes('Ctrl'),\n      metaKey: keys.includes('Meta'),\n      shiftKey: keys.includes('Shift'),\n      bubbles: true,\n      cancelable: true\n    });\n    var capturedTransaction = editor.captureTransaction(function () {\n      view.someProp('handleKeyDown', function (f) {\n        return f(view, event);\n      });\n    });\n    capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(function (step) {\n      var newStep = step.map(tr.mapping);\n      if (newStep && dispatch) {\n        tr.maybeStep(newStep);\n      }\n    });\n    return true;\n  };\n};\nfunction isNodeActive(state, typeOrName) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _state$selection = state.selection,\n    from = _state$selection.from,\n    to = _state$selection.to,\n    empty = _state$selection.empty;\n  var type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n  var nodeRanges = [];\n  state.doc.nodesBetween(from, to, function (node, pos) {\n    if (node.isText) {\n      return;\n    }\n    var relativeFrom = Math.max(from, pos);\n    var relativeTo = Math.min(to, pos + node.nodeSize);\n    nodeRanges.push({\n      node: node,\n      from: relativeFrom,\n      to: relativeTo\n    });\n  });\n  var selectionRange = to - from;\n  var matchedNodeRanges = nodeRanges.filter(function (nodeRange) {\n    if (!type) {\n      return true;\n    }\n    return type.name === nodeRange.node.type.name;\n  }).filter(function (nodeRange) {\n    return objectIncludes(nodeRange.node.attrs, attributes, {\n      strict: false\n    });\n  });\n  if (empty) {\n    return !!matchedNodeRanges.length;\n  }\n  var range = matchedNodeRanges.reduce(function (sum, nodeRange) {\n    return sum + nodeRange.to - nodeRange.from;\n  }, 0);\n  return range >= selectionRange;\n}\nvar lift = function lift(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref46) {\n    var state = _ref46.state,\n      dispatch = _ref46.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    var isActive = isNodeActive(state, type, attributes);\n    if (!isActive) {\n      return false;\n    }\n    return lift$1(state, dispatch);\n  };\n};\nvar liftEmptyBlock = function liftEmptyBlock() {\n  return function (_ref47) {\n    var state = _ref47.state,\n      dispatch = _ref47.dispatch;\n    return liftEmptyBlock$1(state, dispatch);\n  };\n};\nvar liftListItem = function liftListItem(typeOrName) {\n  return function (_ref48) {\n    var state = _ref48.state,\n      dispatch = _ref48.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    return liftListItem$1(type)(state, dispatch);\n  };\n};\nvar newlineInCode = function newlineInCode() {\n  return function (_ref49) {\n    var state = _ref49.state,\n      dispatch = _ref49.dispatch;\n    return newlineInCode$1(state, dispatch);\n  };\n};\nfunction getSchemaTypeNameByName(name, schema) {\n  if (schema.nodes[name]) {\n    return 'node';\n  }\n  if (schema.marks[name]) {\n    return 'mark';\n  }\n  return null;\n}\n\n/**\r\n * Remove a property or an array of properties from an object\r\n * @param obj Object\r\n * @param key Key to remove\r\n */\nfunction deleteProps(obj, propOrProps) {\n  var props = typeof propOrProps === 'string' ? [propOrProps] : propOrProps;\n  return Object.keys(obj).reduce(function (newObj, prop) {\n    if (!props.includes(prop)) {\n      newObj[prop] = obj[prop];\n    }\n    return newObj;\n  }, {});\n}\nvar resetAttributes = function resetAttributes(typeOrName, attributes) {\n  return function (_ref50) {\n    var tr = _ref50.tr,\n      state = _ref50.state,\n      dispatch = _ref50.dispatch;\n    var nodeType = null;\n    var markType = null;\n    var schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (!schemaType) {\n      return false;\n    }\n    if (schemaType === 'node') {\n      nodeType = getNodeType(typeOrName, state.schema);\n    }\n    if (schemaType === 'mark') {\n      markType = getMarkType(typeOrName, state.schema);\n    }\n    if (dispatch) {\n      tr.selection.ranges.forEach(function (range) {\n        state.doc.nodesBetween(range.$from.pos, range.$to.pos, function (node, pos) {\n          if (nodeType && nodeType === node.type) {\n            tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n          }\n          if (markType && node.marks.length) {\n            node.marks.forEach(function (mark) {\n              if (markType === mark.type) {\n                tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n              }\n            });\n          }\n        });\n      });\n    }\n    return true;\n  };\n};\nvar scrollIntoView = function scrollIntoView() {\n  return function (_ref51) {\n    var tr = _ref51.tr,\n      dispatch = _ref51.dispatch;\n    if (dispatch) {\n      tr.scrollIntoView();\n    }\n    return true;\n  };\n};\nvar selectAll = function selectAll() {\n  return function (_ref52) {\n    var tr = _ref52.tr,\n      commands = _ref52.commands;\n    return commands.setTextSelection({\n      from: 0,\n      to: tr.doc.content.size\n    });\n  };\n};\nvar selectNodeBackward = function selectNodeBackward() {\n  return function (_ref53) {\n    var state = _ref53.state,\n      dispatch = _ref53.dispatch;\n    return selectNodeBackward$1(state, dispatch);\n  };\n};\nvar selectNodeForward = function selectNodeForward() {\n  return function (_ref54) {\n    var state = _ref54.state,\n      dispatch = _ref54.dispatch;\n    return selectNodeForward$1(state, dispatch);\n  };\n};\nvar selectParentNode = function selectParentNode() {\n  return function (_ref55) {\n    var state = _ref55.state,\n      dispatch = _ref55.dispatch;\n    return selectParentNode$1(state, dispatch);\n  };\n};\n\n// @ts-ignore\nvar selectTextblockEnd = function selectTextblockEnd() {\n  return function (_ref56) {\n    var state = _ref56.state,\n      dispatch = _ref56.dispatch;\n    return selectTextblockEnd$1(state, dispatch);\n  };\n};\n\n// @ts-ignore\nvar selectTextblockStart = function selectTextblockStart() {\n  return function (_ref57) {\n    var state = _ref57.state,\n      dispatch = _ref57.dispatch;\n    return selectTextblockStart$1(state, dispatch);\n  };\n};\nfunction createDocument(content, schema) {\n  var parseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return createNodeFromContent(content, schema, {\n    slice: false,\n    parseOptions: parseOptions\n  });\n}\nvar setContent = function setContent(content) {\n  var emitUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var parseOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return function (_ref58) {\n    var tr = _ref58.tr,\n      editor = _ref58.editor,\n      dispatch = _ref58.dispatch;\n    var doc = tr.doc;\n    var document = createDocument(content, editor.schema, parseOptions);\n    if (dispatch) {\n      tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate);\n    }\n    return true;\n  };\n};\n\n/**\r\n * Returns a new `Transform` based on all steps of the passed transactions.\r\n */\nfunction combineTransactionSteps(oldDoc, transactions) {\n  var transform = new Transform(oldDoc);\n  transactions.forEach(function (transaction) {\n    transaction.steps.forEach(function (step) {\n      transform.step(step);\n    });\n  });\n  return transform;\n}\nfunction defaultBlockAt(match) {\n  for (var i = 0; i < match.edgeCount; i += 1) {\n    var _match$edge = match.edge(i),\n      type = _match$edge.type;\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type;\n    }\n  }\n  return null;\n}\nfunction findChildren(node, predicate) {\n  var nodesWithPos = [];\n  node.descendants(function (child, pos) {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos: pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n\n/**\r\n * Same as `findChildren` but searches only within a `range`.\r\n */\nfunction findChildrenInRange(node, range, predicate) {\n  var nodesWithPos = [];\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n  node.nodesBetween(range.from, range.to, function (child, pos) {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos: pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\nfunction findParentNodeClosestToPos($pos, predicate) {\n  for (var i = $pos.depth; i > 0; i -= 1) {\n    var node = $pos.node(i);\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node: node\n      };\n    }\n  }\n}\nfunction findParentNode(predicate) {\n  return function (selection) {\n    return findParentNodeClosestToPos(selection.$from, predicate);\n  };\n}\nfunction getHTMLFromFragment(fragment, schema) {\n  var documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n  var temporaryDocument = document.implementation.createHTMLDocument();\n  var container = temporaryDocument.createElement('div');\n  container.appendChild(documentFragment);\n  return container.innerHTML;\n}\nfunction getSchema(extensions) {\n  var resolvedExtensions = ExtensionManager.resolve(extensions);\n  return getSchemaByResolvedExtensions(resolvedExtensions);\n}\nfunction generateHTML(doc, extensions) {\n  var schema = getSchema(extensions);\n  var contentNode = Node$1.fromJSON(schema, doc);\n  return getHTMLFromFragment(contentNode.content, schema);\n}\nfunction generateJSON(html, extensions) {\n  var schema = getSchema(extensions);\n  var dom = elementFromString(html);\n  return DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\nfunction _getText(node, options) {\n  var range = {\n    from: 0,\n    to: node.content.size\n  };\n  return getTextBetween(node, range, options);\n}\nfunction generateText(doc, extensions, options) {\n  var _ref59 = options || {},\n    _ref59$blockSeparator = _ref59.blockSeparator,\n    blockSeparator = _ref59$blockSeparator === void 0 ? '\\n\\n' : _ref59$blockSeparator,\n    _ref59$textSerializer = _ref59.textSerializers,\n    textSerializers = _ref59$textSerializer === void 0 ? {} : _ref59$textSerializer;\n  var schema = getSchema(extensions);\n  var contentNode = Node$1.fromJSON(schema, doc);\n  return _getText(contentNode, {\n    blockSeparator: blockSeparator,\n    textSerializers: _objectSpread(_objectSpread({}, getTextSerializersFromSchema(schema)), textSerializers)\n  });\n}\nfunction getMarkAttributes(state, typeOrName) {\n  var type = getMarkType(typeOrName, state.schema);\n  var _state$selection2 = state.selection,\n    from = _state$selection2.from,\n    to = _state$selection2.to,\n    empty = _state$selection2.empty;\n  var marks = [];\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push.apply(marks, _toConsumableArray(state.storedMarks));\n    }\n    marks.push.apply(marks, _toConsumableArray(state.selection.$head.marks()));\n  } else {\n    state.doc.nodesBetween(from, to, function (node) {\n      marks.push.apply(marks, _toConsumableArray(node.marks));\n    });\n  }\n  var mark = marks.find(function (markItem) {\n    return markItem.type.name === type.name;\n  });\n  if (!mark) {\n    return {};\n  }\n  return _objectSpread({}, mark.attrs);\n}\nfunction getNodeAttributes(state, typeOrName) {\n  var type = getNodeType(typeOrName, state.schema);\n  var _state$selection3 = state.selection,\n    from = _state$selection3.from,\n    to = _state$selection3.to;\n  var nodes = [];\n  state.doc.nodesBetween(from, to, function (node) {\n    nodes.push(node);\n  });\n  var node = nodes.reverse().find(function (nodeItem) {\n    return nodeItem.type.name === type.name;\n  });\n  if (!node) {\n    return {};\n  }\n  return _objectSpread({}, node.attrs);\n}\nfunction _getAttributes(state, typeOrName) {\n  var schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName);\n  }\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName);\n  }\n  return {};\n}\n\n/**\r\n * Removes duplicated values within an array.\r\n * Supports numbers, strings and objects.\r\n */\nfunction removeDuplicates(array) {\n  var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : JSON.stringify;\n  var seen = {};\n  return array.filter(function (item) {\n    var key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key) ? false : seen[key] = true;\n  });\n}\n\n/**\r\n * Removes duplicated ranges and ranges that are\r\n * fully captured by other ranges.\r\n */\nfunction simplifyChangedRanges(changes) {\n  var uniqueChanges = removeDuplicates(changes);\n  return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter(function (change, index) {\n    var rest = uniqueChanges.filter(function (_, i) {\n      return i !== index;\n    });\n    return !rest.some(function (otherChange) {\n      return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;\n    });\n  });\n}\n/**\r\n * Returns a list of changed ranges\r\n * based on the first and last state of all steps.\r\n */\nfunction getChangedRanges(transform) {\n  var mapping = transform.mapping,\n    steps = transform.steps;\n  var changes = [];\n  mapping.maps.forEach(function (stepMap, index) {\n    var ranges = [];\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      var _steps$index = steps[index],\n        from = _steps$index.from,\n        to = _steps$index.to;\n      if (from === undefined || to === undefined) {\n        return;\n      }\n      ranges.push({\n        from: from,\n        to: to\n      });\n    } else {\n      stepMap.forEach(function (from, to) {\n        ranges.push({\n          from: from,\n          to: to\n        });\n      });\n    }\n    ranges.forEach(function (_ref60) {\n      var from = _ref60.from,\n        to = _ref60.to;\n      var newStart = mapping.slice(index).map(from, -1);\n      var newEnd = mapping.slice(index).map(to);\n      var oldStart = mapping.invert().map(newStart, -1);\n      var oldEnd = mapping.invert().map(newEnd);\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd\n        }\n      });\n    });\n  });\n  return simplifyChangedRanges(changes);\n}\nfunction getDebugJSON(node) {\n  var startOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var isTopNode = node.type === node.type.schema.topNodeType;\n  var increment = isTopNode ? 0 : 1;\n  var from = startOffset;\n  var to = from + node.nodeSize;\n  var marks = node.marks.map(function (mark) {\n    var output = {\n      type: mark.type.name\n    };\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = _objectSpread({}, mark.attrs);\n    }\n    return output;\n  });\n  var attrs = _objectSpread({}, node.attrs);\n  var output = {\n    type: node.type.name,\n    from: from,\n    to: to\n  };\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs;\n  }\n  if (marks.length) {\n    output.marks = marks;\n  }\n  if (node.content.childCount) {\n    output.content = [];\n    node.forEach(function (child, offset) {\n      var _a;\n      (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n    });\n  }\n  if (node.text) {\n    output.text = node.text;\n  }\n  return output;\n}\nfunction getMarksBetween(from, to, doc) {\n  var marks = [];\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc.resolve(from).marks().forEach(function (mark) {\n      var $pos = doc.resolve(from - 1);\n      var range = getMarkRange($pos, mark.type);\n      if (!range) {\n        return;\n      }\n      marks.push(_objectSpread({\n        mark: mark\n      }, range));\n    });\n  } else {\n    doc.nodesBetween(from, to, function (node, pos) {\n      marks.push.apply(marks, _toConsumableArray(node.marks.map(function (mark) {\n        return {\n          from: pos,\n          to: pos + node.nodeSize,\n          mark: mark\n        };\n      })));\n    });\n  }\n  return marks;\n}\nfunction isMarkActive(state, typeOrName) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _state$selection4 = state.selection,\n    empty = _state$selection4.empty,\n    ranges = _state$selection4.ranges;\n  var type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks()).filter(function (mark) {\n      if (!type) {\n        return true;\n      }\n      return type.name === mark.type.name;\n    }).find(function (mark) {\n      return objectIncludes(mark.attrs, attributes, {\n        strict: false\n      });\n    });\n  }\n  var selectionRange = 0;\n  var markRanges = [];\n  ranges.forEach(function (_ref61) {\n    var $from = _ref61.$from,\n      $to = _ref61.$to;\n    var from = $from.pos;\n    var to = $to.pos;\n    state.doc.nodesBetween(from, to, function (node, pos) {\n      if (!node.isText && !node.marks.length) {\n        return;\n      }\n      var relativeFrom = Math.max(from, pos);\n      var relativeTo = Math.min(to, pos + node.nodeSize);\n      var range = relativeTo - relativeFrom;\n      selectionRange += range;\n      markRanges.push.apply(markRanges, _toConsumableArray(node.marks.map(function (mark) {\n        return {\n          mark: mark,\n          from: relativeFrom,\n          to: relativeTo\n        };\n      })));\n    });\n  });\n  if (selectionRange === 0) {\n    return false;\n  }\n  // calculate range of matched mark\n  var matchedRange = markRanges.filter(function (markRange) {\n    if (!type) {\n      return true;\n    }\n    return type.name === markRange.mark.type.name;\n  }).filter(function (markRange) {\n    return objectIncludes(markRange.mark.attrs, attributes, {\n      strict: false\n    });\n  }).reduce(function (sum, markRange) {\n    return sum + markRange.to - markRange.from;\n  }, 0);\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  var excludedRange = markRanges.filter(function (markRange) {\n    if (!type) {\n      return true;\n    }\n    return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n  }).reduce(function (sum, markRange) {\n    return sum + markRange.to - markRange.from;\n  }, 0);\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  var range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n  return range >= selectionRange;\n}\nfunction _isActive(state, name) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n  }\n  var schemaType = getSchemaTypeNameByName(name, state.schema);\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes);\n  }\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes);\n  }\n  return false;\n}\nfunction isList(name, extensions) {\n  var _splitExtensions4 = splitExtensions(extensions),\n    nodeExtensions = _splitExtensions4.nodeExtensions;\n  var extension = nodeExtensions.find(function (item) {\n    return item.name === name;\n  });\n  if (!extension) {\n    return false;\n  }\n  var context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage\n  };\n  var group = callOrReturn(getExtensionField(extension, 'group', context));\n  if (typeof group !== 'string') {\n    return false;\n  }\n  return group.split(' ').includes('list');\n}\nfunction isNodeEmpty(node) {\n  var _a;\n  var defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();\n  var content = node.toJSON();\n  return JSON.stringify(defaultContent) === JSON.stringify(content);\n}\nfunction isNodeSelection(value) {\n  return value instanceof NodeSelection;\n}\nfunction posToDOMRect(view, from, to) {\n  var minPos = 0;\n  var maxPos = view.state.doc.content.size;\n  var resolvedFrom = minMax(from, minPos, maxPos);\n  var resolvedEnd = minMax(to, minPos, maxPos);\n  var start = view.coordsAtPos(resolvedFrom);\n  var end = view.coordsAtPos(resolvedEnd, -1);\n  var top = Math.min(start.top, end.top);\n  var bottom = Math.max(start.bottom, end.bottom);\n  var left = Math.min(start.left, end.left);\n  var right = Math.max(start.right, end.right);\n  var width = right - left;\n  var height = bottom - top;\n  var x = left;\n  var y = top;\n  var data = {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n  return _objectSpread(_objectSpread({}, data), {}, {\n    toJSON: function toJSON() {\n      return data;\n    }\n  });\n}\nfunction canSetMark(state, tr, newMarkType) {\n  var _a;\n  var selection = tr.selection;\n  var cursor = null;\n  if (isTextSelection(selection)) {\n    cursor = selection.$cursor;\n  }\n  if (cursor) {\n    var currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\n    // There can be no current marks that exclude the new mark\n    return !!newMarkType.isInSet(currentMarks) || !currentMarks.some(function (mark) {\n      return mark.type.excludes(newMarkType);\n    });\n  }\n  var ranges = selection.ranges;\n  return ranges.some(function (_ref62) {\n    var $from = _ref62.$from,\n      $to = _ref62.$to;\n    var someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;\n    state.doc.nodesBetween($from.pos, $to.pos, function (node, _pos, parent) {\n      // If we already found a mark that we can enable, return false to bypass the remaining search\n      if (someNodeSupportsMark) {\n        return false;\n      }\n      if (node.isInline) {\n        var parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\n        var currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some(function (otherMark) {\n          return otherMark.type.excludes(newMarkType);\n        });\n        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\n      }\n      return !someNodeSupportsMark;\n    });\n    return someNodeSupportsMark;\n  });\n}\nvar setMark = function setMark(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref63) {\n    var tr = _ref63.tr,\n      state = _ref63.state,\n      dispatch = _ref63.dispatch;\n    var selection = tr.selection;\n    var empty = selection.empty,\n      ranges = selection.ranges;\n    var type = getMarkType(typeOrName, state.schema);\n    if (dispatch) {\n      if (empty) {\n        var oldAttributes = getMarkAttributes(state, type);\n        tr.addStoredMark(type.create(_objectSpread(_objectSpread({}, oldAttributes), attributes)));\n      } else {\n        ranges.forEach(function (range) {\n          var from = range.$from.pos;\n          var to = range.$to.pos;\n          state.doc.nodesBetween(from, to, function (node, pos) {\n            var trimmedFrom = Math.max(pos, from);\n            var trimmedTo = Math.min(pos + node.nodeSize, to);\n            var someHasMark = node.marks.find(function (mark) {\n              return mark.type === type;\n            });\n            // if there is already a mark of this type\n            // we know that we have to merge its attributes\n            // otherwise we add a fresh new mark\n            if (someHasMark) {\n              node.marks.forEach(function (mark) {\n                if (type === mark.type) {\n                  tr.addMark(trimmedFrom, trimmedTo, type.create(_objectSpread(_objectSpread({}, mark.attrs), attributes)));\n                }\n              });\n            } else {\n              tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n            }\n          });\n        });\n      }\n    }\n    return canSetMark(state, tr, type);\n  };\n};\nvar setMeta = function setMeta(key, value) {\n  return function (_ref64) {\n    var tr = _ref64.tr;\n    tr.setMeta(key, value);\n    return true;\n  };\n};\nvar setNode = function setNode(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref65) {\n    var state = _ref65.state,\n      dispatch = _ref65.dispatch,\n      chain = _ref65.chain;\n    var type = getNodeType(typeOrName, state.schema);\n    // TODO: use a fallback like insertContent?\n    if (!type.isTextblock) {\n      console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n      return false;\n    }\n    return chain()\n    // try to convert node to default node if needed\n    .command(function (_ref66) {\n      var commands = _ref66.commands;\n      var canSetBlock = setBlockType(type, attributes)(state);\n      if (canSetBlock) {\n        return true;\n      }\n      return commands.clearNodes();\n    }).command(function (_ref67) {\n      var updatedState = _ref67.state;\n      return setBlockType(type, attributes)(updatedState, dispatch);\n    }).run();\n  };\n};\nvar setNodeSelection = function setNodeSelection(position) {\n  return function (_ref68) {\n    var tr = _ref68.tr,\n      dispatch = _ref68.dispatch;\n    if (dispatch) {\n      var doc = tr.doc;\n      var from = minMax(position, 0, doc.content.size);\n      var selection = NodeSelection.create(doc, from);\n      tr.setSelection(selection);\n    }\n    return true;\n  };\n};\nvar setTextSelection = function setTextSelection(position) {\n  return function (_ref69) {\n    var tr = _ref69.tr,\n      dispatch = _ref69.dispatch;\n    if (dispatch) {\n      var doc = tr.doc;\n      var _ref70 = typeof position === 'number' ? {\n          from: position,\n          to: position\n        } : position,\n        from = _ref70.from,\n        to = _ref70.to;\n      var minPos = TextSelection.atStart(doc).from;\n      var maxPos = TextSelection.atEnd(doc).to;\n      var resolvedFrom = minMax(from, minPos, maxPos);\n      var resolvedEnd = minMax(to, minPos, maxPos);\n      var selection = TextSelection.create(doc, resolvedFrom, resolvedEnd);\n      tr.setSelection(selection);\n    }\n    return true;\n  };\n};\nvar sinkListItem = function sinkListItem(typeOrName) {\n  return function (_ref71) {\n    var state = _ref71.state,\n      dispatch = _ref71.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    return sinkListItem$1(type)(state, dispatch);\n  };\n};\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n  return Object.fromEntries(Object.entries(attributes).filter(function (_ref72) {\n    var _ref73 = _slicedToArray(_ref72, 1),\n      name = _ref73[0];\n    var extensionAttribute = extensionAttributes.find(function (item) {\n      return item.type === typeName && item.name === name;\n    });\n    if (!extensionAttribute) {\n      return false;\n    }\n    return extensionAttribute.attribute.keepOnSplit;\n  }));\n}\nfunction ensureMarks(state, splittableMarks) {\n  var marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n  if (marks) {\n    var filteredMarks = marks.filter(function (mark) {\n      return splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name);\n    });\n    state.tr.ensureMarks(filteredMarks);\n  }\n}\nvar splitBlock = function splitBlock() {\n  var _ref74 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref74$keepMarks = _ref74.keepMarks,\n    keepMarks = _ref74$keepMarks === void 0 ? true : _ref74$keepMarks;\n  return function (_ref75) {\n    var tr = _ref75.tr,\n      state = _ref75.state,\n      dispatch = _ref75.dispatch,\n      editor = _ref75.editor;\n    var selection = tr.selection,\n      doc = tr.doc;\n    var $from = selection.$from,\n      $to = selection.$to;\n    var extensionAttributes = editor.extensionManager.attributes;\n    var newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n    if (selection instanceof NodeSelection && selection.node.isBlock) {\n      if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n        return false;\n      }\n      if (dispatch) {\n        if (keepMarks) {\n          ensureMarks(state, editor.extensionManager.splittableMarks);\n        }\n        tr.split($from.pos).scrollIntoView();\n      }\n      return true;\n    }\n    if (!$from.parent.isBlock) {\n      return false;\n    }\n    if (dispatch) {\n      var atEnd = $to.parentOffset === $to.parent.content.size;\n      if (selection instanceof TextSelection) {\n        tr.deleteSelection();\n      }\n      var deflt = $from.depth === 0 ? undefined : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n      var types = atEnd && deflt ? [{\n        type: deflt,\n        attrs: newAttributes\n      }] : undefined;\n      var can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);\n      if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{\n        type: deflt\n      }] : undefined)) {\n        can = true;\n        types = deflt ? [{\n          type: deflt,\n          attrs: newAttributes\n        }] : undefined;\n      }\n      if (can) {\n        tr.split(tr.mapping.map($from.pos), 1, types);\n        if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n          var _first = tr.mapping.map($from.before());\n          var $first = tr.doc.resolve(_first);\n          if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n            tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n          }\n        }\n      }\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks);\n      }\n      tr.scrollIntoView();\n    }\n    return true;\n  };\n};\nvar splitListItem = function splitListItem(typeOrName) {\n  return function (_ref76) {\n    var tr = _ref76.tr,\n      state = _ref76.state,\n      dispatch = _ref76.dispatch,\n      editor = _ref76.editor;\n    var _a;\n    var type = getNodeType(typeOrName, state.schema);\n    var _state$selection5 = state.selection,\n      $from = _state$selection5.$from,\n      $to = _state$selection5.$to;\n    // @ts-ignore\n    // eslint-disable-next-line\n    var node = state.selection.node;\n    if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) {\n      return false;\n    }\n    var grandParent = $from.node(-1);\n    if (grandParent.type !== type) {\n      return false;\n    }\n    var extensionAttributes = editor.extensionManager.attributes;\n    if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n      // In an empty block. If this is a nested list, the wrapping\n      // list item should be split. Otherwise, bail out and let next\n      // command handle lifting.\n      if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {\n        return false;\n      }\n      if (dispatch) {\n        var wrap = Fragment.empty;\n        // eslint-disable-next-line\n        var depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n        // Build a fragment containing empty versions of the structure\n        // from the outer list item to the parent node of the cursor\n        for (var d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n          wrap = Fragment.from($from.node(d).copy(wrap));\n        }\n        // eslint-disable-next-line\n        var depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n        // Add a second list item with an empty default start node\n        var _newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n        var _nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(_newNextTypeAttributes)) || undefined;\n        wrap = wrap.append(Fragment.from(type.createAndFill(null, _nextType) || undefined));\n        var start = $from.before($from.depth - (depthBefore - 1));\n        tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));\n        var sel = -1;\n        tr.doc.nodesBetween(start, tr.doc.content.size, function (n, pos) {\n          if (sel > -1) {\n            return false;\n          }\n          if (n.isTextblock && n.content.size === 0) {\n            sel = pos + 1;\n          }\n        });\n        if (sel > -1) {\n          tr.setSelection(TextSelection.near(tr.doc.resolve(sel)));\n        }\n        tr.scrollIntoView();\n      }\n      return true;\n    }\n    var nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n    var newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);\n    var newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n    tr.delete($from.pos, $to.pos);\n    var types = nextType ? [{\n      type: type,\n      attrs: newTypeAttributes\n    }, {\n      type: nextType,\n      attrs: newNextTypeAttributes\n    }] : [{\n      type: type,\n      attrs: newTypeAttributes\n    }];\n    if (!canSplit(tr.doc, $from.pos, 2)) {\n      return false;\n    }\n    if (dispatch) {\n      tr.split($from.pos, 2, types).scrollIntoView();\n    }\n    return true;\n  };\n};\nvar joinListBackwards = function joinListBackwards(tr, listType) {\n  var list = findParentNode(function (node) {\n    return node.type === listType;\n  })(tr.selection);\n  if (!list) {\n    return true;\n  }\n  var before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n  if (before === undefined) {\n    return true;\n  }\n  var nodeBefore = tr.doc.nodeAt(before);\n  var canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && canJoin(tr.doc, list.pos);\n  if (!canJoinBackwards) {\n    return true;\n  }\n  tr.join(list.pos);\n  return true;\n};\nvar joinListForwards = function joinListForwards(tr, listType) {\n  var list = findParentNode(function (node) {\n    return node.type === listType;\n  })(tr.selection);\n  if (!list) {\n    return true;\n  }\n  var after = tr.doc.resolve(list.start).after(list.depth);\n  if (after === undefined) {\n    return true;\n  }\n  var nodeAfter = tr.doc.nodeAt(after);\n  var canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && canJoin(tr.doc, after);\n  if (!canJoinForwards) {\n    return true;\n  }\n  tr.join(after);\n  return true;\n};\nvar toggleList = function toggleList(listTypeOrName, itemTypeOrName) {\n  return function (_ref77) {\n    var editor = _ref77.editor,\n      tr = _ref77.tr,\n      state = _ref77.state,\n      dispatch = _ref77.dispatch,\n      chain = _ref77.chain,\n      commands = _ref77.commands,\n      can = _ref77.can;\n    var extensions = editor.extensionManager.extensions;\n    var listType = getNodeType(listTypeOrName, state.schema);\n    var itemType = getNodeType(itemTypeOrName, state.schema);\n    var selection = state.selection;\n    var $from = selection.$from,\n      $to = selection.$to;\n    var range = $from.blockRange($to);\n    if (!range) {\n      return false;\n    }\n    var parentList = findParentNode(function (node) {\n      return isList(node.type.name, extensions);\n    })(selection);\n    if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n      // remove list\n      if (parentList.node.type === listType) {\n        return commands.liftListItem(itemType);\n      }\n      // change list type\n      if (isList(parentList.node.type.name, extensions) && listType.validContent(parentList.node.content) && dispatch) {\n        return chain().command(function () {\n          tr.setNodeMarkup(parentList.pos, listType);\n          return true;\n        }).command(function () {\n          return joinListBackwards(tr, listType);\n        }).command(function () {\n          return joinListForwards(tr, listType);\n        }).run();\n      }\n    }\n    return chain()\n    // try to convert node to default node if needed\n    .command(function () {\n      var canWrapInList = can().wrapInList(listType);\n      if (canWrapInList) {\n        return true;\n      }\n      return commands.clearNodes();\n    }).wrapInList(listType).command(function () {\n      return joinListBackwards(tr, listType);\n    }).command(function () {\n      return joinListForwards(tr, listType);\n    }).run();\n  };\n};\nvar toggleMark = function toggleMark(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return function (_ref78) {\n    var state = _ref78.state,\n      commands = _ref78.commands;\n    var _options$extendEmptyM = options.extendEmptyMarkRange,\n      extendEmptyMarkRange = _options$extendEmptyM === void 0 ? false : _options$extendEmptyM;\n    var type = getMarkType(typeOrName, state.schema);\n    var isActive = isMarkActive(state, type, attributes);\n    if (isActive) {\n      return commands.unsetMark(type, {\n        extendEmptyMarkRange: extendEmptyMarkRange\n      });\n    }\n    return commands.setMark(type, attributes);\n  };\n};\nvar toggleNode = function toggleNode(typeOrName, toggleTypeOrName) {\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return function (_ref79) {\n    var state = _ref79.state,\n      commands = _ref79.commands;\n    var type = getNodeType(typeOrName, state.schema);\n    var toggleType = getNodeType(toggleTypeOrName, state.schema);\n    var isActive = isNodeActive(state, type, attributes);\n    if (isActive) {\n      return commands.setNode(toggleType);\n    }\n    return commands.setNode(type, attributes);\n  };\n};\nvar toggleWrap = function toggleWrap(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref80) {\n    var state = _ref80.state,\n      commands = _ref80.commands;\n    var type = getNodeType(typeOrName, state.schema);\n    var isActive = isNodeActive(state, type, attributes);\n    if (isActive) {\n      return commands.lift(type);\n    }\n    return commands.wrapIn(type, attributes);\n  };\n};\nvar undoInputRule = function undoInputRule() {\n  return function (_ref81) {\n    var state = _ref81.state,\n      dispatch = _ref81.dispatch;\n    var plugins = state.plugins;\n    for (var i = 0; i < plugins.length; i += 1) {\n      var plugin = plugins[i];\n      var undoable = void 0;\n      // @ts-ignore\n      // eslint-disable-next-line\n      if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n        if (dispatch) {\n          var tr = state.tr;\n          var toUndo = undoable.transform;\n          for (var j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n            tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n          }\n          if (undoable.text) {\n            var marks = tr.doc.resolve(undoable.from).marks();\n            tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n          } else {\n            tr.delete(undoable.from, undoable.to);\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n};\nvar unsetAllMarks = function unsetAllMarks() {\n  return function (_ref82) {\n    var tr = _ref82.tr,\n      dispatch = _ref82.dispatch;\n    var selection = tr.selection;\n    var empty = selection.empty,\n      ranges = selection.ranges;\n    if (empty) {\n      return true;\n    }\n    if (dispatch) {\n      ranges.forEach(function (range) {\n        tr.removeMark(range.$from.pos, range.$to.pos);\n      });\n    }\n    return true;\n  };\n};\nvar unsetMark = function unsetMark(typeOrName) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref83) {\n    var tr = _ref83.tr,\n      state = _ref83.state,\n      dispatch = _ref83.dispatch;\n    var _a;\n    var _options$extendEmptyM2 = options.extendEmptyMarkRange,\n      extendEmptyMarkRange = _options$extendEmptyM2 === void 0 ? false : _options$extendEmptyM2;\n    var selection = tr.selection;\n    var type = getMarkType(typeOrName, state.schema);\n    var $from = selection.$from,\n      empty = selection.empty,\n      ranges = selection.ranges;\n    if (!dispatch) {\n      return true;\n    }\n    if (empty && extendEmptyMarkRange) {\n      var from = selection.from,\n        to = selection.to;\n      var attrs = (_a = $from.marks().find(function (mark) {\n        return mark.type === type;\n      })) === null || _a === void 0 ? void 0 : _a.attrs;\n      var range = getMarkRange($from, type, attrs);\n      if (range) {\n        from = range.from;\n        to = range.to;\n      }\n      tr.removeMark(from, to, type);\n    } else {\n      ranges.forEach(function (range) {\n        tr.removeMark(range.$from.pos, range.$to.pos, type);\n      });\n    }\n    tr.removeStoredMark(type);\n    return true;\n  };\n};\nvar updateAttributes = function updateAttributes(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref84) {\n    var tr = _ref84.tr,\n      state = _ref84.state,\n      dispatch = _ref84.dispatch;\n    var nodeType = null;\n    var markType = null;\n    var schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (!schemaType) {\n      return false;\n    }\n    if (schemaType === 'node') {\n      nodeType = getNodeType(typeOrName, state.schema);\n    }\n    if (schemaType === 'mark') {\n      markType = getMarkType(typeOrName, state.schema);\n    }\n    if (dispatch) {\n      tr.selection.ranges.forEach(function (range) {\n        var from = range.$from.pos;\n        var to = range.$to.pos;\n        state.doc.nodesBetween(from, to, function (node, pos) {\n          if (nodeType && nodeType === node.type) {\n            tr.setNodeMarkup(pos, undefined, _objectSpread(_objectSpread({}, node.attrs), attributes));\n          }\n          if (markType && node.marks.length) {\n            node.marks.forEach(function (mark) {\n              if (markType === mark.type) {\n                var trimmedFrom = Math.max(pos, from);\n                var trimmedTo = Math.min(pos + node.nodeSize, to);\n                tr.addMark(trimmedFrom, trimmedTo, markType.create(_objectSpread(_objectSpread({}, mark.attrs), attributes)));\n              }\n            });\n          }\n        });\n      });\n    }\n    return true;\n  };\n};\nvar wrapIn = function wrapIn(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref85) {\n    var state = _ref85.state,\n      dispatch = _ref85.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    return wrapIn$1(type, attributes)(state, dispatch);\n  };\n};\nvar wrapInList = function wrapInList(typeOrName) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (_ref86) {\n    var state = _ref86.state,\n      dispatch = _ref86.dispatch;\n    var type = getNodeType(typeOrName, state.schema);\n    return wrapInList$1(type, attributes)(state, dispatch);\n  };\n};\nvar commands = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  blur: blur,\n  clearContent: clearContent,\n  clearNodes: clearNodes,\n  command: command,\n  createParagraphNear: createParagraphNear,\n  deleteCurrentNode: deleteCurrentNode,\n  deleteNode: deleteNode,\n  deleteRange: deleteRange,\n  deleteSelection: deleteSelection,\n  enter: enter,\n  exitCode: exitCode,\n  extendMarkRange: extendMarkRange,\n  first: first,\n  focus: focus,\n  forEach: forEach,\n  insertContent: insertContent,\n  insertContentAt: insertContentAt,\n  joinUp: joinUp,\n  joinDown: joinDown,\n  joinBackward: joinBackward,\n  joinForward: joinForward,\n  keyboardShortcut: keyboardShortcut,\n  lift: lift,\n  liftEmptyBlock: liftEmptyBlock,\n  liftListItem: liftListItem,\n  newlineInCode: newlineInCode,\n  resetAttributes: resetAttributes,\n  scrollIntoView: scrollIntoView,\n  selectAll: selectAll,\n  selectNodeBackward: selectNodeBackward,\n  selectNodeForward: selectNodeForward,\n  selectParentNode: selectParentNode,\n  selectTextblockEnd: selectTextblockEnd,\n  selectTextblockStart: selectTextblockStart,\n  setContent: setContent,\n  setMark: setMark,\n  setMeta: setMeta,\n  setNode: setNode,\n  setNodeSelection: setNodeSelection,\n  setTextSelection: setTextSelection,\n  sinkListItem: sinkListItem,\n  splitBlock: splitBlock,\n  splitListItem: splitListItem,\n  toggleList: toggleList,\n  toggleMark: toggleMark,\n  toggleNode: toggleNode,\n  toggleWrap: toggleWrap,\n  undoInputRule: undoInputRule,\n  unsetAllMarks: unsetAllMarks,\n  unsetMark: unsetMark,\n  updateAttributes: updateAttributes,\n  wrapIn: wrapIn,\n  wrapInList: wrapInList\n});\nvar Commands = Extension.create({\n  name: 'commands',\n  addCommands: function addCommands() {\n    return _objectSpread({}, commands);\n  }\n});\nvar Editable = Extension.create({\n  name: 'editable',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this14 = this;\n    return [new Plugin({\n      key: new PluginKey('editable'),\n      props: {\n        editable: function editable() {\n          return _this14.editor.options.editable;\n        }\n      }\n    })];\n  }\n});\nvar FocusEvents = Extension.create({\n  name: 'focusEvents',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var editor = this.editor;\n    return [new Plugin({\n      key: new PluginKey('focusEvents'),\n      props: {\n        handleDOMEvents: {\n          focus: function focus(view, event) {\n            editor.isFocused = true;\n            var transaction = editor.state.tr.setMeta('focus', {\n              event: event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          },\n          blur: function blur(view, event) {\n            editor.isFocused = false;\n            var transaction = editor.state.tr.setMeta('blur', {\n              event: event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          }\n        }\n      }\n    })];\n  }\n});\nvar Keymap = Extension.create({\n  name: 'keymap',\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this15 = this;\n    var handleBackspace = function handleBackspace() {\n      return _this15.editor.commands.first(function (_ref87) {\n        var commands = _ref87.commands;\n        return [function () {\n          return commands.undoInputRule();\n        },\n        // maybe convert first text block node to default node\n        function () {\n          return commands.command(function (_ref88) {\n            var tr = _ref88.tr;\n            var selection = tr.selection,\n              doc = tr.doc;\n            var empty = selection.empty,\n              $anchor = selection.$anchor;\n            var pos = $anchor.pos,\n              parent = $anchor.parent;\n            var isAtStart = Selection.atStart(doc).from === pos;\n            if (!empty || !isAtStart || !parent.type.isTextblock || parent.textContent.length) {\n              return false;\n            }\n            return commands.clearNodes();\n          });\n        }, function () {\n          return commands.deleteSelection();\n        }, function () {\n          return commands.joinBackward();\n        }, function () {\n          return commands.selectNodeBackward();\n        }];\n      });\n    };\n    var handleDelete = function handleDelete() {\n      return _this15.editor.commands.first(function (_ref89) {\n        var commands = _ref89.commands;\n        return [function () {\n          return commands.deleteSelection();\n        }, function () {\n          return commands.deleteCurrentNode();\n        }, function () {\n          return commands.joinForward();\n        }, function () {\n          return commands.selectNodeForward();\n        }];\n      });\n    };\n    var handleEnter = function handleEnter() {\n      return _this15.editor.commands.first(function (_ref90) {\n        var commands = _ref90.commands;\n        return [function () {\n          return commands.newlineInCode();\n        }, function () {\n          return commands.createParagraphNear();\n        }, function () {\n          return commands.liftEmptyBlock();\n        }, function () {\n          return commands.splitBlock();\n        }];\n      });\n    };\n    var baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': function ModEnter() {\n        return _this15.editor.commands.exitCode();\n      },\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': function ModA() {\n        return _this15.editor.commands.selectAll();\n      }\n    };\n    var pcKeymap = _objectSpread({}, baseKeymap);\n    var macKeymap = _objectSpread(_objectSpread({}, baseKeymap), {}, {\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': function CtrlA() {\n        return _this15.editor.commands.selectTextblockStart();\n      },\n      'Ctrl-e': function CtrlE() {\n        return _this15.editor.commands.selectTextblockEnd();\n      }\n    });\n    if (isiOS() || isMacOS()) {\n      return macKeymap;\n    }\n    return pcKeymap;\n  },\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this16 = this;\n    return [\n    // With this plugin we check if the whole document was selected and deleted.\n    // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n    // to a paragraph if necessary.\n    // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n    // with many other commands.\n    new Plugin({\n      key: new PluginKey('clearDocument'),\n      appendTransaction: function appendTransaction(transactions, oldState, newState) {\n        var docChanges = transactions.some(function (transaction) {\n          return transaction.docChanged;\n        }) && !oldState.doc.eq(newState.doc);\n        if (!docChanges) {\n          return;\n        }\n        var _oldState$selection = oldState.selection,\n          empty = _oldState$selection.empty,\n          from = _oldState$selection.from,\n          to = _oldState$selection.to;\n        var allFrom = Selection.atStart(oldState.doc).from;\n        var allEnd = Selection.atEnd(oldState.doc).to;\n        var allWasSelected = from === allFrom && to === allEnd;\n        var isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;\n        if (empty || !allWasSelected || !isEmpty) {\n          return;\n        }\n        var tr = newState.tr;\n        var state = createChainableState({\n          state: newState,\n          transaction: tr\n        });\n        var _CommandManager3 = new CommandManager({\n            editor: _this16.editor,\n            state: state\n          }),\n          commands = _CommandManager3.commands;\n        commands.clearNodes();\n        if (!tr.steps.length) {\n          return;\n        }\n        return tr;\n      }\n    })];\n  }\n});\nvar Tabindex = Extension.create({\n  name: 'tabindex',\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('tabindex'),\n      props: {\n        attributes: this.editor.isEditable ? {\n          tabindex: '0'\n        } : {}\n      }\n    })];\n  }\n});\nvar extensions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ClipboardTextSerializer: ClipboardTextSerializer,\n  Commands: Commands,\n  Editable: Editable,\n  FocusEvents: FocusEvents,\n  Keymap: Keymap,\n  Tabindex: Tabindex\n});\nvar style = \".ProseMirror {\\n  position: relative;\\n}\\n\\n.ProseMirror {\\n  word-wrap: break-word;\\n  white-space: pre-wrap;\\n  white-space: break-spaces;\\n  -webkit-font-variant-ligatures: none;\\n  font-variant-ligatures: none;\\n  font-feature-settings: \\\"liga\\\" 0; /* the above doesn't seem to work in Edge */\\n}\\n\\n.ProseMirror [contenteditable=\\\"false\\\"] {\\n  white-space: normal;\\n}\\n\\n.ProseMirror [contenteditable=\\\"false\\\"] [contenteditable=\\\"true\\\"] {\\n  white-space: pre-wrap;\\n}\\n\\n.ProseMirror pre {\\n  white-space: pre-wrap;\\n}\\n\\nimg.ProseMirror-separator {\\n  display: inline !important;\\n  border: none !important;\\n  margin: 0 !important;\\n  width: 1px !important;\\n  height: 1px !important;\\n}\\n\\n.ProseMirror-gapcursor {\\n  display: none;\\n  pointer-events: none;\\n  position: absolute;\\n  margin: 0;\\n}\\n\\n.ProseMirror-gapcursor:after {\\n  content: \\\"\\\";\\n  display: block;\\n  position: absolute;\\n  top: -2px;\\n  width: 20px;\\n  border-top: 1px solid black;\\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\\n}\\n\\n@keyframes ProseMirror-cursor-blink {\\n  to {\\n    visibility: hidden;\\n  }\\n}\\n\\n.ProseMirror-hideselection *::selection {\\n  background: transparent;\\n}\\n\\n.ProseMirror-hideselection *::-moz-selection {\\n  background: transparent;\\n}\\n\\n.ProseMirror-hideselection * {\\n  caret-color: transparent;\\n}\\n\\n.ProseMirror-focused .ProseMirror-gapcursor {\\n  display: block;\\n}\\n\\n.tippy-box[data-animation=fade][data-state=hidden] {\\n  opacity: 0\\n}\";\nfunction createStyleTag(style, nonce) {\n  var tipTapStyleTag = document.querySelector('style[data-tiptap-style]');\n  if (tipTapStyleTag !== null) {\n    return tipTapStyleTag;\n  }\n  var styleNode = document.createElement('style');\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce);\n  }\n  styleNode.setAttribute('data-tiptap-style', '');\n  styleNode.innerHTML = style;\n  document.getElementsByTagName('head')[0].appendChild(styleNode);\n  return styleNode;\n}\nvar Editor = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Editor, _EventEmitter);\n  var _super = _createSuper(Editor);\n  function Editor() {\n    var _this17;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Editor);\n    _this17 = _super.call(this);\n    _this17.isFocused = false;\n    _this17.extensionStorage = {};\n    _this17.options = {\n      element: document.createElement('div'),\n      content: '',\n      injectCSS: true,\n      injectNonce: undefined,\n      extensions: [],\n      autofocus: false,\n      editable: true,\n      editorProps: {},\n      parseOptions: {},\n      enableInputRules: true,\n      enablePasteRules: true,\n      enableCoreExtensions: true,\n      onBeforeCreate: function onBeforeCreate() {\n        return null;\n      },\n      onCreate: function onCreate() {\n        return null;\n      },\n      onUpdate: function onUpdate() {\n        return null;\n      },\n      onSelectionUpdate: function onSelectionUpdate() {\n        return null;\n      },\n      onTransaction: function onTransaction() {\n        return null;\n      },\n      onFocus: function onFocus() {\n        return null;\n      },\n      onBlur: function onBlur() {\n        return null;\n      },\n      onDestroy: function onDestroy() {\n        return null;\n      }\n    };\n    _this17.isCapturingTransaction = false;\n    _this17.capturedTransaction = null;\n    _this17.setOptions(options);\n    _this17.createExtensionManager();\n    _this17.createCommandManager();\n    _this17.createSchema();\n    _this17.on('beforeCreate', _this17.options.onBeforeCreate);\n    _this17.emit('beforeCreate', {\n      editor: _assertThisInitialized(_this17)\n    });\n    _this17.createView();\n    _this17.injectCSS();\n    _this17.on('create', _this17.options.onCreate);\n    _this17.on('update', _this17.options.onUpdate);\n    _this17.on('selectionUpdate', _this17.options.onSelectionUpdate);\n    _this17.on('transaction', _this17.options.onTransaction);\n    _this17.on('focus', _this17.options.onFocus);\n    _this17.on('blur', _this17.options.onBlur);\n    _this17.on('destroy', _this17.options.onDestroy);\n    window.setTimeout(function () {\n      if (_this17.isDestroyed) {\n        return;\n      }\n      _this17.commands.focus(_this17.options.autofocus);\n      _this17.emit('create', {\n        editor: _assertThisInitialized(_this17)\n      });\n    }, 0);\n    return _this17;\n  }\n  /**\r\n   * Returns the editor storage.\r\n   */\n  _createClass(Editor, [{\n    key: \"storage\",\n    get: function get() {\n      return this.extensionStorage;\n    }\n    /**\r\n     * An object of all registered commands.\r\n     */\n  }, {\n    key: \"commands\",\n    get: function get() {\n      return this.commandManager.commands;\n    }\n    /**\r\n     * Create a command chain to call multiple commands at once.\r\n     */\n  }, {\n    key: \"chain\",\n    value: function chain() {\n      return this.commandManager.chain();\n    }\n    /**\r\n     * Check if a command or a command chain can be executed. Without executing it.\r\n     */\n  }, {\n    key: \"can\",\n    value: function can() {\n      return this.commandManager.can();\n    }\n    /**\r\n     * Inject CSS styles.\r\n     */\n  }, {\n    key: \"injectCSS\",\n    value: function injectCSS() {\n      if (this.options.injectCSS && document) {\n        this.css = createStyleTag(style, this.options.injectNonce);\n      }\n    }\n    /**\r\n     * Update editor options.\r\n     *\r\n     * @param options A list of options\r\n     */\n  }, {\n    key: \"setOptions\",\n    value: function setOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.options = _objectSpread(_objectSpread({}, this.options), options);\n      if (!this.view || !this.state || this.isDestroyed) {\n        return;\n      }\n      if (this.options.editorProps) {\n        this.view.setProps(this.options.editorProps);\n      }\n      this.view.updateState(this.state);\n    }\n    /**\r\n     * Update editable state of the editor.\r\n     */\n  }, {\n    key: \"setEditable\",\n    value: function setEditable(editable) {\n      this.setOptions({\n        editable: editable\n      });\n      this.emit('update', {\n        editor: this,\n        transaction: this.state.tr\n      });\n    }\n    /**\r\n     * Returns whether the editor is editable.\r\n     */\n  }, {\n    key: \"isEditable\",\n    get: function get() {\n      // since plugins are applied after creating the view\n      // `editable` is always `true` for one tick.\n      // that’s why we also have to check for `options.editable`\n      return this.options.editable && this.view && this.view.editable;\n    }\n    /**\r\n     * Returns the editor state.\r\n     */\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.view.state;\n    }\n    /**\r\n     * Register a ProseMirror plugin.\r\n     *\r\n     * @param plugin A ProseMirror plugin\r\n     * @param handlePlugins Control how to merge the plugin into the existing plugins.\r\n     */\n  }, {\n    key: \"registerPlugin\",\n    value: function registerPlugin(plugin, handlePlugins) {\n      var plugins = isFunction(handlePlugins) ? handlePlugins(plugin, _toConsumableArray(this.state.plugins)) : [].concat(_toConsumableArray(this.state.plugins), [plugin]);\n      var state = this.state.reconfigure({\n        plugins: plugins\n      });\n      this.view.updateState(state);\n    }\n    /**\r\n     * Unregister a ProseMirror plugin.\r\n     *\r\n     * @param nameOrPluginKey The plugins name\r\n     */\n  }, {\n    key: \"unregisterPlugin\",\n    value: function unregisterPlugin(nameOrPluginKey) {\n      if (this.isDestroyed) {\n        return;\n      }\n      var name = typeof nameOrPluginKey === 'string' ? \"\".concat(nameOrPluginKey, \"$\") // @ts-ignore\n      : nameOrPluginKey.key;\n      var state = this.state.reconfigure({\n        // @ts-ignore\n        plugins: this.state.plugins.filter(function (plugin) {\n          return !plugin.key.startsWith(name);\n        })\n      });\n      this.view.updateState(state);\n    }\n    /**\r\n     * Creates an extension manager.\r\n     */\n  }, {\n    key: \"createExtensionManager\",\n    value: function createExtensionManager() {\n      var coreExtensions = this.options.enableCoreExtensions ? Object.values(extensions) : [];\n      var allExtensions = [].concat(_toConsumableArray(coreExtensions), _toConsumableArray(this.options.extensions)).filter(function (extension) {\n        return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n      });\n      this.extensionManager = new ExtensionManager(allExtensions, this);\n    }\n    /**\r\n     * Creates an command manager.\r\n     */\n  }, {\n    key: \"createCommandManager\",\n    value: function createCommandManager() {\n      this.commandManager = new CommandManager({\n        editor: this\n      });\n    }\n    /**\r\n     * Creates a ProseMirror schema.\r\n     */\n  }, {\n    key: \"createSchema\",\n    value: function createSchema() {\n      this.schema = this.extensionManager.schema;\n    }\n    /**\r\n     * Creates a ProseMirror view.\r\n     */\n  }, {\n    key: \"createView\",\n    value: function createView() {\n      var doc = createDocument(this.options.content, this.schema, this.options.parseOptions);\n      var selection = resolveFocusPosition(doc, this.options.autofocus);\n      this.view = new EditorView(this.options.element, _objectSpread(_objectSpread({}, this.options.editorProps), {}, {\n        dispatchTransaction: this.dispatchTransaction.bind(this),\n        state: EditorState.create({\n          doc: doc,\n          selection: selection || undefined\n        })\n      }));\n      // `editor.view` is not yet available at this time.\n      // Therefore we will add all plugins and node views directly afterwards.\n      var newState = this.state.reconfigure({\n        plugins: this.extensionManager.plugins\n      });\n      this.view.updateState(newState);\n      this.createNodeViews();\n      // Let’s store the editor instance in the DOM element.\n      // So we’ll have access to it for tests.\n      var dom = this.view.dom;\n      dom.editor = this;\n    }\n    /**\r\n     * Creates all node views.\r\n     */\n  }, {\n    key: \"createNodeViews\",\n    value: function createNodeViews() {\n      this.view.setProps({\n        nodeViews: this.extensionManager.nodeViews\n      });\n    }\n  }, {\n    key: \"captureTransaction\",\n    value: function captureTransaction(fn) {\n      this.isCapturingTransaction = true;\n      fn();\n      this.isCapturingTransaction = false;\n      var tr = this.capturedTransaction;\n      this.capturedTransaction = null;\n      return tr;\n    }\n    /**\r\n     * The callback over which to send transactions (state updates) produced by the view.\r\n     *\r\n     * @param transaction An editor state transaction\r\n     */\n  }, {\n    key: \"dispatchTransaction\",\n    value: function dispatchTransaction(transaction) {\n      var _this18 = this;\n      if (this.isCapturingTransaction) {\n        if (!this.capturedTransaction) {\n          this.capturedTransaction = transaction;\n          return;\n        }\n        transaction.steps.forEach(function (step) {\n          var _a;\n          return (_a = _this18.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);\n        });\n        return;\n      }\n      var state = this.state.apply(transaction);\n      var selectionHasChanged = !this.state.selection.eq(state.selection);\n      this.view.updateState(state);\n      this.emit('transaction', {\n        editor: this,\n        transaction: transaction\n      });\n      if (selectionHasChanged) {\n        this.emit('selectionUpdate', {\n          editor: this,\n          transaction: transaction\n        });\n      }\n      var focus = transaction.getMeta('focus');\n      var blur = transaction.getMeta('blur');\n      if (focus) {\n        this.emit('focus', {\n          editor: this,\n          event: focus.event,\n          transaction: transaction\n        });\n      }\n      if (blur) {\n        this.emit('blur', {\n          editor: this,\n          event: blur.event,\n          transaction: transaction\n        });\n      }\n      if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n        return;\n      }\n      this.emit('update', {\n        editor: this,\n        transaction: transaction\n      });\n    }\n    /**\r\n     * Get attributes of the currently selected node or mark.\r\n     */\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes(nameOrType) {\n      return _getAttributes(this.state, nameOrType);\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive(nameOrAttributes, attributesOrUndefined) {\n      var name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;\n      var attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;\n      return _isActive(this.state, name, attributes);\n    }\n    /**\r\n     * Get the document as JSON.\r\n     */\n  }, {\n    key: \"getJSON\",\n    value: function getJSON() {\n      return this.state.doc.toJSON();\n    }\n    /**\r\n     * Get the document as HTML.\r\n     */\n  }, {\n    key: \"getHTML\",\n    value: function getHTML() {\n      return getHTMLFromFragment(this.state.doc.content, this.schema);\n    }\n    /**\r\n     * Get the document as text.\r\n     */\n  }, {\n    key: \"getText\",\n    value: function getText(options) {\n      var _ref91 = options || {},\n        _ref91$blockSeparator = _ref91.blockSeparator,\n        blockSeparator = _ref91$blockSeparator === void 0 ? '\\n\\n' : _ref91$blockSeparator,\n        _ref91$textSerializer = _ref91.textSerializers,\n        textSerializers = _ref91$textSerializer === void 0 ? {} : _ref91$textSerializer;\n      return _getText(this.state.doc, {\n        blockSeparator: blockSeparator,\n        textSerializers: _objectSpread(_objectSpread({}, textSerializers), getTextSerializersFromSchema(this.schema))\n      });\n    }\n    /**\r\n     * Check if there is no content.\r\n     */\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return isNodeEmpty(this.state.doc);\n    }\n    /**\r\n     * Get the number of characters for the current document.\r\n     *\r\n     * @deprecated\r\n     */\n  }, {\n    key: \"getCharacterCount\",\n    value: function getCharacterCount() {\n      console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n      return this.state.doc.content.size - 2;\n    }\n    /**\r\n     * Destroy the editor.\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.emit('destroy');\n      if (this.view) {\n        this.view.destroy();\n      }\n      this.removeAllListeners();\n    }\n    /**\r\n     * Check if the editor is already destroyed.\r\n     */\n  }, {\n    key: \"isDestroyed\",\n    get: function get() {\n      var _a;\n      // @ts-ignore\n      return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n    }\n  }]);\n  return Editor;\n}(EventEmitter);\n/**\r\n * Build an input rule that adds a mark when the\r\n * matched text is typed into it.\r\n */\nfunction markInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref92) {\n      var state = _ref92.state,\n        range = _ref92.range,\n        match = _ref92.match;\n      var attributes = callOrReturn(config.getAttributes, undefined, match);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      var tr = state.tr;\n      var captureGroup = match[match.length - 1];\n      var fullMatch = match[0];\n      var markEnd = range.to;\n      if (captureGroup) {\n        var startSpaces = fullMatch.search(/\\S/);\n        var textStart = range.from + fullMatch.indexOf(captureGroup);\n        var textEnd = textStart + captureGroup.length;\n        var excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(function (item) {\n          // @ts-ignore\n          var excluded = item.mark.type.excluded;\n          return excluded.find(function (type) {\n            return type === config.type && type !== item.mark.type;\n          });\n        }).filter(function (item) {\n          return item.to > textStart;\n        });\n        if (excludedMarks.length) {\n          return null;\n        }\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to);\n        }\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart);\n        }\n        markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n\n/**\r\n * Build an input rule that adds a node when the\r\n * matched text is typed into it.\r\n */\nfunction nodeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref93) {\n      var state = _ref93.state,\n        range = _ref93.range,\n        match = _ref93.match;\n      var attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      var tr = state.tr;\n      var start = range.from;\n      var end = range.to;\n      if (match[1]) {\n        var offset = match[0].lastIndexOf(match[1]);\n        var matchStart = start + offset;\n        if (matchStart > end) {\n          matchStart = end;\n        } else {\n          end = matchStart + match[1].length;\n        }\n        // insert last typed character\n        var lastChar = match[0][match[0].length - 1];\n        tr.insertText(lastChar, start + match[0].length - 1);\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, config.type.create(attributes));\n      } else if (match[0]) {\n        tr.replaceWith(start, end, config.type.create(attributes));\n      }\n    }\n  });\n}\n\n/**\r\n * Build an input rule that changes the type of a textblock when the\r\n * matched text is typed into it. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n */\nfunction textblockTypeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref94) {\n      var state = _ref94.state,\n        range = _ref94.range,\n        match = _ref94.match;\n      var $start = state.doc.resolve(range.from);\n      var attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null;\n      }\n      state.tr.delete(range.from, range.to).setBlockType(range.from, range.from, config.type, attributes);\n    }\n  });\n}\n\n/**\r\n * Build an input rule that replaces text when the\r\n * matched text is typed into it.\r\n */\nfunction textInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref95) {\n      var state = _ref95.state,\n        range = _ref95.range,\n        match = _ref95.match;\n      var insert = config.replace;\n      var start = range.from;\n      var end = range.to;\n      if (match[1]) {\n        var offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        var cutOff = start - end;\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\n\n/**\r\n * Build an input rule for automatically wrapping a textblock when a\r\n * given string is typed. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n *\r\n * `type` is the type of node to wrap in.\r\n *\r\n * By default, if there’s a node with the same type above the newly\r\n * wrapped node, the rule will try to join those\r\n * two nodes. You can pass a join predicate, which takes a regular\r\n * expression match and the node before the wrapped node, and can\r\n * return a boolean to indicate whether a join should happen.\r\n */\nfunction wrappingInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: function handler(_ref96) {\n      var state = _ref96.state,\n        range = _ref96.range,\n        match = _ref96.match;\n      var attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      var tr = state.tr.delete(range.from, range.to);\n      var $start = tr.doc.resolve(range.from);\n      var blockRange = $start.blockRange();\n      var wrapping = blockRange && findWrapping(blockRange, config.type, attributes);\n      if (!wrapping) {\n        return null;\n      }\n      tr.wrap(blockRange, wrapping);\n      var before = tr.doc.resolve(range.from - 1).nodeBefore;\n      if (before && before.type === config.type && canJoin(tr.doc, range.from - 1) && (!config.joinPredicate || config.joinPredicate(match, before))) {\n        tr.join(range.from - 1);\n      }\n    }\n  });\n}\nvar Mark = /*#__PURE__*/function () {\n  function Mark() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Mark);\n    this.type = 'mark';\n    this.name = 'mark';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = _objectSpread(_objectSpread({}, this.config), config);\n    this.name = this.config.name;\n    if (config.defaultOptions) {\n      console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(this.name, \"\\\".\"));\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  _createClass(Mark, [{\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // return a new instance so we can use the same extension\n      // with different calls of `configure`\n      var extension = this.extend();\n      extension.options = mergeDeep(this.options, options);\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      var extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var extension = new Mark(extendedConfig);\n      extension.parent = this;\n      this.child = extension;\n      extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n      if (extendedConfig.defaultOptions) {\n        console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(extension.name, \"\\\".\"));\n      }\n      extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n        name: extension.name\n      }));\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Mark(config);\n    }\n  }, {\n    key: \"handleExit\",\n    value: function handleExit(_ref97) {\n      var editor = _ref97.editor,\n        mark = _ref97.mark;\n      var tr = editor.state.tr;\n      var currentPos = editor.state.selection.$from;\n      var isAtEnd = currentPos.pos === currentPos.end();\n      if (isAtEnd) {\n        var currentMarks = currentPos.marks();\n        var isInMark = !!currentMarks.find(function (m) {\n          return (m === null || m === void 0 ? void 0 : m.type.name) === mark.name;\n        });\n        if (!isInMark) {\n          return false;\n        }\n        var removeMark = currentMarks.find(function (m) {\n          return (m === null || m === void 0 ? void 0 : m.type.name) === mark.name;\n        });\n        if (removeMark) {\n          tr.removeStoredMark(removeMark);\n        }\n        tr.insertText(' ', currentPos.pos);\n        editor.view.dispatch(tr);\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return Mark;\n}();\nvar Node = /*#__PURE__*/function () {\n  function Node() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Node);\n    this.type = 'node';\n    this.name = 'node';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = _objectSpread(_objectSpread({}, this.config), config);\n    this.name = this.config.name;\n    if (config.defaultOptions) {\n      console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(this.name, \"\\\".\"));\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  _createClass(Node, [{\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // return a new instance so we can use the same extension\n      // with different calls of `configure`\n      var extension = this.extend();\n      extension.options = mergeDeep(this.options, options);\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      var extendedConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var extension = new Node(extendedConfig);\n      extension.parent = this;\n      this.child = extension;\n      extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n      if (extendedConfig.defaultOptions) {\n        console.warn(\"[tiptap warn]: BREAKING CHANGE: \\\"defaultOptions\\\" is deprecated. Please use \\\"addOptions\\\" instead. Found in extension: \\\"\".concat(extension.name, \"\\\".\"));\n      }\n      extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n        name: extension.name\n      }));\n      extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options\n      }));\n      return extension;\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Node(config);\n    }\n  }]);\n  return Node;\n}();\nvar NodeView = /*#__PURE__*/function () {\n  function NodeView(component, props, options) {\n    _classCallCheck(this, NodeView);\n    this.isDragging = false;\n    this.component = component;\n    this.editor = props.editor;\n    this.options = _objectSpread({\n      stopEvent: null,\n      ignoreMutation: null\n    }, options);\n    this.extension = props.extension;\n    this.node = props.node;\n    this.decorations = props.decorations;\n    this.getPos = props.getPos;\n    this.mount();\n  }\n  _createClass(NodeView, [{\n    key: \"mount\",\n    value: function mount() {\n      // eslint-disable-next-line\n      return;\n    }\n  }, {\n    key: \"dom\",\n    get: function get() {\n      return this.editor.view.dom;\n    }\n  }, {\n    key: \"contentDOM\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(event) {\n      var _a, _b, _c, _d, _e, _f, _g;\n      var view = this.editor.view;\n      var target = event.target;\n      // get the drag handle element\n      // `closest` is not available for text nodes so we may have to use its parent\n      var dragHandle = target.nodeType === 3 ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]') : target.closest('[data-drag-handle]');\n      if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n        return;\n      }\n      var x = 0;\n      var y = 0;\n      // calculate offset for drag element if we use a different drag handle element\n      if (this.dom !== dragHandle) {\n        var domBox = this.dom.getBoundingClientRect();\n        var handleBox = dragHandle.getBoundingClientRect();\n        // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n        var offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\n        var offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\n        x = handleBox.x - domBox.x + offsetX;\n        y = handleBox.y - domBox.y + offsetY;\n      }\n      (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);\n      // we need to tell ProseMirror that we want to move the whole node\n      // so we create a NodeSelection\n      var selection = NodeSelection.create(view.state.doc, this.getPos());\n      var transaction = view.state.tr.setSelection(selection);\n      view.dispatch(transaction);\n    }\n  }, {\n    key: \"stopEvent\",\n    value: function stopEvent(event) {\n      var _this19 = this;\n      var _a;\n      if (!this.dom) {\n        return false;\n      }\n      if (typeof this.options.stopEvent === 'function') {\n        return this.options.stopEvent({\n          event: event\n        });\n      }\n      var target = event.target;\n      var isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\n      // any event from child nodes should be handled by ProseMirror\n      if (!isInElement) {\n        return false;\n      }\n      var isDropEvent = event.type === 'drop';\n      var isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable;\n      // any input event within node views should be ignored by ProseMirror\n      if (isInput && !isDropEvent) {\n        return true;\n      }\n      var isEditable = this.editor.isEditable;\n      var isDragging = this.isDragging;\n      var isDraggable = !!this.node.type.spec.draggable;\n      var isSelectable = NodeSelection.isSelectable(this.node);\n      var isCopyEvent = event.type === 'copy';\n      var isPasteEvent = event.type === 'paste';\n      var isCutEvent = event.type === 'cut';\n      var isClickEvent = event.type === 'mousedown';\n      var isDragEvent = event.type.startsWith('drag');\n      // ProseMirror tries to drag selectable nodes\n      // even if `draggable` is set to `false`\n      // this fix prevents that\n      if (!isDraggable && isSelectable && isDragEvent) {\n        event.preventDefault();\n      }\n      if (isDraggable && isDragEvent && !isDragging) {\n        event.preventDefault();\n        return false;\n      }\n      // we have to store that dragging started\n      if (isDraggable && isEditable && !isDragging && isClickEvent) {\n        var dragHandle = target.closest('[data-drag-handle]');\n        var isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n        if (isValidDragHandle) {\n          this.isDragging = true;\n          document.addEventListener('dragend', function () {\n            _this19.isDragging = false;\n          }, {\n            once: true\n          });\n          document.addEventListener('mouseup', function () {\n            _this19.isDragging = false;\n          }, {\n            once: true\n          });\n        }\n      }\n      // these events are handled by prosemirror\n      if (isDragging || isDropEvent || isCopyEvent || isPasteEvent || isCutEvent || isClickEvent && isSelectable) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"ignoreMutation\",\n    value: function ignoreMutation(mutation) {\n      if (!this.dom || !this.contentDOM) {\n        return true;\n      }\n      if (typeof this.options.ignoreMutation === 'function') {\n        return this.options.ignoreMutation({\n          mutation: mutation\n        });\n      }\n      // a leaf/atom node is like a black box for ProseMirror\n      // and should be fully handled by the node view\n      if (this.node.isLeaf || this.node.isAtom) {\n        return true;\n      }\n      // ProseMirror should handle any selections\n      if (mutation.type === 'selection') {\n        return false;\n      }\n      // try to prevent a bug on iOS that will break node views on enter\n      // this is because ProseMirror can’t preventDispatch on enter\n      // this will lead to a re-render of the node view on enter\n      // see: https://github.com/ueberdosis/tiptap/issues/1214\n      if (this.dom.contains(mutation.target) && mutation.type === 'childList' && isiOS() && this.editor.isFocused) {\n        var changedNodes = [].concat(_toConsumableArray(Array.from(mutation.addedNodes)), _toConsumableArray(Array.from(mutation.removedNodes)));\n        // we’ll check if every changed node is contentEditable\n        // to make sure it’s probably mutated by ProseMirror\n        if (changedNodes.every(function (node) {\n          return node.isContentEditable;\n        })) {\n          return false;\n        }\n      }\n      // we will allow mutation contentDOM with attributes\n      // so we can for example adding classes within our node view\n      if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n        return true;\n      }\n      // ProseMirror should handle any changes within contentDOM\n      if (this.contentDOM.contains(mutation.target)) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"updateAttributes\",\n    value: function updateAttributes(attributes) {\n      var _this20 = this;\n      this.editor.commands.command(function (_ref98) {\n        var tr = _ref98.tr;\n        var pos = _this20.getPos();\n        tr.setNodeMarkup(pos, undefined, _objectSpread(_objectSpread({}, _this20.node.attrs), attributes));\n        return true;\n      });\n    }\n  }, {\n    key: \"deleteNode\",\n    value: function deleteNode() {\n      var from = this.getPos();\n      var to = from + this.node.nodeSize;\n      this.editor.commands.deleteRange({\n        from: from,\n        to: to\n      });\n    }\n  }]);\n  return NodeView;\n}();\n/**\r\n * Build an paste rule that adds a mark when the\r\n * matched text is pasted into it.\r\n */\nfunction markPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: function handler(_ref99) {\n      var state = _ref99.state,\n        range = _ref99.range,\n        match = _ref99.match;\n      var attributes = callOrReturn(config.getAttributes, undefined, match);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      var tr = state.tr;\n      var captureGroup = match[match.length - 1];\n      var fullMatch = match[0];\n      var markEnd = range.to;\n      if (captureGroup) {\n        var startSpaces = fullMatch.search(/\\S/);\n        var textStart = range.from + fullMatch.indexOf(captureGroup);\n        var textEnd = textStart + captureGroup.length;\n        var excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(function (item) {\n          // @ts-ignore\n          var excluded = item.mark.type.excluded;\n          return excluded.find(function (type) {\n            return type === config.type && type !== item.mark.type;\n          });\n        }).filter(function (item) {\n          return item.to > textStart;\n        });\n        if (excludedMarks.length) {\n          return null;\n        }\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to);\n        }\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart);\n        }\n        markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n\n// source: https://stackoverflow.com/a/6969486\nfunction escapeForRegEx(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\n/**\r\n * Build an paste rule that adds a node when the\r\n * matched text is pasted into it.\r\n */\nfunction nodePasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: function handler(_ref100) {\n      var match = _ref100.match,\n        chain = _ref100.chain,\n        range = _ref100.range;\n      var attributes = callOrReturn(config.getAttributes, undefined, match);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      if (match.input) {\n        chain().deleteRange(range).insertContentAt(range.from, {\n          type: config.type.name,\n          attrs: attributes\n        });\n      }\n    }\n  });\n}\n\n/**\r\n * Build an paste rule that replaces text when the\r\n * matched text is pasted into it.\r\n */\nfunction textPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: function handler(_ref101) {\n      var state = _ref101.state,\n        range = _ref101.range,\n        match = _ref101.match;\n      var insert = config.replace;\n      var start = range.from;\n      var end = range.to;\n      if (match[1]) {\n        var offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        var cutOff = start - end;\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\nvar Tracker = /*#__PURE__*/function () {\n  function Tracker(transaction) {\n    _classCallCheck(this, Tracker);\n    this.transaction = transaction;\n    this.currentStep = this.transaction.steps.length;\n  }\n  _createClass(Tracker, [{\n    key: \"map\",\n    value: function map(position) {\n      var deleted = false;\n      var mappedPosition = this.transaction.steps.slice(this.currentStep).reduce(function (newPosition, step) {\n        var mapResult = step.getMap().mapResult(newPosition);\n        if (mapResult.deleted) {\n          deleted = true;\n        }\n        return mapResult.pos;\n      }, position);\n      return {\n        position: mappedPosition,\n        deleted: deleted\n      };\n    }\n  }]);\n  return Tracker;\n}();\nexport { CommandManager, Editor, Extension, InputRule, Mark, Node, NodeView, PasteRule, Tracker, callOrReturn, combineTransactionSteps, createStyleTag, defaultBlockAt, deleteProps, elementFromString, escapeForRegEx, extensions, findChildren, findChildrenInRange, findDuplicates, findParentNode, findParentNodeClosestToPos, fromString, generateHTML, generateJSON, generateText, _getAttributes as getAttributes, getChangedRanges, getDebugJSON, getExtensionField, getHTMLFromFragment, getMarkAttributes, getMarkRange, getMarkType, getMarksBetween, getNodeAttributes, getNodeType, getSchema, _getText as getText, getTextBetween, getTextContentFromNodes, getTextSerializersFromSchema, inputRulesPlugin, _isActive as isActive, isEmptyObject, isFunction, isList, isMacOS, isMarkActive, isNodeActive, isNodeEmpty, isNodeSelection, isNumber, isPlainObject, isRegExp, isString, isTextSelection, isiOS, markInputRule, markPasteRule, mergeAttributes, mergeDeep, minMax, nodeInputRule, nodePasteRule, objectIncludes, pasteRulesPlugin, posToDOMRect, removeDuplicates, textInputRule, textPasteRule, textblockTypeInputRule, wrappingInputRule };","map":{"version":3,"sources":["../src/helpers/createChainableState.ts","../src/CommandManager.ts","../src/EventEmitter.ts","../src/helpers/getExtensionField.ts","../src/helpers/splitExtensions.ts","../src/helpers/getAttributesFromExtensions.ts","../src/helpers/getNodeType.ts","../src/utilities/mergeAttributes.ts","../src/helpers/getRenderedAttributes.ts","../src/utilities/isFunction.ts","../src/utilities/callOrReturn.ts","../src/utilities/isEmptyObject.ts","../src/utilities/fromString.ts","../src/helpers/injectExtensionAttributesToParseRule.ts","../src/helpers/getSchemaByResolvedExtensions.ts","../src/helpers/getSchemaTypeByName.ts","../src/helpers/isExtensionRulesEnabled.ts","../src/helpers/getTextContentFromNodes.ts","../src/utilities/isRegExp.ts","../src/InputRule.ts","../src/utilities/isNumber.ts","../src/PasteRule.ts","../src/utilities/findDuplicates.ts","../src/ExtensionManager.ts","../src/utilities/isPlainObject.ts","../src/utilities/mergeDeep.ts","../src/Extension.ts","../src/helpers/getTextBetween.ts","../src/helpers/getTextSerializersFromSchema.ts","../src/extensions/clipboardTextSerializer.ts","../src/commands/blur.ts","../src/commands/clearContent.ts","../src/commands/clearNodes.ts","../src/commands/command.ts","../src/commands/createParagraphNear.ts","../src/commands/deleteCurrentNode.ts","../src/commands/deleteNode.ts","../src/commands/deleteRange.ts","../src/commands/deleteSelection.ts","../src/commands/enter.ts","../src/commands/exitCode.ts","../src/utilities/objectIncludes.ts","../src/helpers/getMarkRange.ts","../src/helpers/getMarkType.ts","../src/commands/extendMarkRange.ts","../src/commands/first.ts","../src/helpers/isTextSelection.ts","../src/utilities/minMax.ts","../src/helpers/resolveFocusPosition.ts","../src/utilities/isiOS.ts","../src/commands/focus.ts","../src/commands/forEach.ts","../src/commands/insertContent.ts","../src/utilities/elementFromString.ts","../src/helpers/createNodeFromContent.ts","../src/helpers/selectionToInsertionEnd.ts","../src/commands/insertContentAt.ts","../src/commands/join.ts","../src/utilities/isMacOS.ts","../src/commands/keyboardShortcut.ts","../src/helpers/isNodeActive.ts","../src/commands/lift.ts","../src/commands/liftEmptyBlock.ts","../src/commands/liftListItem.ts","../src/commands/newlineInCode.ts","../src/helpers/getSchemaTypeNameByName.ts","../src/utilities/deleteProps.ts","../src/commands/resetAttributes.ts","../src/commands/scrollIntoView.ts","../src/commands/selectAll.ts","../src/commands/selectNodeBackward.ts","../src/commands/selectNodeForward.ts","../src/commands/selectParentNode.ts","../src/commands/selectTextblockEnd.ts","../src/commands/selectTextblockStart.ts","../src/helpers/createDocument.ts","../src/commands/setContent.ts","../src/helpers/combineTransactionSteps.ts","../src/helpers/defaultBlockAt.ts","../src/helpers/findChildren.ts","../src/helpers/findChildrenInRange.ts","../src/helpers/findParentNodeClosestToPos.ts","../src/helpers/findParentNode.ts","../src/helpers/getHTMLFromFragment.ts","../src/helpers/getSchema.ts","../src/helpers/generateHTML.ts","../src/helpers/generateJSON.ts","../src/helpers/getText.ts","../src/helpers/generateText.ts","../src/helpers/getMarkAttributes.ts","../src/helpers/getNodeAttributes.ts","../src/helpers/getAttributes.ts","../src/utilities/removeDuplicates.ts","../src/helpers/getChangedRanges.ts","../src/helpers/getDebugJSON.ts","../src/helpers/getMarksBetween.ts","../src/helpers/isMarkActive.ts","../src/helpers/isActive.ts","../src/helpers/isList.ts","../src/helpers/isNodeEmpty.ts","../src/helpers/isNodeSelection.ts","../src/helpers/posToDOMRect.ts","../src/commands/setMark.ts","../src/commands/setMeta.ts","../src/commands/setNode.ts","../src/commands/setNodeSelection.ts","../src/commands/setTextSelection.ts","../src/commands/sinkListItem.ts","../src/helpers/getSplittedAttributes.ts","../src/commands/splitBlock.ts","../src/commands/splitListItem.ts","../src/commands/toggleList.ts","../src/commands/toggleMark.ts","../src/commands/toggleNode.ts","../src/commands/toggleWrap.ts","../src/commands/undoInputRule.ts","../src/commands/unsetAllMarks.ts","../src/commands/unsetMark.ts","../src/commands/updateAttributes.ts","../src/commands/wrapIn.ts","../src/commands/wrapInList.ts","../src/extensions/commands.ts","../src/extensions/editable.ts","../src/extensions/focusEvents.ts","../src/extensions/keymap.ts","../src/extensions/tabindex.ts","../src/style.ts","../src/utilities/createStyleTag.ts","../src/Editor.ts","../src/inputRules/markInputRule.ts","../src/inputRules/nodeInputRule.ts","../src/inputRules/textblockTypeInputRule.ts","../src/inputRules/textInputRule.ts","../src/inputRules/wrappingInputRule.ts","../src/Mark.ts","../src/Node.ts","../src/NodeView.ts","../src/pasteRules/markPasteRule.ts","../src/utilities/escapeForRegEx.ts","../src/utilities/isString.ts","../src/pasteRules/nodePasteRule.ts","../src/pasteRules/textPasteRule.ts","../src/Tracker.ts"],"names":["run","originalCreateParagraphNear","originalDeleteSelection","originalExitCode","originalJoinUp","originalJoinDown","originalJoinBackward","originalJoinForward","originalLift","originalLiftEmptyBlock","originalLiftListItem","originalNewlineInCode","originalSelectNodeBackward","originalSelectNodeForward","originalSelectParentNode","originalSelectTextblockEnd","originalSelectTextblockStart","Node","originalSinkListItem","originalWrapIn","originalWrapInList"],"mappings":"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","sourcesContent":["import { EditorState, Transaction } from 'prosemirror-state'\n\nexport function createChainableState(config: {\n  transaction: Transaction,\n  state: EditorState,\n}): EditorState {\n  const { state, transaction } = config\n  let { selection } = transaction\n  let { doc } = transaction\n  let { storedMarks } = transaction\n\n  return {\n    ...state,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    filterTransaction: state.filterTransaction,\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks\n    },\n    get selection() {\n      return selection\n    },\n    get doc() {\n      return doc\n    },\n    get tr() {\n      selection = transaction.selection\n      doc = transaction.doc\n      storedMarks = transaction.storedMarks\n\n      return transaction\n    },\n  }\n}\n","import { EditorState, Transaction } from 'prosemirror-state'\n\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport {\n  AnyCommands,\n  CanCommands,\n  ChainedCommands,\n  CommandProps,\n  SingleCommands,\n} from './types'\n\nexport class CommandManager {\n\n  editor: Editor\n\n  rawCommands: AnyCommands\n\n  customState?: EditorState\n\n  constructor(props: {\n    editor: Editor,\n    state?: EditorState,\n  }) {\n    this.editor = props.editor\n    this.rawCommands = this.editor.extensionManager.commands\n    this.customState = props.state\n  }\n\n  get hasCustomState(): boolean {\n    return !!this.customState\n  }\n\n  get state(): EditorState {\n    return this.customState || this.editor.state\n  }\n\n  get commands(): SingleCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const { tr } = state\n    const props = this.buildProps(tr)\n\n    return Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        const method = (...args: any[]) => {\n          const callback = command(...args)(props)\n\n          if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n            view.dispatch(tr)\n          }\n\n          return callback\n        }\n\n        return [name, method]\n      })) as unknown as SingleCommands\n  }\n\n  get chain(): () => ChainedCommands {\n    return () => this.createChain()\n  }\n\n  get can(): () => CanCommands {\n    return () => this.createCan()\n  }\n\n  public createChain(startTr?: Transaction, shouldDispatch = true): ChainedCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const callbacks: boolean[] = []\n    const hasStartTransaction = !!startTr\n    const tr = startTr || state.tr\n\n    const run = () => {\n      if (\n        !hasStartTransaction\n        && shouldDispatch\n        && !tr.getMeta('preventDispatch')\n        && !this.hasCustomState\n      ) {\n        view.dispatch(tr)\n      }\n\n      return callbacks.every(callback => callback === true)\n    }\n\n    const chain = {\n      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n        const chainedCommand = (...args: never[]) => {\n          const props = this.buildProps(tr, shouldDispatch)\n          const callback = command(...args)(props)\n\n          callbacks.push(callback)\n\n          return chain\n        }\n\n        return [name, chainedCommand]\n      })),\n      run,\n    } as unknown as ChainedCommands\n\n    return chain\n  }\n\n  public createCan(startTr?: Transaction): CanCommands {\n    const { rawCommands, state } = this\n    const dispatch = false\n    const tr = startTr || state.tr\n    const props = this.buildProps(tr, dispatch)\n    const formattedCommands = Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        return [name, (...args: never[]) => command(...args)({ ...props, dispatch: undefined })]\n      })) as unknown as SingleCommands\n\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch),\n    } as CanCommands\n  }\n\n  public buildProps(tr: Transaction, shouldDispatch = true): CommandProps {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n\n    if (state.storedMarks) {\n      tr.setStoredMarks(state.storedMarks)\n    }\n\n    const props: CommandProps = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr,\n      }),\n      dispatch: shouldDispatch\n        ? () => undefined\n        : undefined,\n      chain: () => this.createChain(tr),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(Object\n          .entries(rawCommands)\n          .map(([name, command]) => {\n            return [name, (...args: never[]) => command(...args)(props)]\n          })) as unknown as SingleCommands\n      },\n    }\n\n    return props\n  }\n\n}\n","type StringKeyOf<T> = Extract<keyof T, string>\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]]\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = (...props: CallbackType<T, EventName>) => any\n\nexport class EventEmitter<T extends Record<string, any>> {\n\n  private callbacks: { [key: string]: Function[] } = {}\n\n  public on<EventName extends StringKeyOf<T>>(event: EventName, fn: CallbackFunction<T, EventName>): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = []\n    }\n\n    this.callbacks[event].push(fn)\n\n    return this\n  }\n\n  protected emit<EventName extends StringKeyOf<T>>(event: EventName, ...args: CallbackType<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args))\n    }\n\n    return this\n  }\n\n  public off<EventName extends StringKeyOf<T>>(event: EventName, fn?: CallbackFunction<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn)\n      } else {\n        delete this.callbacks[event]\n      }\n    }\n\n    return this\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {}\n  }\n}\n","import { AnyExtension, MaybeThisParameterType, RemoveThis } from '../types'\n\nexport function getExtensionField<T = any>(\n  extension: AnyExtension,\n  field: string,\n  context?: Omit<MaybeThisParameterType<T>, 'parent'>,\n): RemoveThis<T> {\n\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context)\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent\n        ? getExtensionField(extension.parent, field, context)\n        : null,\n    })\n\n    return value\n  }\n\n  return extension.config[field]\n}\n","import { Extension } from '../Extension'\nimport { Mark } from '../Mark'\nimport { Node } from '../Node'\nimport { Extensions } from '../types'\n\nexport function splitExtensions(extensions: Extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension') as Extension[]\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node') as Node[]\n  const markExtensions = extensions.filter(extension => extension.type === 'mark') as Mark[]\n\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions,\n  }\n}\n","import { MarkConfig, NodeConfig } from '..'\nimport {\n  AnyConfig,\n  Attribute,\n  Attributes,\n  ExtensionAttribute,\n  Extensions,\n  GlobalAttributes,\n} from '../types'\nimport { getExtensionField } from './getExtensionField'\nimport { splitExtensions } from './splitExtensions'\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nexport function getAttributesFromExtensions(extensions: Extensions): ExtensionAttribute[] {\n  const extensionAttributes: ExtensionAttribute[] = []\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions]\n  const defaultAttribute: Required<Attribute> = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false,\n  }\n\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addGlobalAttributes = getExtensionField<AnyConfig['addGlobalAttributes']>(\n      extension,\n      'addGlobalAttributes',\n      context,\n    )\n\n    if (!addGlobalAttributes) {\n      return\n    }\n\n    // TODO: remove `as GlobalAttributes`\n    const globalAttributes = addGlobalAttributes() as GlobalAttributes\n\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object\n          .entries(globalAttribute.attributes)\n          .forEach(([name, attribute]) => {\n            extensionAttributes.push({\n              type,\n              name,\n              attribute: {\n                ...defaultAttribute,\n                ...attribute,\n              },\n            })\n          })\n      })\n    })\n  })\n\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addAttributes = getExtensionField<NodeConfig['addAttributes'] | MarkConfig['addAttributes']>(\n      extension,\n      'addAttributes',\n      context,\n    )\n\n    if (!addAttributes) {\n      return\n    }\n\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes() as Attributes\n\n    Object\n      .entries(attributes)\n      .forEach(([name, attribute]) => {\n        const mergedAttr = {\n          ...defaultAttribute,\n          ...attribute,\n        }\n\n        if (attribute?.isRequired && attribute?.default === undefined) {\n          delete mergedAttr.default\n        }\n\n        extensionAttributes.push({\n          type: extension.name,\n          name,\n          attribute: mergedAttr,\n        })\n      })\n  })\n\n  return extensionAttributes\n}\n","import { NodeType, Schema } from 'prosemirror-model'\n\nexport function getNodeType(nameOrType: string | NodeType, schema: Schema): NodeType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.nodes[nameOrType]\n  }\n\n  return nameOrType\n}\n","export function mergeAttributes(...objects: Record<string, any>[]): Record<string, any> {\n  return objects\n    .filter(item => !!item)\n    .reduce((items, item) => {\n      const mergedAttributes = { ...items }\n\n      Object.entries(item).forEach(([key, value]) => {\n        const exists = mergedAttributes[key]\n\n        if (!exists) {\n          mergedAttributes[key] = value\n\n          return\n        }\n\n        if (key === 'class') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join(' ')\n        } else if (key === 'style') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join('; ')\n        } else {\n          mergedAttributes[key] = value\n        }\n      })\n\n      return mergedAttributes\n    }, {})\n}\n","import { Mark, Node } from 'prosemirror-model'\n\nimport { ExtensionAttribute } from '../types'\nimport { mergeAttributes } from '../utilities/mergeAttributes'\n\nexport function getRenderedAttributes(nodeOrMark: Node | Mark, extensionAttributes: ExtensionAttribute[]): Record<string, any> {\n  return extensionAttributes\n    .filter(item => item.attribute.rendered)\n    .map(item => {\n      if (!item.attribute.renderHTML) {\n        return {\n          [item.name]: nodeOrMark.attrs[item.name],\n        }\n      }\n\n      return item.attribute.renderHTML(nodeOrMark.attrs) || {}\n    })\n    .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {})\n}\n","export function isFunction(value: any): value is Function {\n  return typeof value === 'function'\n}\n","import { MaybeReturnType } from '../types'\nimport { isFunction } from './isFunction'\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nexport function callOrReturn<T>(value: T, context: any = undefined, ...props: any[]): MaybeReturnType<T> {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props)\n    }\n\n    return value(...props)\n  }\n\n  return value as MaybeReturnType<T>\n}\n","export function isEmptyObject(value = {}): boolean {\n  return Object.keys(value).length === 0 && value.constructor === Object\n}\n","export function fromString(value: any): any {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value)\n  }\n\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n","import { ParseRule } from 'prosemirror-model'\n\nimport { ExtensionAttribute } from '../types'\nimport { fromString } from '../utilities/fromString'\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nexport function injectExtensionAttributesToParseRule(parseRule: ParseRule, extensionAttributes: ExtensionAttribute[]): ParseRule {\n  if (parseRule.style) {\n    return parseRule\n  }\n\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs\n        ? parseRule.getAttrs(node)\n        : parseRule.attrs\n\n      if (oldAttributes === false) {\n        return false\n      }\n\n      const newAttributes = extensionAttributes.reduce((items, item) => {\n        const value = item.attribute.parseHTML\n          ? item.attribute.parseHTML(node as HTMLElement)\n          : fromString((node as HTMLElement).getAttribute(item.name))\n\n        if (value === null || value === undefined) {\n          return items\n        }\n\n        return {\n          ...items,\n          [item.name]: value,\n        }\n      }, {})\n\n      return { ...oldAttributes, ...newAttributes }\n    },\n  }\n}\n","import { MarkSpec, NodeSpec, Schema } from 'prosemirror-model'\n\nimport { MarkConfig, NodeConfig } from '..'\nimport { AnyConfig, Extensions } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { isEmptyObject } from '../utilities/isEmptyObject'\nimport { getAttributesFromExtensions } from './getAttributesFromExtensions'\nimport { getExtensionField } from './getExtensionField'\nimport { getRenderedAttributes } from './getRenderedAttributes'\nimport { injectExtensionAttributesToParseRule } from './injectExtensionAttributesToParseRule'\nimport { splitExtensions } from './splitExtensions'\n\nfunction cleanUpSchemaItem<T>(data: T) {\n  return Object.fromEntries(Object.entries(data).filter(([key, value]) => {\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false\n    }\n\n    return value !== null && value !== undefined\n  })) as T\n}\n\nexport function getSchemaByResolvedExtensions(extensions: Extensions): Schema {\n  const allAttributes = getAttributesFromExtensions(extensions)\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const topNode = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))?.name\n\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField<AnyConfig['extendNodeSchema']>(\n        e,\n        'extendNodeSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: NodeSpec = cleanUpSchemaItem({\n      ...extraNodeFields,\n      content: callOrReturn(getExtensionField<NodeConfig['content']>(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField<NodeConfig['marks']>(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField<NodeConfig['inline']>(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField<NodeConfig['atom']>(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField<NodeConfig['selectable']>(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField<NodeConfig['draggable']>(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField<NodeConfig['code']>(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField<NodeConfig['defining']>(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField<NodeConfig['isolating']>(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<NodeConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<NodeConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n      })\n    }\n\n    const renderText = getExtensionField<NodeConfig['renderText']>(extension, 'renderText', context)\n\n    if (renderText) {\n      schema.toText = renderText\n    }\n\n    return [extension.name, schema]\n  }))\n\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField<AnyConfig['extendMarkSchema']>(\n        e,\n        'extendMarkSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: MarkSpec = cleanUpSchemaItem({\n      ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField<MarkConfig['inclusive']>(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField<MarkConfig['excludes']>(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField<MarkConfig['group']>(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField<MarkConfig['spanning']>(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField<MarkConfig['code']>(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<MarkConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<MarkConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n      })\n    }\n\n    return [extension.name, schema]\n  }))\n\n  return new Schema({\n    topNode,\n    nodes,\n    marks,\n  })\n}\n","import { MarkType, NodeType, Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeByName(name: string, schema: Schema): NodeType | MarkType | null {\n  return schema.nodes[name] || schema.marks[name] || null\n}\n","import { AnyExtension, EnableRules } from '../types'\n\nexport function isExtensionRulesEnabled(extension: AnyExtension, enabled: EnableRules): boolean {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string'\n        ? enabledExtension\n        : enabledExtension.name\n\n      return name === extension.name\n    })\n  }\n\n  return enabled\n}\n","import { ResolvedPos } from 'prosemirror-model'\n\nexport const getTextContentFromNodes = ($from: ResolvedPos, maxMatch = 500) => {\n  let textBefore = ''\n\n  const sliceEndPos = $from.parentOffset\n\n  $from.parent.nodesBetween(\n    Math.max(0, sliceEndPos - maxMatch),\n    sliceEndPos,\n    (node, pos, parent, index) => {\n      const chunk = node.type.spec.toText?.({\n        node, pos, parent, index,\n      }) || node.textContent || '%leaf%'\n\n      textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos))\n    },\n  )\n\n  return textBefore\n}\n","export function isRegExp(value: any): value is RegExp {\n  return Object.prototype.toString.call(value) === '[object RegExp]'\n}\n","import { EditorState, Plugin, TextSelection } from 'prosemirror-state'\n\nimport { CommandManager } from './CommandManager'\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport { getTextContentFromNodes } from './helpers/getTextContentFromNodes'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types'\nimport { isRegExp } from './utilities/isRegExp'\n\nexport type InputRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type InputRuleFinder =\n  | RegExp\n  | ((text: string) => InputRuleMatch | null)\n\nexport class InputRule {\n  find: InputRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void | null\n\n  constructor(config: {\n    find: InputRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void | null,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst inputRuleMatcherHandler = (text: string, find: InputRuleFinder): ExtendedRegExpMatchArray | null => {\n  if (isRegExp(find)) {\n    return find.exec(text)\n  }\n\n  const inputRuleMatch = find(text)\n\n  if (!inputRuleMatch) {\n    return null\n  }\n\n  const result: ExtendedRegExpMatchArray = []\n\n  result.push(inputRuleMatch.text)\n  result.index = inputRuleMatch.index\n  result.input = text\n  result.data = inputRuleMatch.data\n\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".')\n    }\n\n    result.push(inputRuleMatch.replaceWith)\n  }\n\n  return result\n}\n\nfunction run(config: {\n  editor: Editor,\n  from: number,\n  to: number,\n  text: string,\n  rules: InputRule[],\n  plugin: Plugin,\n}): boolean {\n  const {\n    editor,\n    from,\n    to,\n    text,\n    rules,\n    plugin,\n  } = config\n  const { view } = editor\n\n  if (view.composing) {\n    return false\n  }\n\n  const $from = view.state.doc.resolve(from)\n\n  if (\n    // check for code node\n    $from.parent.type.spec.code\n    // check for code mark\n    || !!($from.nodeBefore || $from.nodeAfter)?.marks.find(mark => mark.type.spec.code)\n  ) {\n    return false\n  }\n\n  let matched = false\n\n  const textBefore = getTextContentFromNodes($from) + text\n\n  rules.forEach(rule => {\n    if (matched) {\n      return\n    }\n\n    const match = inputRuleMatcherHandler(textBefore, rule.find)\n\n    if (!match) {\n      return\n    }\n\n    const tr = view.state.tr\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr,\n    })\n    const range = {\n      from: from - (match[0].length - text.length),\n      to,\n    }\n\n    const { commands, chain, can } = new CommandManager({\n      editor,\n      state,\n    })\n\n    const handler = rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can,\n    })\n\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return\n    }\n\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text,\n    })\n\n    view.dispatch(tr)\n    matched = true\n  })\n\n  return matched\n}\n\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function inputRulesPlugin(props: { editor: Editor, rules: InputRule[] }): Plugin {\n  const { editor, rules } = props\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(plugin)\n\n        if (stored) {\n          return stored\n        }\n\n        return tr.selectionSet || tr.docChanged\n          ? null\n          : prev\n      },\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin,\n        })\n      },\n\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n\n            if ($cursor) {\n              run({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin,\n              })\n            }\n          })\n\n          return false\n        },\n      },\n\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false\n        }\n\n        const { $cursor } = view.state.selection as TextSelection\n\n        if ($cursor) {\n          return run({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin,\n          })\n        }\n\n        return false\n      },\n    },\n\n    // @ts-ignore\n    isInputRules: true,\n  }) as Plugin\n\n  return plugin\n}\n","export function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n","import { EditorState, Plugin } from 'prosemirror-state'\n\nimport { CommandManager } from './CommandManager'\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types'\nimport { isNumber } from './utilities/isNumber'\nimport { isRegExp } from './utilities/isRegExp'\n\nexport type PasteRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type PasteRuleFinder =\n  | RegExp\n  | ((text: string) => PasteRuleMatch[] | null | undefined)\n\nexport class PasteRule {\n  find: PasteRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void | null\n\n  constructor(config: {\n    find: PasteRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void | null,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst pasteRuleMatcherHandler = (text: string, find: PasteRuleFinder): ExtendedRegExpMatchArray[] => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)]\n  }\n\n  const matches = find(text)\n\n  if (!matches) {\n    return []\n  }\n\n  return matches.map(pasteRuleMatch => {\n    const result: ExtendedRegExpMatchArray = []\n\n    result.push(pasteRuleMatch.text)\n    result.index = pasteRuleMatch.index\n    result.input = text\n    result.data = pasteRuleMatch.data\n\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".')\n      }\n\n      result.push(pasteRuleMatch.replaceWith)\n    }\n\n    return result\n  })\n}\n\nfunction run(config: {\n  editor: Editor,\n  state: EditorState,\n  from: number,\n  to: number,\n  rule: PasteRule,\n}): boolean {\n  const {\n    editor,\n    state,\n    from,\n    to,\n    rule,\n  } = config\n\n  const { commands, chain, can } = new CommandManager({\n    editor,\n    state,\n  })\n\n  const handlers: (void | null)[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return\n    }\n\n    const resolvedFrom = Math.max(from, pos)\n    const resolvedTo = Math.min(to, pos + node.content.size)\n    const textToMatch = node.textBetween(\n      resolvedFrom - pos,\n      resolvedTo - pos,\n      undefined,\n      '\\ufffc',\n    )\n\n    const matches = pasteRuleMatcherHandler(textToMatch, rule.find)\n\n    matches.forEach(match => {\n      if (match.index === undefined) {\n        return\n      }\n\n      const start = resolvedFrom + match.index + 1\n      const end = start + match[0].length\n      const range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end),\n      }\n\n      const handler = rule.handler({\n        state,\n        range,\n        match,\n        commands,\n        chain,\n        can,\n      })\n\n      handlers.push(handler)\n    })\n  })\n\n  const success = handlers.every(handler => handler !== null)\n\n  return success\n}\n\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function pasteRulesPlugin(props: { editor: Editor, rules: PasteRule[] }): Plugin[] {\n  const { editor, rules } = props\n  let dragSourceElement: Element | null = null\n  let isPastedFromProseMirror = false\n  let isDroppedFromProseMirror = false\n\n  const plugins = rules.map(rule => {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view(view) {\n        const handleDragstart = (event: DragEvent) => {\n          dragSourceElement = view.dom.parentElement?.contains(event.target as Element)\n            ? view.dom.parentElement\n            : null\n        }\n\n        window.addEventListener('dragstart', handleDragstart)\n\n        return {\n          destroy() {\n            window.removeEventListener('dragstart', handleDragstart)\n          },\n        }\n      },\n\n      props: {\n        handleDOMEvents: {\n          drop: view => {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement\n\n            return false\n          },\n\n          paste: (view, event: Event) => {\n            const html = (event as ClipboardEvent).clipboardData?.getData('text/html')\n\n            isPastedFromProseMirror = !!html?.includes('data-pm-slice')\n\n            return false\n          },\n        },\n      },\n\n      appendTransaction: (transactions, oldState, state) => {\n        const transaction = transactions[0]\n        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror\n        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror\n\n        if (!isPaste && !isDrop) {\n          return\n        }\n\n        // stop if there is no changed range\n        const from = oldState.doc.content.findDiffStart(state.doc.content)\n        const to = oldState.doc.content.findDiffEnd(state.doc.content)\n\n        if (!isNumber(from) || !to || from === to.b) {\n          return\n        }\n\n        // build a chainable state\n        // so we can use a single transaction for all paste rules\n        const tr = state.tr\n        const chainableState = createChainableState({\n          state,\n          transaction: tr,\n        })\n\n        const handler = run({\n          editor,\n          state: chainableState,\n          from: Math.max(from - 1, 0),\n          to: to.b - 1,\n          rule,\n        })\n\n        // stop if there are no changes\n        if (!handler || !tr.steps.length) {\n          return\n        }\n\n        return tr\n      },\n    })\n  })\n\n  return plugins\n}\n","export function findDuplicates(items: any[]): any[] {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index)\n\n  return [...new Set(filtered)]\n}\n","import { keymap } from 'prosemirror-keymap'\nimport { Node as ProsemirrorNode, Schema } from 'prosemirror-model'\nimport { Plugin } from 'prosemirror-state'\nimport { Decoration, EditorView } from 'prosemirror-view'\n\nimport { Mark, NodeConfig } from '.'\nimport { Editor } from './Editor'\nimport { getAttributesFromExtensions } from './helpers/getAttributesFromExtensions'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { getNodeType } from './helpers/getNodeType'\nimport { getRenderedAttributes } from './helpers/getRenderedAttributes'\nimport { getSchemaByResolvedExtensions } from './helpers/getSchemaByResolvedExtensions'\nimport { getSchemaTypeByName } from './helpers/getSchemaTypeByName'\nimport { isExtensionRulesEnabled } from './helpers/isExtensionRulesEnabled'\nimport { splitExtensions } from './helpers/splitExtensions'\nimport { inputRulesPlugin } from './InputRule'\nimport { pasteRulesPlugin } from './PasteRule'\nimport { AnyConfig, Extensions, RawCommands } from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { findDuplicates } from './utilities/findDuplicates'\n\nexport class ExtensionManager {\n\n  editor: Editor\n\n  schema: Schema\n\n  extensions: Extensions\n\n  splittableMarks: string[] = []\n\n  constructor(extensions: Extensions, editor: Editor) {\n    this.editor = editor\n    this.extensions = ExtensionManager.resolve(extensions)\n    this.schema = getSchemaByResolvedExtensions(this.extensions)\n\n    this.extensions.forEach(extension => {\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage\n\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = callOrReturn(getExtensionField(extension, 'keepOnSplit', context)) ?? true\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name)\n        }\n      }\n\n      const onBeforeCreate = getExtensionField<AnyConfig['onBeforeCreate']>(\n        extension,\n        'onBeforeCreate',\n        context,\n      )\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate)\n      }\n\n      const onCreate = getExtensionField<AnyConfig['onCreate']>(\n        extension,\n        'onCreate',\n        context,\n      )\n\n      if (onCreate) {\n        this.editor.on('create', onCreate)\n      }\n\n      const onUpdate = getExtensionField<AnyConfig['onUpdate']>(\n        extension,\n        'onUpdate',\n        context,\n      )\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate)\n      }\n\n      const onSelectionUpdate = getExtensionField<AnyConfig['onSelectionUpdate']>(\n        extension,\n        'onSelectionUpdate',\n        context,\n      )\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate)\n      }\n\n      const onTransaction = getExtensionField<AnyConfig['onTransaction']>(\n        extension,\n        'onTransaction',\n        context,\n      )\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction)\n      }\n\n      const onFocus = getExtensionField<AnyConfig['onFocus']>(\n        extension,\n        'onFocus',\n        context,\n      )\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus)\n      }\n\n      const onBlur = getExtensionField<AnyConfig['onBlur']>(\n        extension,\n        'onBlur',\n        context,\n      )\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur)\n      }\n\n      const onDestroy = getExtensionField<AnyConfig['onDestroy']>(\n        extension,\n        'onDestroy',\n        context,\n      )\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy)\n      }\n    })\n  }\n\n  static resolve(extensions: Extensions): Extensions {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions))\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name))\n\n    if (duplicatedNames.length) {\n      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`)\n    }\n\n    return resolvedExtensions\n  }\n\n  static flatten(extensions: Extensions): Extensions {\n    return extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n        }\n\n        const addExtensions = getExtensionField<AnyConfig['addExtensions']>(\n          extension,\n          'addExtensions',\n          context,\n        )\n\n        if (addExtensions) {\n          return [\n            extension,\n            ...this.flatten(addExtensions()),\n          ]\n        }\n\n        return extension\n      })\n      // `Infinity` will break TypeScript so we set a number that is probably high enough\n      .flat(10)\n  }\n\n  static sort(extensions: Extensions): Extensions {\n    const defaultPriority = 100\n\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField<AnyConfig['priority']>(a, 'priority') || defaultPriority\n      const priorityB = getExtensionField<AnyConfig['priority']>(b, 'priority') || defaultPriority\n\n      if (priorityA > priorityB) {\n        return -1\n      }\n\n      if (priorityA < priorityB) {\n        return 1\n      }\n\n      return 0\n    })\n  }\n\n  get commands(): RawCommands {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      const addCommands = getExtensionField<AnyConfig['addCommands']>(\n        extension,\n        'addCommands',\n        context,\n      )\n\n      if (!addCommands) {\n        return commands\n      }\n\n      return {\n        ...commands,\n        ...addCommands(),\n      }\n    }, {} as RawCommands)\n  }\n\n  get plugins(): Plugin[] {\n    const { editor } = this\n\n    // With ProseMirror, first plugins within an array are executed first.\n    // In tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse())\n\n    const inputRules: any[] = []\n    const pasteRules: any[] = []\n\n    const allPlugins = extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getSchemaTypeByName(extension.name, this.schema),\n        }\n\n        const plugins: Plugin[] = []\n\n        const addKeyboardShortcuts = getExtensionField<AnyConfig['addKeyboardShortcuts']>(\n          extension,\n          'addKeyboardShortcuts',\n          context,\n        )\n\n        let defaultBindings: Record<string, () => boolean> = {}\n\n        // bind exit handling\n        if (extension.type === 'mark' && extension.config.exitable) {\n          defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: (extension as Mark) })\n        }\n\n        if (addKeyboardShortcuts) {\n          const bindings = Object.fromEntries(\n            Object\n              .entries(addKeyboardShortcuts())\n              .map(([shortcut, method]) => {\n                return [shortcut, () => method({ editor })]\n              }),\n          )\n\n          defaultBindings = { ...defaultBindings, ...bindings }\n        }\n\n        const keyMapPlugin = keymap(defaultBindings)\n\n        plugins.push(keyMapPlugin)\n\n        const addInputRules = getExtensionField<AnyConfig['addInputRules']>(\n          extension,\n          'addInputRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push(...addInputRules())\n        }\n\n        const addPasteRules = getExtensionField<AnyConfig['addPasteRules']>(\n          extension,\n          'addPasteRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push(...addPasteRules())\n        }\n\n        const addProseMirrorPlugins = getExtensionField<AnyConfig['addProseMirrorPlugins']>(\n          extension,\n          'addProseMirrorPlugins',\n          context,\n        )\n\n        if (addProseMirrorPlugins) {\n          const proseMirrorPlugins = addProseMirrorPlugins()\n\n          plugins.push(...proseMirrorPlugins)\n        }\n\n        return plugins\n      })\n      .flat()\n\n    return [\n      inputRulesPlugin({\n        editor,\n        rules: inputRules,\n      }),\n      ...pasteRulesPlugin({\n        editor,\n        rules: pasteRules,\n      }),\n      ...allPlugins,\n    ]\n  }\n\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions)\n  }\n\n  get nodeViews() {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(nodeExtensions\n      .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n      .map(extension => {\n        const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name)\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getNodeType(extension.name, this.schema),\n        }\n        const addNodeView = getExtensionField<NodeConfig['addNodeView']>(\n          extension,\n          'addNodeView',\n          context,\n        )\n\n        if (!addNodeView) {\n          return []\n        }\n\n        const nodeview = (\n          node: ProsemirrorNode,\n          view: EditorView,\n          getPos: (() => number) | boolean,\n          decorations: Decoration[],\n        ) => {\n          const HTMLAttributes = getRenderedAttributes(node, extensionAttributes)\n\n          return addNodeView()({\n            editor,\n            node,\n            getPos,\n            decorations,\n            HTMLAttributes,\n            extension,\n          })\n        }\n\n        return [extension.name, nodeview]\n      }))\n  }\n}\n","// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nexport function isPlainObject(value: any): value is Record<string, any> {\n  if (getType(value) !== 'Object') {\n    return false\n  }\n\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype\n}\n","import { isPlainObject } from './isPlainObject'\n\nexport function mergeDeep(target: Record<string, any>, source: Record<string, any>): Record<string, any> {\n  const output = { ...target }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = mergeDeep(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    })\n  }\n\n  return output\n}\n","import { Plugin, Transaction } from 'prosemirror-state'\n\nimport { ExtensionConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { Mark } from './Mark'\nimport { Node } from './Node'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  interface ExtensionConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n  }\n}\n\nexport class Extension<Options = any, Storage = any> {\n  type = 'extension'\n\n  name = 'extension'\n\n  parent: Extension | null = null\n\n  child: Extension | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: ExtensionConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<ExtensionConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<ExtensionConfig<O, S>> = {}) {\n    return new Extension<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<ExtensionConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Extension<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { Range, TextSerializer } from '../types'\n\nexport function getTextBetween(\n  startNode: ProseMirrorNode,\n  range: Range,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const { from, to } = range\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  let text = ''\n  let separated = true\n\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    const textSerializer = textSerializers?.[node.type.name]\n\n    if (textSerializer) {\n      if (node.isBlock && !separated) {\n        text += blockSeparator\n        separated = true\n      }\n\n      if (parent) {\n        text += textSerializer({\n          node,\n          pos,\n          parent,\n          index,\n          range,\n        })\n      }\n    } else if (node.isText) {\n      text += node?.text?.slice(Math.max(from, pos) - pos, to - pos) // eslint-disable-line\n      separated = false\n    } else if (node.isBlock && !separated) {\n      text += blockSeparator\n      separated = true\n    }\n  })\n\n  return text\n}\n","import { Schema } from 'prosemirror-model'\n\nimport { TextSerializer } from '../types'\n\nexport function getTextSerializersFromSchema(schema: Schema): Record<string, TextSerializer> {\n  return Object.fromEntries(Object\n    .entries(schema.nodes)\n    .filter(([, node]) => node.spec.toText)\n    .map(([name, node]) => [name, node.spec.toText]))\n}\n","import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\nimport { getTextBetween } from '../helpers/getTextBetween'\nimport { getTextSerializersFromSchema } from '../helpers/getTextSerializersFromSchema'\n\nexport const ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('clipboardTextSerializer'),\n        props: {\n          clipboardTextSerializer: () => {\n            const { editor } = this\n            const { state, schema } = editor\n            const { doc, selection } = state\n            const { ranges } = selection\n            const from = Math.min(...ranges.map(range => range.$from.pos))\n            const to = Math.max(...ranges.map(range => range.$to.pos))\n            const textSerializers = getTextSerializersFromSchema(schema)\n            const range = { from, to }\n\n            return getTextBetween(doc, range, {\n              textSerializers,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blur: {\n      /**\n       * Removes focus from the editor.\n       */\n      blur: () => ReturnType,\n    }\n  }\n}\n\nexport const blur: RawCommands['blur'] = () => ({ editor, view }) => {\n  requestAnimationFrame(() => {\n    if (!editor.isDestroyed) {\n      (view.dom as HTMLElement).blur()\n\n      // Browsers should remove the caret on blur but safari does not.\n      // See: https://github.com/ueberdosis/tiptap/issues/2405\n      window?.getSelection()?.removeAllRanges()\n    }\n  })\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearContent: {\n      /**\n       * Clear the whole document.\n       */\n      clearContent: (emitUpdate?: boolean) => ReturnType,\n    }\n  }\n}\n\nexport const clearContent: RawCommands['clearContent'] = (emitUpdate = false) => ({ commands }) => {\n  return commands.setContent('', emitUpdate)\n}\n","import { liftTarget } from 'prosemirror-transform'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearNodes: {\n      /**\n       * Normalize nodes to a simple paragraph.\n       */\n      clearNodes: () => ReturnType,\n    }\n  }\n}\n\nexport const clearNodes: RawCommands['clearNodes'] = () => ({ state, tr, dispatch }) => {\n  const { selection } = tr\n  const { ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  ranges.forEach(({ $from, $to }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return\n      }\n\n      const { doc, mapping } = tr\n      const $mappedFrom = doc.resolve(mapping.map(pos))\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize))\n      const nodeRange = $mappedFrom.blockRange($mappedTo)\n\n      if (!nodeRange) {\n        return\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange)\n\n      if (node.type.isTextblock) {\n        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index())\n\n        tr.setNodeMarkup(nodeRange.start, defaultType)\n      }\n\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth)\n      }\n    })\n  })\n\n  return true\n}\n","import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    command: {\n      /**\n       * Define a command inline.\n       */\n      command: (fn: (props: Parameters<Command>[0]) => boolean) => ReturnType,\n    }\n  }\n}\n\nexport const command: RawCommands['command'] = fn => props => {\n  return fn(props)\n}\n","import { createParagraphNear as originalCreateParagraphNear } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    createParagraphNear: {\n      /**\n       * Create a paragraph nearby.\n       */\n      createParagraphNear: () => ReturnType,\n    }\n  }\n}\n\nexport const createParagraphNear: RawCommands['createParagraphNear'] = () => ({ state, dispatch }) => {\n  return originalCreateParagraphNear(state, dispatch)\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteCurrentNode: {\n      /**\n       * Delete the node that currently has the selection anchor.\n       */\n      deleteCurrentNode: () => ReturnType,\n    }\n  }\n}\n\nexport const deleteCurrentNode: RawCommands['deleteCurrentNode'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const currentNode = selection.$anchor.node()\n\n  // if there is content inside the current node, break out of this command\n  if (currentNode.content.size > 0) {\n    return false\n  }\n\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === currentNode.type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteNode: {\n      /**\n       * Delete a node.\n       */\n      deleteNode: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const deleteNode: RawCommands['deleteNode'] = typeOrName => ({ tr, state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { Range, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteRange: {\n      /**\n       * Delete a given range.\n       */\n      deleteRange: (range: Range) => ReturnType,\n    }\n  }\n}\n\nexport const deleteRange: RawCommands['deleteRange'] = range => ({ tr, dispatch }) => {\n  const { from, to } = range\n\n  if (dispatch) {\n    tr.delete(from, to)\n  }\n\n  return true\n}\n","import { deleteSelection as originalDeleteSelection } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteSelection: {\n      /**\n       * Delete the selection, if there is one.\n       */\n      deleteSelection: () => ReturnType,\n    }\n  }\n}\n\nexport const deleteSelection: RawCommands['deleteSelection'] = () => ({ state, dispatch }) => {\n  return originalDeleteSelection(state, dispatch)\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    enter: {\n      /**\n       * Trigger enter.\n       */\n      enter: () => ReturnType,\n    }\n  }\n}\n\nexport const enter: RawCommands['enter'] = () => ({ commands }) => {\n  return commands.keyboardShortcut('Enter')\n}\n","import { exitCode as originalExitCode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    exitCode: {\n      /**\n       * Exit from a code block.\n       */\n      exitCode: () => ReturnType,\n    }\n  }\n}\n\nexport const exitCode: RawCommands['exitCode'] = () => ({ state, dispatch }) => {\n  return originalExitCode(state, dispatch)\n}\n","import { isRegExp } from './isRegExp'\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nexport function objectIncludes(\n  object1: Record<string, any>,\n  object2: Record<string, any>,\n  options: { strict: boolean } = { strict: true },\n): boolean {\n  const keys = Object.keys(object2)\n\n  if (!keys.length) {\n    return true\n  }\n\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key]\n    }\n\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key])\n    }\n\n    return object2[key] === object1[key]\n  })\n}\n","import { Mark as ProseMirrorMark, MarkType, ResolvedPos } from 'prosemirror-model'\n\nimport { Range } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\n\nfunction findMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): ProseMirrorMark | undefined {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes)\n  })\n}\n\nfunction isMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): boolean {\n  return !!findMarkInSet(marks, type, attributes)\n}\n\nexport function getMarkRange(\n  $pos: ResolvedPos,\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): Range | void {\n  if (!$pos || !type) {\n    return\n  }\n\n  let start = $pos.parent.childAfter($pos.parentOffset)\n\n  if ($pos.parentOffset === start.offset && start.offset !== 0) {\n    start = $pos.parent.childBefore($pos.parentOffset)\n  }\n\n  if (!start.node) {\n    return\n  }\n\n  const mark = findMarkInSet([...start.node.marks], type, attributes)\n\n  if (!mark) {\n    return\n  }\n\n  let startIndex = start.index\n  let startPos = $pos.start() + start.offset\n  let endIndex = startIndex + 1\n  let endPos = startPos + start.node.nodeSize\n\n  findMarkInSet([...start.node.marks], type, attributes)\n\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1\n    startPos -= $pos.parent.child(startIndex).nodeSize\n  }\n\n  while (\n    endIndex < $pos.parent.childCount\n    && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)\n  ) {\n    endPos += $pos.parent.child(endIndex).nodeSize\n    endIndex += 1\n  }\n\n  return {\n    from: startPos,\n    to: endPos,\n  }\n}\n","import { MarkType, Schema } from 'prosemirror-model'\n\nexport function getMarkType(nameOrType: string | MarkType, schema: Schema): MarkType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.marks[nameOrType]\n  }\n\n  return nameOrType\n}\n","import { MarkType } from 'prosemirror-model'\nimport { TextSelection } from 'prosemirror-state'\n\nimport { getMarkRange } from '../helpers/getMarkRange'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    extendMarkRange: {\n      /**\n       * Extends the text selection to the current mark.\n       */\n      extendMarkRange: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const extendMarkRange: RawCommands['extendMarkRange'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const { doc, selection } = tr\n  const { $from, from, to } = selection\n\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes)\n\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to)\n\n      tr.setSelection(newSelection)\n    }\n  }\n\n  return true\n}\n","import { Command, CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    first: {\n      /**\n       * Runs one command after the other and stops at the first which returns true.\n       */\n      first: (commands: Command[] | ((props: CommandProps) => Command[])) => ReturnType,\n    }\n  }\n}\n\nexport const first: RawCommands['first'] = commands => props => {\n  const items = typeof commands === 'function'\n    ? commands(props)\n    : commands\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true\n    }\n  }\n\n  return false\n}\n","import { TextSelection } from 'prosemirror-state'\n\nexport function isTextSelection(value: unknown): value is TextSelection {\n  return value instanceof TextSelection\n}\n","export function minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Selection, TextSelection } from 'prosemirror-state'\n\nimport { FocusPosition } from '../types'\nimport { minMax } from '../utilities/minMax'\n\nexport function resolveFocusPosition(\n  doc: ProseMirrorNode,\n  position: FocusPosition = null,\n): Selection | null {\n\n  if (!position) {\n    return null\n  }\n\n  const selectionAtStart = Selection.atStart(doc)\n  const selectionAtEnd = Selection.atEnd(doc)\n\n  if (position === 'start' || position === true) {\n    return selectionAtStart\n  }\n\n  if (position === 'end') {\n    return selectionAtEnd\n  }\n\n  const minPos = selectionAtStart.from\n  const maxPos = selectionAtEnd.to\n\n  if (position === 'all') {\n    return TextSelection.create(\n      doc,\n      minMax(0, minPos, maxPos),\n      minMax(doc.content.size, minPos, maxPos),\n    )\n  }\n\n  return TextSelection.create(\n    doc,\n    minMax(position, minPos, maxPos),\n    minMax(position, minPos, maxPos),\n  )\n}\n","export function isiOS(): boolean {\n  return [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n}\n","import { isTextSelection } from '../helpers/isTextSelection'\nimport { resolveFocusPosition } from '../helpers/resolveFocusPosition'\nimport { FocusPosition, RawCommands } from '../types'\nimport { isiOS } from '../utilities/isiOS'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    focus: {\n      /**\n       * Focus the editor at the given position.\n       */\n      focus: (\n        position?: FocusPosition,\n        options?: {\n          scrollIntoView?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const focus: RawCommands['focus'] = (position = null, options = {}) => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options,\n  }\n\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS\n    // so we have to call this\n    if (isiOS()) {\n      (view.dom as HTMLElement).focus()\n    }\n\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus()\n\n        if (options?.scrollIntoView) {\n          editor.commands.scrollIntoView()\n        }\n      }\n    })\n  }\n\n  if ((view.hasFocus() && position === null) || position === false) {\n    return true\n  }\n\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus()\n    return true\n  }\n\n  // pass through tr.doc instead of editor.state.doc\n  // since transactions could change the editors state before this command has been run\n  const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection\n  const isSameSelection = editor.state.selection.eq(selection)\n\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection)\n    }\n\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks)\n    }\n\n    delayedFocus()\n  }\n\n  return true\n}\n","import { CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    forEach: {\n      /**\n       * Loop through an array of items.\n       */\n      forEach: <T>(\n        items: T[],\n        fn: (\n          item: T,\n          props: CommandProps & {\n            index: number,\n          },\n        ) => boolean,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const forEach: RawCommands['forEach'] = (items, fn) => props => {\n  return items.every((item, index) => fn(item, { ...props, index }))\n}\n","import { ParseOptions } from 'prosemirror-model'\n\nimport { Content, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContent: {\n      /**\n       * Insert a node or string of HTML at the current position.\n       */\n      insertContent: (\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const insertContent: RawCommands['insertContent'] = (value, options) => ({ tr, commands }) => {\n  return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options)\n}\n","export function elementFromString(value: string): HTMLElement {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`\n\n  return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n","import {\n  DOMParser,\n  Fragment,\n  Node as ProseMirrorNode,\n  ParseOptions,\n  Schema,\n} from 'prosemirror-model'\n\nimport { Content } from '../types'\nimport { elementFromString } from '../utilities/elementFromString'\n\nexport type CreateNodeFromContentOptions = {\n  slice?: boolean,\n  parseOptions?: ParseOptions,\n}\n\nexport function createNodeFromContent(\n  content: Content,\n  schema: Schema,\n  options?: CreateNodeFromContentOptions,\n): ProseMirrorNode | Fragment {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options,\n  }\n\n  if (typeof content === 'object' && content !== null) {\n    try {\n      if (Array.isArray(content)) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)))\n      }\n\n      return schema.nodeFromJSON(content)\n    } catch (error) {\n      console.warn(\n        '[tiptap warn]: Invalid content.',\n        'Passed value:',\n        content,\n        'Error:',\n        error,\n      )\n\n      return createNodeFromContent('', schema, options)\n    }\n  }\n\n  if (typeof content === 'string') {\n    const parser = DOMParser.fromSchema(schema)\n\n    return options.slice\n      ? parser.parseSlice(elementFromString(content), options.parseOptions).content\n      : parser.parse(elementFromString(content), options.parseOptions)\n  }\n\n  return createNodeFromContent('', schema, options)\n}\n","import { Selection, Transaction } from 'prosemirror-state'\nimport { ReplaceAroundStep, ReplaceStep } from 'prosemirror-transform'\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nexport function selectionToInsertionEnd(tr: Transaction, startLen: number, bias: number) {\n  const last = tr.steps.length - 1\n\n  if (last < startLen) {\n    return\n  }\n\n  const step = tr.steps[last]\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return\n  }\n\n  const map = tr.mapping.maps[last]\n  let end = 0\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo\n    }\n  })\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import { Fragment, Node as ProseMirrorNode, ParseOptions } from 'prosemirror-model'\n\nimport { createNodeFromContent } from '../helpers/createNodeFromContent'\nimport { selectionToInsertionEnd } from '../helpers/selectionToInsertionEnd'\nimport {\n  Content,\n  Range,\n  RawCommands,\n} from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContentAt: {\n      /**\n       * Insert a node or string of HTML at a specific position.\n       */\n      insertContentAt: (\n        position: number | Range,\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nconst isFragment = (nodeOrFragment: ProseMirrorNode | Fragment): nodeOrFragment is Fragment => {\n  return nodeOrFragment.toString().startsWith('<')\n}\n\nexport const insertContentAt: RawCommands['insertContentAt'] = (position, value, options) => ({ tr, dispatch, editor }) => {\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      ...options,\n    }\n\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n        ...options.parseOptions,\n      },\n    })\n\n    // don’t dispatch an empty fragment because this can lead to strange errors\n    if (content.toString() === '<>') {\n      return true\n    }\n\n    let { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n\n    let isOnlyTextContent = true\n    let isOnlyBlockContent = true\n    const nodes = isFragment(content)\n      ? content\n      : [content]\n\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check()\n\n      isOnlyTextContent = isOnlyTextContent\n        ? node.isText && node.marks.length === 0\n        : false\n\n      isOnlyBlockContent = isOnlyBlockContent\n        ? node.isBlock\n        : false\n    })\n\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const { parent } = tr.doc.resolve(from)\n      const isEmptyTextBlock = parent.isTextblock\n        && !parent.type.spec.code\n        && !parent.childCount\n\n      if (isEmptyTextBlock) {\n        from -= 1\n        to += 1\n      }\n    }\n\n    // if there is only plain text we have to use `insertText`\n    // because this will keep the current marks\n    if (isOnlyTextContent) {\n      tr.insertText(value as string, from, to)\n    } else {\n      tr.replaceWith(from, to, content)\n    }\n\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1)\n    }\n  }\n\n  return true\n}\n","import {\n  joinBackward as originalJoinBackward, joinDown as originalJoinDown, joinForward as originalJoinForward, joinUp as originalJoinUp,\n} from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinUp: {\n      /**\n       * Join two nodes Up.\n       */\n      joinUp: () => ReturnType,\n    }\n    joinDown: {\n      /**\n       * Join two nodes Down.\n       */\n      joinDown: () => ReturnType,\n    }\n    joinBackward: {\n      /**\n       * Join two nodes Backwards.\n       */\n      joinBackward: () => ReturnType,\n    }\n    joinForward: {\n      /**\n       * Join two nodes Forwards.\n       */\n      joinForward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinUp: RawCommands['joinUp'] = () => ({ state, dispatch }) => {\n  return originalJoinUp(state, dispatch)\n}\n\nexport const joinDown: RawCommands['joinDown'] = () => ({ state, dispatch }) => {\n  return originalJoinDown(state, dispatch)\n}\n\nexport const joinBackward: RawCommands['joinBackward'] = () => ({ state, dispatch }) => {\n  return originalJoinBackward(state, dispatch)\n}\n\nexport const joinForward: RawCommands['joinForward'] = () => ({ state, dispatch }) => {\n  return originalJoinForward(state, dispatch)\n}\n","export function isMacOS(): boolean {\n  return typeof navigator !== 'undefined'\n    ? /Mac/.test(navigator.platform)\n    : false\n}\n","import { RawCommands } from '../types'\nimport { isiOS } from '../utilities/isiOS'\nimport { isMacOS } from '../utilities/isMacOS'\n\nfunction normalizeKeyName(name: string) {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n\n  if (result === 'Space') {\n    result = ' '\n  }\n\n  let alt\n  let ctrl\n  let shift\n  let meta\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i]\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true\n      } else {\n        ctrl = true\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`)\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`\n  }\n\n  if (meta) {\n    result = `Meta-${result}`\n  }\n\n  if (shift) {\n    result = `Shift-${result}`\n  }\n\n  return result\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    keyboardShortcut: {\n      /**\n       * Trigger a keyboard shortcut.\n       */\n      keyboardShortcut: (name: string) => ReturnType,\n    }\n  }\n}\n\nexport const keyboardShortcut: RawCommands['keyboardShortcut'] = name => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/)\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item))\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space'\n      ? ' '\n      : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true,\n  })\n\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event))\n  })\n\n  capturedTransaction?.steps.forEach(step => {\n    const newStep = step.map(tr.mapping)\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep)\n    }\n  })\n\n  return true\n}\n","import { NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { NodeRange } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getNodeType } from './getNodeType'\n\nexport function isNodeActive(\n  state: EditorState,\n  typeOrName: NodeType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName\n    ? getNodeType(typeOrName, state.schema)\n    : null\n\n  const nodeRanges: NodeRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return\n    }\n\n    const relativeFrom = Math.max(from, pos)\n    const relativeTo = Math.min(to, pos + node.nodeSize)\n\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo,\n    })\n  })\n\n  const selectionRange = to - from\n  const matchedNodeRanges = nodeRanges\n    .filter(nodeRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === nodeRange.node.type.name\n    })\n    .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }))\n\n  if (empty) {\n    return !!matchedNodeRanges.length\n  }\n\n  const range = matchedNodeRanges\n    .reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0)\n\n  return range >= selectionRange\n}\n","import { lift as originalLift } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    lift: {\n      /**\n       * Removes an existing wrap.\n       */\n      lift: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const lift: RawCommands['lift'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (!isActive) {\n    return false\n  }\n\n  return originalLift(state, dispatch)\n}\n","import { liftEmptyBlock as originalLiftEmptyBlock } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftEmptyBlock: {\n      /**\n       * Lift block if empty.\n       */\n      liftEmptyBlock: () => ReturnType,\n    }\n  }\n}\n\nexport const liftEmptyBlock: RawCommands['liftEmptyBlock'] = () => ({ state, dispatch }) => {\n  return originalLiftEmptyBlock(state, dispatch)\n}\n","import { NodeType } from 'prosemirror-model'\nimport { liftListItem as originalLiftListItem } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftListItem: {\n      /**\n       * Lift the list item into a wrapping list.\n       */\n      liftListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const liftListItem: RawCommands['liftListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalLiftListItem(type)(state, dispatch)\n}\n","import { newlineInCode as originalNewlineInCode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    newlineInCode: {\n      /**\n       * Add a newline character in code.\n       */\n      newlineInCode: () => ReturnType,\n    }\n  }\n}\n\nexport const newlineInCode: RawCommands['newlineInCode'] = () => ({ state, dispatch }) => {\n  return originalNewlineInCode(state, dispatch)\n}\n","import { Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeNameByName(name: string, schema: Schema): 'node' | 'mark' | null {\n  if (schema.nodes[name]) {\n    return 'node'\n  }\n\n  if (schema.marks[name]) {\n    return 'mark'\n  }\n\n  return null\n}\n","/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nexport function deleteProps(obj: Record<string, any>, propOrProps: string | string[]): Record<string, any> {\n  const props = typeof propOrProps === 'string'\n    ? [propOrProps]\n    : propOrProps\n\n  return Object\n    .keys(obj)\n    .reduce((newObj: Record<string, any>, prop) => {\n      if (!props.includes(prop)) {\n        newObj[prop] = obj[prop]\n      }\n\n      return newObj\n    }, {})\n}\n","import { MarkType, NodeType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { RawCommands } from '../types'\nimport { deleteProps } from '../utilities/deleteProps'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    resetAttributes: {\n      /**\n       * Resets some node attributes to the default value.\n       */\n      resetAttributes: (typeOrName: string | NodeType | MarkType, attributes: string | string[]) => ReturnType,\n    }\n  }\n}\n\nexport const resetAttributes: RawCommands['resetAttributes'] = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes))\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    scrollIntoView: {\n      /**\n       * Scroll the selection into view.\n       */\n      scrollIntoView: () => ReturnType,\n    }\n  }\n}\n\nexport const scrollIntoView: RawCommands['scrollIntoView'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectAll: {\n      /**\n       * Select the whole document.\n       */\n      selectAll: () => ReturnType,\n    }\n  }\n}\n\nexport const selectAll: RawCommands['selectAll'] = () => ({ tr, commands }) => {\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size,\n  })\n}\n","import { selectNodeBackward as originalSelectNodeBackward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeBackward: {\n      /**\n       * Select a node backward.\n       */\n      selectNodeBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeBackward: RawCommands['selectNodeBackward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeBackward(state, dispatch)\n}\n","import { selectNodeForward as originalSelectNodeForward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeForward: {\n      /**\n       * Select a node forward.\n       */\n      selectNodeForward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeForward: RawCommands['selectNodeForward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeForward(state, dispatch)\n}\n","import { selectParentNode as originalSelectParentNode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectParentNode: {\n      /**\n       * Select the parent node.\n       */\n      selectParentNode: () => ReturnType,\n    }\n  }\n}\n\nexport const selectParentNode: RawCommands['selectParentNode'] = () => ({ state, dispatch }) => {\n  return originalSelectParentNode(state, dispatch)\n}\n","// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockEnd as originalSelectTextblockEnd } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockEnd: {\n      /**\n       * Moves the cursor to the end of current text block.\n       */\n      selectTextblockEnd: () => ReturnType,\n    }\n  }\n}\n\nexport const selectTextblockEnd: RawCommands['selectTextblockEnd'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockEnd(state, dispatch)\n}\n","// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockStart as originalSelectTextblockStart } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockStart: {\n      /**\n       * Moves the cursor to the start of current text block.\n       */\n      selectTextblockStart: () => ReturnType,\n    }\n  }\n}\n\nexport const selectTextblockStart: RawCommands['selectTextblockStart'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockStart(state, dispatch)\n}\n","import { Node as ProseMirrorNode, ParseOptions, Schema } from 'prosemirror-model'\n\nimport { Content } from '../types'\nimport { createNodeFromContent } from './createNodeFromContent'\n\nexport function createDocument(\n  content: Content,\n  schema: Schema,\n  parseOptions: ParseOptions = {},\n): ProseMirrorNode {\n  return createNodeFromContent(content, schema, { slice: false, parseOptions }) as ProseMirrorNode\n}\n","import { ParseOptions } from 'prosemirror-model'\n\nimport { createDocument } from '../helpers/createDocument'\nimport { Content, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setContent: {\n      /**\n       * Replace the whole document with new content.\n       */\n      setContent: (\n        content: Content,\n        emitUpdate?: boolean,\n        parseOptions?: ParseOptions,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const setContent: RawCommands['setContent'] = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {\n  const { doc } = tr\n  const document = createDocument(content, editor.schema, parseOptions)\n\n  if (dispatch) {\n    tr.replaceWith(0, doc.content.size, document)\n      .setMeta('preventUpdate', !emitUpdate)\n  }\n\n  return true\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { Transform } from 'prosemirror-transform'\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n */\nexport function combineTransactionSteps(oldDoc: ProseMirrorNode, transactions: Transaction[]): Transform {\n  const transform = new Transform(oldDoc)\n\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step)\n    })\n  })\n\n  return transform\n}\n","import { ContentMatch, NodeType } from 'prosemirror-model'\n\nexport function defaultBlockAt(match: ContentMatch): NodeType | null {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n\n  return null\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { NodeWithPos, Predicate } from '../types'\n\nexport function findChildren(node: ProseMirrorNode, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { NodeWithPos, Predicate, Range } from '../types'\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n */\nexport function findChildrenInRange(node: ProseMirrorNode, range: Range, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode, ResolvedPos } from 'prosemirror-model'\n\nimport { Predicate } from '../types'\n\nexport function findParentNodeClosestToPos($pos: ResolvedPos, predicate: Predicate): ({\n  pos: number,\n  start: number,\n  depth: number,\n  node: ProseMirrorNode,\n} | undefined) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i)\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node,\n      }\n    }\n  }\n}\n","import { Selection } from 'prosemirror-state'\n\nimport { Predicate } from '../types'\nimport { findParentNodeClosestToPos } from './findParentNodeClosestToPos'\n\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection) => findParentNodeClosestToPos(selection.$from, predicate)\n}\n","import { DOMSerializer, Fragment, Schema } from 'prosemirror-model'\n\nexport function getHTMLFromFragment(fragment: Fragment, schema: Schema): string {\n  const documentFragment = DOMSerializer\n    .fromSchema(schema)\n    .serializeFragment(fragment)\n\n  const temporaryDocument = document.implementation.createHTMLDocument()\n  const container = temporaryDocument.createElement('div')\n\n  container.appendChild(documentFragment)\n\n  return container.innerHTML\n}\n","import { Schema } from 'prosemirror-model'\n\nimport { ExtensionManager } from '../ExtensionManager'\nimport { Extensions } from '../types'\nimport { getSchemaByResolvedExtensions } from './getSchemaByResolvedExtensions'\n\nexport function getSchema(extensions: Extensions): Schema {\n  const resolvedExtensions = ExtensionManager.resolve(extensions)\n\n  return getSchemaByResolvedExtensions(resolvedExtensions)\n}\n","import { Node } from 'prosemirror-model'\n\nimport { Extensions, JSONContent } from '../types'\nimport { getHTMLFromFragment } from './getHTMLFromFragment'\nimport { getSchema } from './getSchema'\n\nexport function generateHTML(doc: JSONContent, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode.content, schema)\n}\n","import { DOMParser } from 'prosemirror-model'\n\nimport { Extensions } from '../types'\nimport { elementFromString } from '../utilities/elementFromString'\nimport { getSchema } from './getSchema'\n\nexport function generateJSON(html: string, extensions: Extensions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = elementFromString(html)\n\n  return DOMParser.fromSchema(schema)\n    .parse(dom)\n    .toJSON()\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { TextSerializer } from '../types'\nimport { getTextBetween } from './getTextBetween'\n\nexport function getText(\n  node: ProseMirrorNode,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n) {\n  const range = {\n    from: 0,\n    to: node.content.size,\n  }\n\n  return getTextBetween(node, range, options)\n}\n","import { Node } from 'prosemirror-model'\n\nimport { Extensions, JSONContent, TextSerializer } from '../types'\nimport { getSchema } from './getSchema'\nimport { getText } from './getText'\nimport { getTextSerializersFromSchema } from './getTextSerializersFromSchema'\n\nexport function generateText(\n  doc: JSONContent,\n  extensions: Extensions,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...getTextSerializersFromSchema(schema),\n      ...textSerializers,\n    },\n  })\n}\n","import { Mark, MarkType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getMarkType } from './getMarkType'\n\nexport function getMarkAttributes(state: EditorState, typeOrName: string | MarkType): Record<string, any> {\n  const type = getMarkType(typeOrName, state.schema)\n  const { from, to, empty } = state.selection\n  const marks: Mark[] = []\n\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks)\n    }\n\n    marks.push(...state.selection.$head.marks())\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks)\n    })\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name)\n\n  if (!mark) {\n    return {}\n  }\n\n  return { ...mark.attrs }\n}\n","import { Node, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getNodeType } from './getNodeType'\n\nexport function getNodeAttributes(state: EditorState, typeOrName: string | NodeType): Record<string, any> {\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = state.selection\n  const nodes: Node[] = []\n\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node)\n  })\n\n  const node = nodes\n    .reverse()\n    .find(nodeItem => nodeItem.type.name === type.name)\n\n  if (!node) {\n    return {}\n  }\n\n  return { ...node.attrs }\n}\n","import { MarkType, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getMarkAttributes } from './getMarkAttributes'\nimport { getNodeAttributes } from './getNodeAttributes'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\n\nexport function getAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType | MarkType,\n): Record<string, any> {\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName as NodeType)\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName as MarkType)\n  }\n\n  return {}\n}\n","/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nexport function removeDuplicates<T>(array: T[], by = JSON.stringify): T[] {\n  const seen: Record<any, any> = {}\n\n  return array.filter(item => {\n    const key = by(item)\n\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true)\n  })\n}\n","import { Step, Transform } from 'prosemirror-transform'\n\nimport { Range } from '../types'\nimport { removeDuplicates } from '../utilities/removeDuplicates'\n\nexport type ChangedRange = {\n  oldRange: Range,\n  newRange: Range,\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes: ChangedRange[]): ChangedRange[] {\n  const uniqueChanges = removeDuplicates(changes)\n\n  return uniqueChanges.length === 1\n    ? uniqueChanges\n    : uniqueChanges.filter((change, index) => {\n      const rest = uniqueChanges.filter((_, i) => i !== index)\n\n      return !rest.some(otherChange => {\n        return change.oldRange.from >= otherChange.oldRange.from\n          && change.oldRange.to <= otherChange.oldRange.to\n          && change.newRange.from >= otherChange.newRange.from\n          && change.newRange.to <= otherChange.newRange.to\n      })\n    })\n}\n\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nexport function getChangedRanges(transform: Transform): ChangedRange[] {\n  const { mapping, steps } = transform\n  const changes: ChangedRange[] = []\n\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges: Range[] = []\n\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const { from, to } = steps[index] as Step & {\n        from?: number,\n        to?: number,\n      }\n\n      if (from === undefined || to === undefined) {\n        return\n      }\n\n      ranges.push({ from, to })\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({ from, to })\n      })\n    }\n\n    ranges.forEach(({ from, to }) => {\n      const newStart = mapping.slice(index).map(from, -1)\n      const newEnd = mapping.slice(index).map(to)\n      const oldStart = mapping.invert().map(newStart, -1)\n      const oldEnd = mapping.invert().map(newEnd)\n\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd,\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd,\n        },\n      })\n    })\n  })\n\n  return simplifyChangedRanges(changes)\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { JSONContent } from '../types'\n\ninterface DebugJSONContent extends JSONContent {\n  from: number,\n  to: number,\n}\n\nexport function getDebugJSON(node: ProseMirrorNode, startOffset = 0): DebugJSONContent {\n  const isTopNode = node.type === node.type.schema.topNodeType\n  const increment = isTopNode ? 0 : 1\n  const from = startOffset\n  const to = from + node.nodeSize\n  const marks = node.marks.map(mark => {\n    const output: { type: string, attrs?: Record<string, any> } = {\n      type: mark.type.name,\n    }\n\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = { ...mark.attrs }\n    }\n\n    return output\n  })\n  const attrs = { ...node.attrs }\n  const output: DebugJSONContent = {\n    type: node.type.name,\n    from,\n    to,\n  }\n\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs\n  }\n\n  if (marks.length) {\n    output.marks = marks\n  }\n\n  if (node.content.childCount) {\n    output.content = []\n\n    node.forEach((child, offset) => {\n      output.content?.push(getDebugJSON(child, startOffset + offset + increment))\n    })\n  }\n\n  if (node.text) {\n    output.text = node.text\n  }\n\n  return output\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { MarkRange } from '../types'\nimport { getMarkRange } from './getMarkRange'\n\nexport function getMarksBetween(from: number, to: number, doc: ProseMirrorNode): MarkRange[] {\n  const marks: MarkRange[] = []\n\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc\n      .resolve(from)\n      .marks()\n      .forEach(mark => {\n        const $pos = doc.resolve(from - 1)\n        const range = getMarkRange($pos, mark.type)\n\n        if (!range) {\n          return\n        }\n\n        marks.push({\n          mark,\n          ...range,\n        })\n      })\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      marks.push(...node.marks.map(mark => ({\n        from: pos,\n        to: pos + node.nodeSize,\n        mark,\n      })))\n    })\n  }\n\n  return marks\n}\n","import { MarkType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { MarkRange } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getMarkType } from './getMarkType'\n\nexport function isMarkActive(\n  state: EditorState,\n  typeOrName: MarkType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { empty, ranges } = state.selection\n  const type = typeOrName\n    ? getMarkType(typeOrName, state.schema)\n    : null\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks())\n      .filter(mark => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === mark.type.name\n      })\n      .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }))\n  }\n\n  let selectionRange = 0\n  const markRanges: MarkRange[] = []\n\n  ranges.forEach(({ $from, $to }) => {\n    const from = $from.pos\n    const to = $to.pos\n\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return\n      }\n\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n      const range = relativeTo - relativeFrom\n\n      selectionRange += range\n\n      markRanges.push(...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo,\n      })))\n    })\n  })\n\n  if (selectionRange === 0) {\n    return false\n  }\n\n  // calculate range of matched mark\n  const matchedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === markRange.mark.type.name\n    })\n    .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return markRange.mark.type !== type\n        && markRange.mark.type.excludes(type)\n    })\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0\n    ? matchedRange + excludedRange\n    : matchedRange\n\n  return range >= selectionRange\n}\n","import { EditorState } from 'prosemirror-state'\n\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\nimport { isMarkActive } from './isMarkActive'\nimport { isNodeActive } from './isNodeActive'\n\nexport function isActive(state: EditorState, name: string | null, attributes: Record<string, any> = {}): boolean {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes)\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema)\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes)\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes)\n  }\n\n  return false\n}\n","import { NodeConfig } from '..'\nimport { getExtensionField } from '../helpers/getExtensionField'\nimport { Extensions } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { splitExtensions } from './splitExtensions'\n\nexport function isList(name: string, extensions: Extensions): boolean {\n  const { nodeExtensions } = splitExtensions(extensions)\n  const extension = nodeExtensions.find(item => item.name === name)\n\n  if (!extension) {\n    return false\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage,\n  }\n  const group = callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context))\n\n  if (typeof group !== 'string') {\n    return false\n  }\n\n  return group.split(' ').includes('list')\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nexport function isNodeEmpty(node: ProseMirrorNode): boolean {\n  const defaultContent = node.type.createAndFill()?.toJSON()\n  const content = node.toJSON()\n\n  return JSON.stringify(defaultContent) === JSON.stringify(content)\n}\n","import { NodeSelection } from 'prosemirror-state'\n\nexport function isNodeSelection(value: unknown): value is NodeSelection {\n  return value instanceof NodeSelection\n}\n","import { EditorView } from 'prosemirror-view'\n\nimport { minMax } from '../utilities/minMax'\n\nexport function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n","import { MarkType, ResolvedPos } from 'prosemirror-model'\nimport { EditorState, Transaction } from 'prosemirror-state'\n\nimport { isTextSelection } from '../helpers'\nimport { getMarkAttributes } from '../helpers/getMarkAttributes'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMark: {\n      /**\n       * Add a mark with new attributes.\n       */\n      setMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nfunction canSetMark(state: EditorState, tr: Transaction, newMarkType: MarkType) {\n  const { selection } = tr\n  let cursor: ResolvedPos | null = null\n\n  if (isTextSelection(selection)) {\n    cursor = selection.$cursor\n  }\n\n  if (cursor) {\n    const currentMarks = state.storedMarks ?? cursor.marks()\n\n    // There can be no current marks that exclude the new mark\n    return !!newMarkType.isInSet(currentMarks) || !currentMarks.some(mark => mark.type.excludes(newMarkType))\n  }\n\n  const { ranges } = selection\n\n  return ranges.some(({ $from, $to }) => {\n    let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false\n\n    state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\n      // If we already found a mark that we can enable, return false to bypass the remaining search\n      if (someNodeSupportsMark) {\n        return false\n      }\n\n      if (node.isInline) {\n        const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType)\n        const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType))\n\n        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType\n      }\n      return !someNodeSupportsMark\n    })\n\n    return someNodeSupportsMark\n  })\n\n}\nexport const setMark: RawCommands['setMark'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n  const type = getMarkType(typeOrName, state.schema)\n\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type)\n\n      tr.addStoredMark(type.create({\n        ...oldAttributes,\n        ...attributes,\n      }))\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos\n        const to = range.$to.pos\n\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from)\n          const trimmedTo = Math.min(pos + node.nodeSize, to)\n          const someHasMark = node.marks.find(mark => mark.type === type)\n\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                  ...mark.attrs,\n                  ...attributes,\n                }))\n              }\n            })\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes))\n          }\n        })\n      })\n    }\n  }\n\n  return canSetMark(state, tr, type)\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMeta: {\n      /**\n       * Store a metadata property in the current transaction.\n       */\n      setMeta: (key: string, value: any) => ReturnType,\n    }\n  }\n}\n\nexport const setMeta: RawCommands['setMeta'] = (key, value) => ({ tr }) => {\n  tr.setMeta(key, value)\n\n  return true\n}\n","import { setBlockType } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNode: {\n      /**\n       * Replace a given range with a node.\n       */\n      setNode: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const setNode: RawCommands['setNode'] = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.')\n\n    return false\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(({ commands }) => {\n      const canSetBlock = setBlockType(type, attributes)(state)\n\n      if (canSetBlock) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .command(({ state: updatedState }) => {\n      return setBlockType(type, attributes)(updatedState, dispatch)\n    })\n    .run()\n}\n","import { NodeSelection } from 'prosemirror-state'\n\nimport { RawCommands } from '../types'\nimport { minMax } from '../utilities/minMax'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNodeSelection: {\n      /**\n       * Creates a NodeSelection.\n       */\n      setNodeSelection: (position: number) => ReturnType,\n    }\n  }\n}\n\nexport const setNodeSelection: RawCommands['setNodeSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const from = minMax(position, 0, doc.content.size)\n    const selection = NodeSelection.create(doc, from)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { TextSelection } from 'prosemirror-state'\n\nimport { Range, RawCommands } from '../types'\nimport { minMax } from '../utilities/minMax'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setTextSelection: {\n      /**\n       * Creates a TextSelection.\n       */\n      setTextSelection: (position: number | Range) => ReturnType,\n    }\n  }\n}\n\nexport const setTextSelection: RawCommands['setTextSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n    const minPos = TextSelection.atStart(doc).from\n    const maxPos = TextSelection.atEnd(doc).to\n    const resolvedFrom = minMax(from, minPos, maxPos)\n    const resolvedEnd = minMax(to, minPos, maxPos)\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { NodeType } from 'prosemirror-model'\nimport { sinkListItem as originalSinkListItem } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    sinkListItem: {\n      /**\n       * Sink the list item down into an inner list.\n       */\n      sinkListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const sinkListItem: RawCommands['sinkListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalSinkListItem(type)(state, dispatch)\n}\n","import { ExtensionAttribute } from '../types'\n\nexport function getSplittedAttributes(\n  extensionAttributes: ExtensionAttribute[],\n  typeName: string,\n  attributes: Record<string, any>,\n): Record<string, any> {\n  return Object.fromEntries(Object\n    .entries(attributes)\n    .filter(([name]) => {\n      const extensionAttribute = extensionAttributes.find(item => {\n        return item.type === typeName && item.name === name\n      })\n\n      if (!extensionAttribute) {\n        return false\n      }\n\n      return extensionAttribute.attribute.keepOnSplit\n    }))\n}\n","import { EditorState, NodeSelection, TextSelection } from 'prosemirror-state'\nimport { canSplit } from 'prosemirror-transform'\n\nimport { defaultBlockAt } from '../helpers/defaultBlockAt'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\nimport { RawCommands } from '../types'\n\nfunction ensureMarks(state: EditorState, splittableMarks?: string[]) {\n  const marks = state.storedMarks\n    || (state.selection.$to.parentOffset && state.selection.$from.marks())\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks?.includes(mark.type.name))\n\n    state.tr.ensureMarks(filteredMarks)\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitBlock: {\n      /**\n       * Forks a new node from an existing node.\n       */\n      splitBlock: (options?: { keepMarks?: boolean }) => ReturnType,\n    }\n  }\n}\n\nexport const splitBlock: RawCommands['splitBlock'] = ({ keepMarks = true } = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor,\n}) => {\n  const { selection, doc } = tr\n  const { $from, $to } = selection\n  const extensionAttributes = editor.extensionManager.attributes\n  const newAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false\n    }\n\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks)\n      }\n\n      tr.split($from.pos).scrollIntoView()\n    }\n\n    return true\n  }\n\n  if (!$from.parent.isBlock) {\n    return false\n  }\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset === $to.parent.content.size\n\n    if (selection instanceof TextSelection) {\n      tr.deleteSelection()\n    }\n\n    const deflt = $from.depth === 0\n      ? undefined\n      : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n\n    let types = atEnd && deflt\n      ? [{\n        type: deflt,\n        attrs: newAttributes,\n      }]\n      : undefined\n\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n\n    if (\n      !types\n      && !can\n      && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)\n    ) {\n      can = true\n      types = deflt\n        ? [{\n          type: deflt,\n          attrs: newAttributes,\n        }]\n        : undefined\n    }\n\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n\n      if (\n        deflt\n        && !atEnd\n        && !$from.parentOffset\n        && $from.parent.type !== deflt\n      ) {\n        const first = tr.mapping.map($from.before())\n        const $first = tr.doc.resolve(first)\n\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n        }\n      }\n    }\n\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks)\n    }\n\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import {\n  Fragment,\n  Node as ProseMirrorNode,\n  NodeType,\n  Slice,\n} from 'prosemirror-model'\nimport { TextSelection } from 'prosemirror-state'\nimport { canSplit } from 'prosemirror-transform'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitListItem: {\n      /**\n       * Splits one list item into two list items.\n       */\n      splitListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const splitListItem: RawCommands['splitListItem'] = typeOrName => ({\n  tr, state, dispatch, editor,\n}) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const { $from, $to } = state.selection\n\n  // @ts-ignore\n  // eslint-disable-next-line\n  const node: ProseMirrorNode = state.selection.node\n\n  if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n    return false\n  }\n\n  const grandParent = $from.node(-1)\n\n  if (grandParent.type !== type) {\n    return false\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if (\n      $from.depth === 2\n      || $from.node(-3).type !== type\n      || $from.index(-2) !== $from.node(-2).childCount - 1\n    ) {\n      return false\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty\n      // eslint-disable-next-line\n      const depthBefore = $from.index(-1)\n        ? 1\n        : $from.index(-2)\n          ? 2\n          : 3\n\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap))\n      }\n\n      // eslint-disable-next-line\n      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount\n        ? 1\n        : $from.indexAfter(-2) < $from.node(-3).childCount\n          ? 2\n          : 3\n\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = getSplittedAttributes(\n        extensionAttributes,\n        $from.node().type.name,\n        $from.node().attrs,\n      )\n      const nextType = type.contentMatch.defaultType?.createAndFill(newNextTypeAttributes) || undefined\n\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined))\n\n      const start = $from.before($from.depth - (depthBefore - 1))\n\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n\n      let sel = -1\n\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false\n        }\n\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1\n        }\n      })\n\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)))\n      }\n\n      tr.scrollIntoView()\n    }\n\n    return true\n  }\n\n  const nextType = $to.pos === $from.end()\n    ? grandParent.contentMatchAt(0).defaultType\n    : null\n\n  const newTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    grandParent.type.name,\n    grandParent.attrs,\n  )\n  const newNextTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  tr.delete($from.pos, $to.pos)\n\n  const types = nextType\n    ? [{ type, attrs: newTypeAttributes }, { type: nextType, attrs: newNextTypeAttributes }]\n    : [{ type, attrs: newTypeAttributes }]\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false\n  }\n\n  if (dispatch) {\n    tr.split($from.pos, 2, types).scrollIntoView()\n  }\n\n  return true\n}\n","import { NodeType } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { canJoin } from 'prosemirror-transform'\n\nimport { findParentNode } from '../helpers/findParentNode'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isList } from '../helpers/isList'\nimport { RawCommands } from '../types'\n\nconst joinListBackwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth)\n\n  if (before === undefined) {\n    return true\n  }\n\n  const nodeBefore = tr.doc.nodeAt(before)\n  const canJoinBackwards = list.node.type === nodeBefore?.type\n    && canJoin(tr.doc, list.pos)\n\n  if (!canJoinBackwards) {\n    return true\n  }\n\n  tr.join(list.pos)\n\n  return true\n}\n\nconst joinListForwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const after = tr.doc.resolve(list.start).after(list.depth)\n\n  if (after === undefined) {\n    return true\n  }\n\n  const nodeAfter = tr.doc.nodeAt(after)\n  const canJoinForwards = list.node.type === nodeAfter?.type\n    && canJoin(tr.doc, after)\n\n  if (!canJoinForwards) {\n    return true\n  }\n\n  tr.join(after)\n\n  return true\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleList: {\n      /**\n       * Toggle between different list types.\n       */\n      toggleList: (listTypeOrName: string | NodeType, itemTypeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const toggleList: RawCommands['toggleList'] = (listTypeOrName, itemTypeOrName) => ({\n  editor, tr, state, dispatch, chain, commands, can,\n}) => {\n  const { extensions } = editor.extensionManager\n  const listType = getNodeType(listTypeOrName, state.schema)\n  const itemType = getNodeType(itemTypeOrName, state.schema)\n  const { selection } = state\n  const { $from, $to } = selection\n  const range = $from.blockRange($to)\n\n  if (!range) {\n    return false\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection)\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType)\n    }\n\n    // change list type\n    if (\n      isList(parentList.node.type.name, extensions)\n      && listType.validContent(parentList.node.content)\n      && dispatch\n    ) {\n      return chain()\n        .command(() => {\n          tr.setNodeMarkup(parentList.pos, listType)\n\n          return true\n        })\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run()\n    }\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(() => {\n      const canWrapInList = can().wrapInList(listType)\n\n      if (canWrapInList) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .wrapInList(listType)\n    .command(() => joinListBackwards(tr, listType))\n    .command(() => joinListForwards(tr, listType))\n    .run()\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { isMarkActive } from '../helpers/isMarkActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleMark: {\n      /**\n       * Toggle a mark on and off.\n       */\n      toggleMark: (\n        typeOrName: string | MarkType,\n        attributes?: Record<string, any>,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const toggleMark: RawCommands['toggleMark'] = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n  const { extendEmptyMarkRange = false } = options\n  const type = getMarkType(typeOrName, state.schema)\n  const isActive = isMarkActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.unsetMark(type, { extendEmptyMarkRange })\n  }\n\n  return commands.setMark(type, attributes)\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleNode: {\n      /**\n       * Toggle a node with another node.\n       */\n      toggleNode: (typeOrName: string | NodeType, toggleTypeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleNode: RawCommands['toggleNode'] = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const toggleType = getNodeType(toggleTypeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.setNode(toggleType)\n  }\n\n  return commands.setNode(type, attributes)\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleWrap: {\n      /**\n       * Wraps nodes in another node, or removes an existing wrap.\n       */\n      toggleWrap: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleWrap: RawCommands['toggleWrap'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.lift(type)\n  }\n\n  return commands.wrapIn(type, attributes)\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    undoInputRule: {\n      /**\n       * Undo an input rule.\n       */\n      undoInputRule: () => ReturnType,\n    }\n  }\n}\n\nexport const undoInputRule: RawCommands['undoInputRule'] = () => ({ state, dispatch }) => {\n  const plugins = state.plugins\n\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i]\n    let undoable\n\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr\n        const toUndo = undoable.transform\n\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        }\n\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks()\n\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks))\n        } else {\n          tr.delete(undoable.from, undoable.to)\n        }\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetAllMarks: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetAllMarks: () => ReturnType,\n    }\n  }\n}\n\nexport const unsetAllMarks: RawCommands['unsetAllMarks'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n\n  if (empty) {\n    return true\n  }\n\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos)\n    })\n  }\n\n  return true\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarkRange } from '../helpers/getMarkRange'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetMark: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetMark: (\n        typeOrName: string | MarkType,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const unsetMark: RawCommands['unsetMark'] = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n  const { extendEmptyMarkRange = false } = options\n  const { selection } = tr\n  const type = getMarkType(typeOrName, state.schema)\n  const { $from, empty, ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  if (empty && extendEmptyMarkRange) {\n    let { from, to } = selection\n    const attrs = $from.marks().find(mark => mark.type === type)?.attrs\n    const range = getMarkRange($from, type, attrs)\n\n    if (range) {\n      from = range.from\n      to = range.to\n    }\n\n    tr.removeMark(from, to, type)\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type)\n    })\n  }\n\n  tr.removeStoredMark(type)\n\n  return true\n}\n","import { MarkType, NodeType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    updateAttributes: {\n      /**\n       * Update attributes of a node or mark.\n       */\n      updateAttributes: (typeOrName: string | NodeType | MarkType, attributes: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const updateAttributes: RawCommands['updateAttributes'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos\n      const to = range.$to.pos\n\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes,\n          })\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from)\n              const trimmedTo = Math.min(pos + node.nodeSize, to)\n\n              tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                ...mark.attrs,\n                ...attributes,\n              }))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { wrapIn as originalWrapIn } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapIn: {\n      /**\n       * Wraps nodes in another node.\n       */\n      wrapIn: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapIn: RawCommands['wrapIn'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapIn(type, attributes)(state, dispatch)\n}\n","import { NodeType } from 'prosemirror-model'\nimport { wrapInList as originalWrapInList } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapInList: {\n      /**\n       * Wrap a node in a list.\n       */\n      wrapInList: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapInList: RawCommands['wrapInList'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapInList(type, attributes)(state, dispatch)\n}\n","import * as commands from '../commands'\nimport { Extension } from '../Extension'\n\nexport * from '../commands'\n\nexport const Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return {\n      ...commands,\n    }\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('editable'),\n        props: {\n          editable: () => this.editor.options.editable,\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const { editor } = this\n\n    return [\n      new Plugin({\n        key: new PluginKey('focusEvents'),\n        props: {\n          handleDOMEvents: {\n            focus: (view, event: Event) => {\n              editor.isFocused = true\n\n              const transaction = editor.state.tr\n                .setMeta('focus', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n            blur: (view, event: Event) => {\n              editor.isFocused = false\n\n              const transaction = editor.state.tr\n                .setMeta('blur', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey, Selection } from 'prosemirror-state'\n\nimport { CommandManager } from '../CommandManager'\nimport { Extension } from '../Extension'\nimport { createChainableState } from '../helpers/createChainableState'\nimport { isiOS } from '../utilities/isiOS'\nimport { isMacOS } from '../utilities/isMacOS'\n\nexport const Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n      () => commands.undoInputRule(),\n      // maybe convert first text block node to default node\n      () => commands.command(({ tr }) => {\n        const { selection, doc } = tr\n        const { empty, $anchor } = selection\n        const { pos, parent } = $anchor\n        const isAtStart = Selection.atStart(doc).from === pos\n\n        if (\n          !empty\n          || !isAtStart\n          || !parent.type.isTextblock\n          || parent.textContent.length\n        ) {\n          return false\n        }\n\n        return commands.clearNodes()\n      }),\n      () => commands.deleteSelection(),\n      () => commands.joinBackward(),\n      () => commands.selectNodeBackward(),\n    ])\n\n    const handleDelete = () => this.editor.commands.first(({ commands }) => [\n      () => commands.deleteSelection(),\n      () => commands.deleteCurrentNode(),\n      () => commands.joinForward(),\n      () => commands.selectNodeForward(),\n    ])\n\n    const handleEnter = () => this.editor.commands.first(({ commands }) => [\n      () => commands.newlineInCode(),\n      () => commands.createParagraphNear(),\n      () => commands.liftEmptyBlock(),\n      () => commands.splitBlock(),\n    ])\n\n    const baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll(),\n    }\n\n    const pcKeymap = {\n      ...baseKeymap,\n    }\n\n    const macKeymap = {\n      ...baseKeymap,\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n      'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\n    }\n\n    if (isiOS() || isMacOS()) {\n      return macKeymap\n    }\n\n    return pcKeymap\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // With this plugin we check if the whole document was selected and deleted.\n      // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n      // to a paragraph if necessary.\n      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n      // with many other commands.\n      new Plugin({\n        key: new PluginKey('clearDocument'),\n        appendTransaction: (transactions, oldState, newState) => {\n          const docChanges = transactions.some(transaction => transaction.docChanged)\n            && !oldState.doc.eq(newState.doc)\n\n          if (!docChanges) {\n            return\n          }\n\n          const { empty, from, to } = oldState.selection\n          const allFrom = Selection.atStart(oldState.doc).from\n          const allEnd = Selection.atEnd(oldState.doc).to\n          const allWasSelected = from === allFrom && to === allEnd\n          const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0\n\n          if (empty || !allWasSelected || !isEmpty) {\n            return\n          }\n\n          const tr = newState.tr\n          const state = createChainableState({\n            state: newState,\n            transaction: tr,\n          })\n          const { commands } = new CommandManager({\n            editor: this.editor,\n            state,\n          })\n\n          commands.clearNodes()\n\n          if (!tr.steps.length) {\n            return\n          }\n\n          return tr\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const Tabindex = Extension.create({\n  name: 'tabindex',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('tabindex'),\n        props: {\n          attributes: this.editor.isEditable ? { tabindex: '0' } : {},\n        },\n      }),\n    ]\n  },\n})\n","export const style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`\n","export function createStyleTag(style: string, nonce?: string): HTMLStyleElement {\n  const tipTapStyleTag = (<HTMLStyleElement>document.querySelector('style[data-tiptap-style]'))\n\n  if (tipTapStyleTag !== null) {\n    return tipTapStyleTag\n  }\n\n  const styleNode = document.createElement('style')\n\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce)\n  }\n\n  styleNode.setAttribute('data-tiptap-style', '')\n  styleNode.innerHTML = style\n  document.getElementsByTagName('head')[0].appendChild(styleNode)\n\n  return styleNode\n}\n","import { MarkType, NodeType, Schema } from 'prosemirror-model'\nimport {\n  EditorState,\n  Plugin,\n  PluginKey,\n  Transaction,\n} from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\n\nimport { CommandManager } from './CommandManager'\nimport { EventEmitter } from './EventEmitter'\nimport { ExtensionManager } from './ExtensionManager'\nimport * as extensions from './extensions'\nimport { createDocument } from './helpers/createDocument'\nimport { getAttributes } from './helpers/getAttributes'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment'\nimport { getText } from './helpers/getText'\nimport { getTextSerializersFromSchema } from './helpers/getTextSerializersFromSchema'\nimport { isActive } from './helpers/isActive'\nimport { isNodeEmpty } from './helpers/isNodeEmpty'\nimport { resolveFocusPosition } from './helpers/resolveFocusPosition'\nimport { style } from './style'\nimport {\n  CanCommands,\n  ChainedCommands,\n  EditorEvents,\n  EditorOptions,\n  JSONContent,\n  SingleCommands,\n  TextSerializer,\n} from './types'\nimport { createStyleTag } from './utilities/createStyleTag'\nimport { isFunction } from './utilities/isFunction'\n\nexport { extensions }\n\nexport interface HTMLElement {\n  editor?: Editor\n}\n\nexport class Editor extends EventEmitter<EditorEvents> {\n\n  private commandManager!: CommandManager\n\n  public extensionManager!: ExtensionManager\n\n  private css!: HTMLStyleElement\n\n  public schema!: Schema\n\n  public view!: EditorView\n\n  public isFocused = false\n\n  public extensionStorage: Record<string, any> = {}\n\n  public options: EditorOptions = {\n    element: document.createElement('div'),\n    content: '',\n    injectCSS: true,\n    injectNonce: undefined,\n    extensions: [],\n    autofocus: false,\n    editable: true,\n    editorProps: {},\n    parseOptions: {},\n    enableInputRules: true,\n    enablePasteRules: true,\n    enableCoreExtensions: true,\n    onBeforeCreate: () => null,\n    onCreate: () => null,\n    onUpdate: () => null,\n    onSelectionUpdate: () => null,\n    onTransaction: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n    onDestroy: () => null,\n  }\n\n  constructor(options: Partial<EditorOptions> = {}) {\n    super()\n    this.setOptions(options)\n    this.createExtensionManager()\n    this.createCommandManager()\n    this.createSchema()\n    this.on('beforeCreate', this.options.onBeforeCreate)\n    this.emit('beforeCreate', { editor: this })\n    this.createView()\n    this.injectCSS()\n    this.on('create', this.options.onCreate)\n    this.on('update', this.options.onUpdate)\n    this.on('selectionUpdate', this.options.onSelectionUpdate)\n    this.on('transaction', this.options.onTransaction)\n    this.on('focus', this.options.onFocus)\n    this.on('blur', this.options.onBlur)\n    this.on('destroy', this.options.onDestroy)\n\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return\n      }\n\n      this.commands.focus(this.options.autofocus)\n      this.emit('create', { editor: this })\n    }, 0)\n  }\n\n  /**\n   * Returns the editor storage.\n   */\n  public get storage(): Record<string, any> {\n    return this.extensionStorage\n  }\n\n  /**\n   * An object of all registered commands.\n   */\n  public get commands(): SingleCommands {\n    return this.commandManager.commands\n  }\n\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  public chain(): ChainedCommands {\n    return this.commandManager.chain()\n  }\n\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  public can(): CanCommands {\n    return this.commandManager.can()\n  }\n\n  /**\n   * Inject CSS styles.\n   */\n  private injectCSS(): void {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style, this.options.injectNonce)\n    }\n  }\n\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  public setOptions(options: Partial<EditorOptions> = {}): void {\n    this.options = {\n      ...this.options,\n      ...options,\n    }\n\n    if (!this.view || !this.state || this.isDestroyed) {\n      return\n    }\n\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps)\n    }\n\n    this.view.updateState(this.state)\n  }\n\n  /**\n   * Update editable state of the editor.\n   */\n  public setEditable(editable: boolean): void {\n    this.setOptions({ editable })\n    this.emit('update', { editor: this, transaction: this.state.tr })\n  }\n\n  /**\n   * Returns whether the editor is editable.\n   */\n  public get isEditable(): boolean {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable\n      && this.view\n      && this.view.editable\n  }\n\n  /**\n   * Returns the editor state.\n   */\n  public get state(): EditorState {\n    return this.view.state\n  }\n\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   */\n  public registerPlugin(plugin: Plugin, handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[]): void {\n    const plugins = isFunction(handlePlugins)\n      ? handlePlugins(plugin, [...this.state.plugins])\n      : [...this.state.plugins, plugin]\n\n    const state = this.state.reconfigure({ plugins })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param nameOrPluginKey The plugins name\n   */\n  public unregisterPlugin(nameOrPluginKey: string | PluginKey): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    const name = typeof nameOrPluginKey === 'string'\n      ? `${nameOrPluginKey}$`\n      // @ts-ignore\n      : nameOrPluginKey.key\n\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\n    })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Creates an extension manager.\n   */\n  private createExtensionManager(): void {\n    const coreExtensions = this.options.enableCoreExtensions\n      ? Object.values(extensions)\n      : []\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension?.type)\n    })\n\n    this.extensionManager = new ExtensionManager(allExtensions, this)\n  }\n\n  /**\n   * Creates an command manager.\n   */\n  private createCommandManager(): void {\n    this.commandManager = new CommandManager({\n      editor: this,\n    })\n  }\n\n  /**\n   * Creates a ProseMirror schema.\n   */\n  private createSchema(): void {\n    this.schema = this.extensionManager.schema\n  }\n\n  /**\n   * Creates a ProseMirror view.\n   */\n  private createView(): void {\n    const doc = createDocument(this.options.content, this.schema, this.options.parseOptions)\n    const selection = resolveFocusPosition(doc, this.options.autofocus)\n\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection: selection || undefined,\n      }),\n    })\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    })\n\n    this.view.updateState(newState)\n\n    this.createNodeViews()\n\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    const dom = this.view.dom as HTMLElement\n\n    dom.editor = this\n  }\n\n  /**\n   * Creates all node views.\n   */\n  public createNodeViews(): void {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews,\n    })\n  }\n\n  public isCapturingTransaction = false\n\n  private capturedTransaction: Transaction | null = null\n\n  public captureTransaction(fn: Function) {\n    this.isCapturingTransaction = true\n    fn()\n    this.isCapturingTransaction = false\n\n    const tr = this.capturedTransaction\n\n    this.capturedTransaction = null\n\n    return tr\n  }\n\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  private dispatchTransaction(transaction: Transaction): void {\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction\n\n        return\n      }\n\n      transaction.steps.forEach(step => this.capturedTransaction?.step(step))\n\n      return\n    }\n\n    const state = this.state.apply(transaction)\n    const selectionHasChanged = !this.state.selection.eq(state.selection)\n\n    this.view.updateState(state)\n    this.emit('transaction', {\n      editor: this,\n      transaction,\n    })\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction,\n      })\n    }\n\n    const focus = transaction.getMeta('focus')\n    const blur = transaction.getMeta('blur')\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction,\n      })\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction,\n      })\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction,\n    })\n  }\n\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  public getAttributes(nameOrType: string | NodeType | MarkType): Record<string, any> {\n    return getAttributes(this.state, nameOrType)\n  }\n\n  /**\n   * Returns if the currently selected node or mark is active.\n   *\n   * @param name Name of the node or mark\n   * @param attributes Attributes of the node or mark\n   */\n  public isActive(name: string, attributes?: {}): boolean;\n  public isActive(attributes: {}): boolean;\n  public isActive(nameOrAttributes: string, attributesOrUndefined?: {}): boolean {\n    const name = typeof nameOrAttributes === 'string'\n      ? nameOrAttributes\n      : null\n\n    const attributes = typeof nameOrAttributes === 'string'\n      ? attributesOrUndefined\n      : nameOrAttributes\n\n    return isActive(this.state, name, attributes)\n  }\n\n  /**\n   * Get the document as JSON.\n   */\n  public getJSON(): JSONContent {\n    return this.state.doc.toJSON()\n  }\n\n  /**\n   * Get the document as HTML.\n   */\n  public getHTML(): string {\n    return getHTMLFromFragment(this.state.doc.content, this.schema)\n  }\n\n  /**\n   * Get the document as text.\n   */\n  public getText(options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  }): string {\n    const {\n      blockSeparator = '\\n\\n',\n      textSerializers = {},\n    } = options || {}\n\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...textSerializers,\n        ...getTextSerializersFromSchema(this.schema),\n      },\n    })\n  }\n\n  /**\n   * Check if there is no content.\n   */\n  public get isEmpty(): boolean {\n    return isNodeEmpty(this.state.doc)\n  }\n\n  /**\n   * Get the number of characters for the current document.\n   *\n   * @deprecated\n   */\n  public getCharacterCount(): number {\n    console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.')\n\n    return this.state.doc.content.size - 2\n  }\n\n  /**\n   * Destroy the editor.\n   */\n  public destroy(): void {\n    this.emit('destroy')\n\n    if (this.view) {\n      this.view.destroy()\n    }\n\n    this.removeAllListeners()\n  }\n\n  /**\n   * Check if the editor is already destroyed.\n   */\n  public get isDestroyed(): boolean {\n    // @ts-ignore\n    return !this.view?.docView\n  }\n\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n */\nexport function markInputRule(config: {\n  find: InputRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n */\nexport function nodeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const { tr } = state\n      const start = range.from\n      let end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n        let matchStart = start + offset\n\n        if (matchStart > end) {\n          matchStart = end\n        } else {\n          end = matchStart + match[1].length\n        }\n\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1]\n\n        tr.insertText(lastChar, start + match[0].length - 1)\n\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, config.type.create(attributes))\n      } else if (match[0]) {\n        tr.replaceWith(start, end, config.type.create(attributes))\n      }\n    },\n  })\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n */\nexport function textblockTypeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const $start = state.doc.resolve(range.from)\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null\n      }\n\n      state.tr\n        .delete(range.from, range.to)\n        .setBlockType(range.from, range.from, config.type, attributes)\n    },\n  })\n}\n","import { InputRule, InputRuleFinder } from '../InputRule'\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n */\nexport function textInputRule(config: {\n  find: InputRuleFinder,\n  replace: string,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Node as ProseMirrorNode, NodeType } from 'prosemirror-model'\nimport { canJoin, findWrapping } from 'prosemirror-transform'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n */\nexport function wrappingInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n  joinPredicate?: (match: ExtendedRegExpMatchArray, node: ProseMirrorNode) => boolean,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const tr = state.tr.delete(range.from, range.to)\n      const $start = tr.doc.resolve(range.from)\n      const blockRange = $start.blockRange()\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes)\n\n      if (!wrapping) {\n        return null\n      }\n\n      tr.wrap(blockRange, wrapping)\n\n      const before = tr.doc.resolve(range.from - 1).nodeBefore\n\n      if (\n        before\n        && before.type === config.type\n        && canJoin(tr.doc, range.from - 1)\n        && (!config.joinPredicate || config.joinPredicate(match, before))\n      ) {\n        tr.join(range.from - 1)\n      }\n    },\n  })\n}\n","import {\n  DOMOutputSpec,\n  Mark as ProseMirrorMark,\n  MarkSpec,\n  MarkType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\n\nimport { MarkConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { Node } from './Node'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  export interface MarkConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Keep mark after split node\n     */\n    keepOnSplit?: boolean | (() => boolean),\n\n    /**\n     * Inclusive\n     */\n    inclusive?: MarkSpec['inclusive'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['inclusive'],\n    }) => MarkSpec['inclusive']),\n\n    /**\n     * Excludes\n     */\n    excludes?: MarkSpec['excludes'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['excludes'],\n    }) => MarkSpec['excludes']),\n\n    /**\n     * Marks this Mark as exitable\n     */\n    exitable?: boolean | (() => boolean),\n\n    /**\n     * Group\n     */\n    group?: MarkSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['group'],\n    }) => MarkSpec['group']),\n\n    /**\n     * Spanning\n     */\n    spanning?: MarkSpec['spanning'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['spanning'],\n    }) => MarkSpec['spanning']),\n\n    /**\n     * Code\n     */\n    code?: boolean | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['code'],\n    }) => boolean),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => MarkSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        mark: ProseMirrorMark,\n        HTMLAttributes: Record<string, any>,\n      },\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Mark<Options = any, Storage = any> {\n  type = 'mark'\n\n  name = 'mark'\n\n  parent: Mark | null = null\n\n  child: Mark | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: MarkConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<MarkConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<MarkConfig<O, S>> = {}) {\n    return new Mark<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<MarkConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Mark<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  static handleExit({\n    editor,\n    mark,\n  }: {\n    editor: Editor\n    mark: Mark\n  }) {\n    const { tr } = editor.state\n    const currentPos = editor.state.selection.$from\n    const isAtEnd = currentPos.pos === currentPos.end()\n\n    if (isAtEnd) {\n      const currentMarks = currentPos.marks()\n      const isInMark = !!currentMarks.find(m => m?.type.name === mark.name)\n\n      if (!isInMark) {\n        return false\n      }\n\n      const removeMark = currentMarks.find(m => m?.type.name === mark.name)\n\n      if (removeMark) {\n        tr.removeStoredMark(removeMark)\n      }\n      tr.insertText(' ', currentPos.pos)\n\n      editor.view.dispatch(tr)\n\n      return true\n    }\n\n    return false\n  }\n}\n","import {\n  DOMOutputSpec,\n  Node as ProseMirrorNode,\n  NodeSpec,\n  NodeType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\n\nimport { NodeConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  NodeViewRenderer,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Node View\n     */\n    addNodeView?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addNodeView'],\n    }) => NodeViewRenderer) | null,\n\n    /**\n     * TopNode\n     */\n    topNode?: boolean,\n\n    /**\n     * Content\n     */\n    content?: NodeSpec['content'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['content'],\n    }) => NodeSpec['content']),\n\n    /**\n     * Marks\n     */\n    marks?: NodeSpec['marks'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['marks'],\n    }) => NodeSpec['marks']),\n\n    /**\n     * Group\n     */\n    group?: NodeSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['group'],\n    }) => NodeSpec['group']),\n\n    /**\n     * Inline\n     */\n    inline?: NodeSpec['inline'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['inline'],\n    }) => NodeSpec['inline']),\n\n    /**\n     * Atom\n     */\n    atom?: NodeSpec['atom'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['atom'],\n    }) => NodeSpec['atom']),\n\n    /**\n     * Selectable\n     */\n    selectable?: NodeSpec['selectable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['selectable'],\n    }) => NodeSpec['selectable']),\n\n    /**\n     * Draggable\n     */\n    draggable?: NodeSpec['draggable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['draggable'],\n    }) => NodeSpec['draggable']),\n\n    /**\n     * Code\n     */\n    code?: NodeSpec['code'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['code'],\n    }) => NodeSpec['code']),\n\n    /**\n     * Whitespace\n     */\n    whitespace?: NodeSpec['whitespace'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['whitespace'],\n    }) => NodeSpec['whitespace']),\n\n    /**\n     * Defining\n     */\n    defining?: NodeSpec['defining'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['defining'],\n    }) => NodeSpec['defining']),\n\n    /**\n     * Isolating\n     */\n    isolating?: NodeSpec['isolating'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['isolating'],\n    }) => NodeSpec['isolating']),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => NodeSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        HTMLAttributes: Record<string, any>,\n      }\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Render Text\n     */\n    renderText?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderText'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        pos: number,\n        parent: ProseMirrorNode,\n        index: number,\n      }\n    ) => string) | null,\n\n    /**\n     * Add Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Node<Options = any, Storage = any> {\n  type = 'node'\n\n  name = 'node'\n\n  parent: Node | null = null\n\n  child: Node | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: NodeConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<NodeConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<NodeConfig<O, S>> = {}) {\n    return new Node<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<NodeConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Node<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n","import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { NodeSelection } from 'prosemirror-state'\nimport { Decoration, NodeView as ProseMirrorNodeView } from 'prosemirror-view'\n\nimport { Editor as CoreEditor } from './Editor'\nimport { Node } from './Node'\nimport { NodeViewRendererOptions, NodeViewRendererProps } from './types'\nimport { isiOS } from './utilities/isiOS'\n\nexport class NodeView<\n  Component,\n  Editor extends CoreEditor = CoreEditor,\n  Options extends NodeViewRendererOptions = NodeViewRendererOptions,\n> implements ProseMirrorNodeView {\n\n  component: Component\n\n  editor: Editor\n\n  options: Options\n\n  extension: Node\n\n  node: ProseMirrorNode\n\n  decorations: Decoration[]\n\n  getPos: any\n\n  isDragging = false\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<Options>) {\n    this.component = component\n    this.editor = props.editor as Editor\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options,\n    } as Options\n    this.extension = props.extension\n    this.node = props.node\n    this.decorations = props.decorations\n    this.getPos = props.getPos\n    this.mount()\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return\n  }\n\n  get dom(): HTMLElement {\n    return this.editor.view.dom as HTMLElement\n  }\n\n  get contentDOM(): HTMLElement | null {\n    return null\n  }\n\n  onDragStart(event: DragEvent) {\n    const { view } = this.editor\n    const target = (event.target as HTMLElement)\n\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3\n      ? target.parentElement?.closest('[data-drag-handle]')\n      : target.closest('[data-drag-handle]')\n\n    if (\n      !this.dom\n      || this.contentDOM?.contains(target)\n      || !dragHandle\n    ) {\n      return\n    }\n\n    let x = 0\n    let y = 0\n\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect()\n      const handleBox = dragHandle.getBoundingClientRect()\n\n      // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n      const offsetX = event.offsetX ?? (event as any).nativeEvent?.offsetX\n      const offsetY = event.offsetY ?? (event as any).nativeEvent?.offsetY\n\n      x = handleBox.x - domBox.x + offsetX\n      y = handleBox.y - domBox.y + offsetY\n    }\n\n    event.dataTransfer?.setDragImage(this.dom, x, y)\n\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos())\n    const transaction = view.state.tr.setSelection(selection)\n\n    view.dispatch(transaction)\n  }\n\n  stopEvent(event: Event) {\n    if (!this.dom) {\n      return false\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({ event })\n    }\n\n    const target = (event.target as HTMLElement)\n    const isInElement = this.dom.contains(target) && !this.contentDOM?.contains(target)\n\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false\n    }\n\n    const isDropEvent = event.type === 'drop'\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName)\n      || target.isContentEditable\n\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent) {\n      return true\n    }\n\n    const { isEditable } = this.editor\n    const { isDragging } = this\n    const isDraggable = !!this.node.type.spec.draggable\n    const isSelectable = NodeSelection.isSelectable(this.node)\n    const isCopyEvent = event.type === 'copy'\n    const isPasteEvent = event.type === 'paste'\n    const isCutEvent = event.type === 'cut'\n    const isClickEvent = event.type === 'mousedown'\n    const isDragEvent = event.type.startsWith('drag')\n\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault()\n    }\n\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault()\n      return false\n    }\n\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]')\n      const isValidDragHandle = dragHandle\n        && (this.dom === dragHandle || (this.dom.contains(dragHandle)))\n\n      if (isValidDragHandle) {\n        this.isDragging = true\n\n        document.addEventListener('dragend', () => {\n          this.isDragging = false\n        }, { once: true })\n\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false\n        }, { once: true })\n      }\n    }\n\n    // these events are handled by prosemirror\n    if (\n      isDragging\n      || isDropEvent\n      || isCopyEvent\n      || isPasteEvent\n      || isCutEvent\n      || (isClickEvent && isSelectable)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  ignoreMutation(mutation: MutationRecord | { type: 'selection', target: Element }) {\n    if (!this.dom || !this.contentDOM) {\n      return true\n    }\n\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({ mutation })\n    }\n\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true\n    }\n\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false\n    }\n\n    // try to prevent a bug on iOS that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    if (\n      this.dom.contains(mutation.target)\n      && mutation.type === 'childList'\n      && isiOS()\n      && this.editor.isFocused\n    ) {\n      const changedNodes = [\n        ...Array.from(mutation.addedNodes),\n        ...Array.from(mutation.removedNodes),\n      ] as HTMLElement[]\n\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false\n      }\n    }\n\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true\n    }\n\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false\n    }\n\n    return true\n  }\n\n  updateAttributes(attributes: {}) {\n    this.editor.commands.command(({ tr }) => {\n      const pos = this.getPos()\n\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes,\n      })\n\n      return true\n    })\n  }\n\n  deleteNode(): void {\n    const from = this.getPos()\n    const to = from + this.node.nodeSize\n\n    this.editor.commands.deleteRange({ from, to })\n  }\n}\n","import { MarkType } from 'prosemirror-model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { PasteRule, PasteRuleFinder } from '../PasteRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n */\nexport function markPasteRule(config: {\n  find: PasteRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","// source: https://stackoverflow.com/a/6969486\nexport function escapeForRegEx(string: string): string {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string'\n}\n","import { NodeType } from 'prosemirror-model'\n\nimport { PasteRule } from '../PasteRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities'\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n */\nexport function nodePasteRule(config: {\n  find: RegExp,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler({ match, chain, range }) {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      if (match.input) {\n        chain()\n          .deleteRange(range)\n          .insertContentAt(range.from, {\n            type: config.type.name,\n            attrs: attributes,\n          })\n      }\n    },\n  })\n}\n","import { PasteRule, PasteRuleFinder } from '../PasteRule'\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n */\nexport function textPasteRule(config: {\n  find: PasteRuleFinder,\n  replace: string,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Transaction } from 'prosemirror-state'\n\nexport interface TrackerResult {\n  position: number,\n  deleted: boolean,\n}\n\nexport class Tracker {\n\n  transaction: Transaction\n\n  currentStep: number\n\n  constructor(transaction: Transaction) {\n    this.transaction = transaction\n    this.currentStep = this.transaction.steps.length\n  }\n\n  map(position: number): TrackerResult {\n    let deleted = false\n\n    const mappedPosition = this.transaction.steps\n      .slice(this.currentStep)\n      .reduce((newPosition, step) => {\n        const mapResult = step\n          .getMap()\n          .mapResult(newPosition)\n\n        if (mapResult.deleted) {\n          deleted = true\n        }\n\n        return mapResult.pos\n      }, position)\n\n    return {\n      position: mappedPosition,\n      deleted,\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}