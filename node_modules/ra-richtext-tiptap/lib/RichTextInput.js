"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultEditorOptions = exports.RichTextInput = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var react_2 = require("@tiptap/react");
var starter_kit_1 = __importDefault(require("@tiptap/starter-kit"));
var extension_underline_1 = __importDefault(require("@tiptap/extension-underline"));
var extension_link_1 = __importDefault(require("@tiptap/extension-link"));
var extension_text_align_1 = __importDefault(require("@tiptap/extension-text-align"));
var core_1 = require("@material-ui/core");
var styles_1 = require("@material-ui/core/styles");
var ra_core_1 = require("ra-core");
var ra_ui_materialui_1 = require("ra-ui-materialui");
var TiptapEditorProvider_1 = require("./TiptapEditorProvider");
var RichTextInputToolbar_1 = require("./RichTextInputToolbar");
/**
 * A rich text editor for the react-admin that is accessible and supports translations. Based on [Tiptap](https://www.tiptap.dev/).
 * @param props The input props. Accept all common react-admin input props.
 * @param {EditorOptions} props.editorOptions The options to pass to the Tiptap editor.
 * @param {ReactNode} props.toolbar The toolbar containing the editors commands.
 *
 * @example <caption>Customizing the editors options</caption>
 * import { RichTextInput, RichTextInputToolbar } from 'ra-richtext-tiptap';
 * const MyRichTextInput = (props) => (
 *     <RichTextInput
 *         toolbar={<RichTextInputToolbar size="large" />}
 *         label="Body"
 *         source="body"
 *         {...props}
 *     />
 * );
 *
 * @example <caption>Customizing the toolbar size</caption>
 * import { RichTextInput, RichTextInputToolbar } from 'ra-richtext-tiptap';
 * const MyRichTextInput = (props) => (
 *     <RichTextInput
 *         toolbar={<RichTextInputToolbar size="large" />}
 *         label="Body"
 *         source="body"
 *         {...props}
 *     />
 * );
 *
 * @example <caption>Customizing the toolbar commands</caption>
 * import { RichTextInput, RichTextInputToolbar } from 'ra-richtext-tiptap';
 * const MyRichTextInput = ({ size, ...props }) => (
 *     <RichTextInput
 *         toolbar={(
 *             <RichTextInputToolbar>
 *                 <RichTextInputLevelSelect size={size} />
 *                 <FormatButtons size={size} />
 *                 <ListButtons size={size} />
 *                 <LinkButtons size={size} />
 *                 <QuoteButtons size={size} />
 *                 <ClearButtons size={size} />
 *             </RichTextInputToolbar>
 *         )}
 *         label="Body"
 *         source="body"
 *         {...props}
 *     />
 * );
 */
var RichTextInput = function (props) {
    var _a = props.disabled, disabled = _a === void 0 ? false : _a, _b = props.readOnly, readOnly = _b === void 0 ? false : _b, _c = props.editorOptions, editorOptions = _c === void 0 ? exports.DefaultEditorOptions : _c, helperText = props.helperText, _d = props.toolbar, toolbar = _d === void 0 ? React.createElement(RichTextInputToolbar_1.RichTextInputToolbar, null) : _d, label = props.label, source = props.source, rest = __rest(props, ["disabled", "readOnly", "editorOptions", "helperText", "toolbar", "label", "source"]);
    var resource = (0, ra_core_1.useResourceContext)(props);
    var classes = useStyles(props);
    var translate = (0, ra_core_1.useTranslate)();
    var _e = (0, ra_core_1.useInput)(props), id = _e.id, input = _e.input, isRequired = _e.isRequired, meta = _e.meta;
    var finalLabel = label
        ? translate(label, { _: label })
        : translate.apply(void 0, (0, ra_core_1.getFieldLabelTranslationArgs)({
            label: label,
            resource: resource,
            source: source,
        }));
    var editor = (0, react_2.useEditor)(__assign(__assign({}, editorOptions), { content: input.value, editorProps: {
            attributes: __assign({ id: id, 'aria-label': finalLabel }, (disabled || readOnly ? EditorAttributesNotEditable : EditorAttributes)),
        } }));
    var error = meta.error, submitError = meta.submitError, touched = meta.touched;
    (0, react_1.useEffect)(function () {
        if (!editor)
            return;
        editor.setOptions({
            editorProps: {
                attributes: __assign({ id: id, 'aria-label': finalLabel }, (disabled || readOnly ? EditorAttributesNotEditable : EditorAttributes)),
            },
        });
    }, [disabled, editor, readOnly, finalLabel, id]);
    (0, react_1.useEffect)(function () {
        if (!editor) {
            return;
        }
        var handleEditorUpdate = function () {
            if (editor.isEmpty) {
                input.onChange('');
                input.onBlur();
                return;
            }
            var html = editor.getHTML();
            input.onChange(html);
            input.onBlur();
        };
        editor.on('update', handleEditorUpdate);
        return function () {
            editor.off('update', handleEditorUpdate);
        };
    }, [editor, input]);
    return (React.createElement(ra_ui_materialui_1.Labeled, __assign({ id: id, isRequired: isRequired, label: label, meta: meta, source: source, resource: resource }, (0, ra_ui_materialui_1.sanitizeInputRestProps)(rest)),
        React.createElement("div", null,
            React.createElement(TiptapEditorProvider_1.TiptapEditorProvider, { value: editor },
                toolbar,
                React.createElement(react_2.EditorContent, { className: classes.editorContent, editor: editor })),
            React.createElement(core_1.FormHelperText, { error: Boolean(error || submitError) },
                React.createElement(ra_ui_materialui_1.InputHelperText, { touched: touched, error: error || submitError, helperText: helperText })))));
};
exports.RichTextInput = RichTextInput;
var EditorAttributes = {
    role: 'textbox',
    'aria-multiline': 'true',
};
var EditorAttributesNotEditable = {
    role: 'textbox',
    'aria-multiline': 'true',
    contenteditable: false,
    'aria-readonly': 'true',
};
exports.DefaultEditorOptions = {
    extensions: [
        starter_kit_1.default,
        extension_underline_1.default,
        extension_link_1.default,
        extension_text_align_1.default.configure({
            types: ['heading', 'paragraph'],
        }),
    ],
};
var useStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    root: {},
    editorContent: {
        '& > div': {
            padding: theme.spacing(1),
            borderStyle: 'solid',
            borderWidth: '1px',
            borderColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)',
            borderRadius: theme.shape.borderRadius,
        },
    },
}); }, {
    name: 'RaRichTextInput',
});
