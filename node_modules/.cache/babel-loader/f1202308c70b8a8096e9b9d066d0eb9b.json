{"ast":null,"code":"import t, { useCallback as e } from \"react\";\nimport { AutocompleteArrayInput as r, AutocompleteInput as n, TextInput as o, useResourceContext as a, ReferenceArrayInput as i, ReferenceInput as c } from \"react-admin\";\nimport { useDataServers as u } from \"@semapps/semantic-data-provider\";\nfunction f(t) {\n  return (f = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (t) {\n    return typeof t;\n  } : function (t) {\n    return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n  })(t);\n}\nfunction m() {\n  return (m = Object.assign ? Object.assign.bind() : function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var r = arguments[e];\n      for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && (t[n] = r[n]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nfunction s(t, e) {\n  if (null == t) return {};\n  var r,\n    n,\n    o = function (t, e) {\n      if (null == t) return {};\n      var r,\n        n,\n        o = {},\n        a = Object.keys(t);\n      for (n = 0; n < a.length; n++) r = a[n], e.indexOf(r) >= 0 || (o[r] = t[r]);\n      return o;\n    }(t, e);\n  if (Object.getOwnPropertySymbols) {\n    var a = Object.getOwnPropertySymbols(t);\n    for (n = 0; n < a.length; n++) r = a[n], e.indexOf(r) >= 0 || Object.prototype.propertyIsEnumerable.call(t, r) && (o[r] = t[r]);\n  }\n  return o;\n}\nvar l = function l(e) {\n    var r = e.record,\n      n = e.optionText,\n      o = e.dataServers,\n      a = o && Object.values(o).find(function (t) {\n        return r.id.startsWith(t.baseUrl);\n      });\n    return t.createElement(\"span\", null, r[n], a && t.createElement(\"em\", {\n      className: \"serverName\",\n      style: {\n        color: \"grey\"\n      }\n    }, \"Â (\", a.name, \")\"));\n  },\n  p = [\"optionText\"],\n  y = function y(n) {\n    var o = n.optionText,\n      a = s(n, p),\n      i = u(),\n      c = e(function (t, e) {\n        return e[o].toLowerCase().match(t.toLowerCase());\n      }, [o]);\n    return t.createElement(r, m({\n      matchSuggestion: c,\n      optionText: t.createElement(l, {\n        optionText: o,\n        dataServers: i\n      })\n    }, a));\n  },\n  b = [\"optionText\"],\n  v = function v(r) {\n    var o = r.optionText,\n      a = s(r, b),\n      i = u(),\n      c = e(function (t) {\n        if (t && i) {\n          var e = Object.values(i).find(function (e) {\n            return t.id.startsWith(e.baseUrl);\n          });\n          return t[o] + (e ? \" (\".concat(e.name, \")\") : \"\");\n        }\n      }, [o, i]);\n    return t.createElement(n, m({\n      optionText: c\n    }, a));\n  },\n  d = function d(e) {\n    return t.createElement(o, m({\n      multiline: !0,\n      minRows: 2,\n      format: function format(t) {\n        return t ? Array.isArray(t) ? t.join(\"\\n\") : t : \"\";\n      },\n      parse: function parse(t) {\n        return t.split(/\\r?\\n/);\n      }\n    }, e));\n  },\n  O = function O(e) {\n    var r = a({});\n    return t.createElement(i, m({}, e, {\n      resource: r,\n      format: function format(t) {\n        return t ? (Array.isArray(t) || (t = [t]), e.format && (t = e.format(t)), t.map(function (t) {\n          return \"object\" === f(t) ? t.id || t[\"@id\"] : t;\n        })) : t;\n      }\n    }));\n  },\n  j = function j(e) {\n    var r = a({});\n    return t.createElement(c, m({}, e, {\n      resource: r,\n      format: function format(t) {\n        return t ? (e.format && (t = e.format(t)), \"object\" === f(t) ? t.id || t[\"@id\"] : t) : t;\n      }\n    }));\n  };\nexport { d as MultiLinesInput, y as MultiServerAutocompleteArrayInput, v as MultiServerAutocompleteInput, O as ReferenceArrayInput, j as ReferenceInput };","map":{"version":3,"sources":["../src/OptionRenderer.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/MultiLinesInput.js","../src/ReferenceArrayInput.js","../src/ReferenceInput.js"],"names":["OptionRenderer","record","optionText","dataServers","_ref","server","Object","values","find","id","startsWith","baseUrl","React","className","style","color","name","MultiServerAutocompleteArrayInput","rest","useDataServers","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","MultiServerAutocompleteInput","optionTextWithServerName","AutocompleteInput","MultiLinesInput","TextInput","multiline","minRows","format","value","Array","isArray","join","parse","split","props","ReferenceArrayInput","resource","useResourceContext","RaReferenceArrayInput","map","_typeof","v","ReferenceInput","RaReferenceInput"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst OptionRenderer = ({ record, optionText, dataServers }) => {\n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => choice[optionText].toLowerCase().match(filterValue.toLowerCase()),\n    [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} />}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n","import React from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput, useResourceContext } from 'react-admin';\n\nconst ReferenceArrayInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceArrayInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // if the linked field value is not an array, turns it into an array.\n        // Necessary as JSON-LD are sometimes arrays, sometimes not (when there is one value)\n        // and the ReferenceArrayInput component only accept arrays\n        if (!Array.isArray(value)) value = [value];\n        // If a format prop was defined, apply it to the array\n        if (props.format) value = props.format(value);\n        // If the values are objects with @id field, turn it to a simple string\n        return value.map(v => (typeof v === 'object' ? v.id || v['@id'] : v));\n      }}\n    />\n  );\n};\n\nexport default ReferenceArrayInput;\n","import React from 'react';\nimport { ReferenceInput as RaReferenceInput, useResourceContext } from 'react-admin';\n\nconst ReferenceInput = props => {\n  const resource = useResourceContext({});\n  return (\n    <RaReferenceInput\n      {...props}\n      resource={resource}\n      format={value => {\n        // If there is no value, return immediately\n        if (!value) return value;\n        // If a format prop was defined, apply it\n        if (props.format) value = props.format(value);\n        // If the value is an object with an @id field, return the uri\n        return typeof value === 'object' ? value.id || value['@id'] : value;\n      }}\n    />\n  );\n};\n\nexport default ReferenceInput;\n"]},"metadata":{},"sourceType":"module"}