{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { RichTextInputLevelSelect } from './RichTextInputLevelSelect';\nimport { AlignmentButtons, FormatButtons, ListButtons, LinkButtons, QuoteButtons, ClearButtons } from './RichTextInputDefaultButtons';\n/**\n * A toolbar for the <RichTextInput>.\n * @param props The toolbar props.\n * @param {ReactNode} props.children The toolbar children, usually many <ToggleButton>.\n * @param {'small' | 'medium' | 'large'} props.size The default size to apply to the **default** children.\n *\n * @example <caption>Customizing the size</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-richtext-tiptap';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the children</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-richtext-tiptap';\n * const MyRichTextInput = ({ size, ...props }) => (\n *     <RichTextInput\n *         toolbar={(\n *             <RichTextInputToolbar>\n *                 <RichTextInputLevelSelect size={size} />\n *                 <FormatButtons size={size} />\n *                 <ListButtons size={size} />\n *                 <LinkButtons size={size} />\n *                 <QuoteButtons size={size} />\n *                 <ClearButtons size={size} />\n *             </RichTextInputToolbar>\n *         )}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n */\nexport var RichTextInputToolbar = function RichTextInputToolbar(props) {\n  var classes = useStyles(props);\n  var _a = props.size,\n    size = _a === void 0 ? 'medium' : _a,\n    _b = props.children,\n    children = _b === void 0 ? React.createElement(React.Fragment, null, React.createElement(RichTextInputLevelSelect, {\n      size: size\n    }), React.createElement(FormatButtons, {\n      size: size\n    }), React.createElement(AlignmentButtons, {\n      size: size\n    }), React.createElement(ListButtons, {\n      size: size\n    }), React.createElement(LinkButtons, {\n      size: size\n    }), React.createElement(QuoteButtons, {\n      size: size\n    }), React.createElement(ClearButtons, {\n      size: size\n    })) : _b,\n    rest = __rest(props, [\"size\", \"children\"]);\n  return React.createElement(\"div\", __assign({\n    className: classes.root\n  }, rest), children);\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'inline-flex',\n      marginBottom: theme.spacing(1),\n      alignItems: 'center',\n      '& > *': {\n        marginRight: theme.spacing(1)\n      },\n      '& > *:last-child': {\n        marginRight: 0\n      }\n    }\n  };\n}, {\n  name: 'RaRichTextInputToolbar'\n});","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","makeStyles","RichTextInputLevelSelect","AlignmentButtons","FormatButtons","ListButtons","LinkButtons","QuoteButtons","ClearButtons","RichTextInputToolbar","props","classes","useStyles","_a","size","_b","children","createElement","Fragment","rest","className","root","theme","display","marginBottom","spacing","alignItems","marginRight","name"],"sources":["/home/jean-daniel/Documents/Projets/DÃ©veloppement/ActivityPods/BCM/frontend/node_modules/ra-richtext-tiptap/esm/RichTextInputToolbar.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { RichTextInputLevelSelect } from './RichTextInputLevelSelect';\nimport { AlignmentButtons, FormatButtons, ListButtons, LinkButtons, QuoteButtons, ClearButtons, } from './RichTextInputDefaultButtons';\n/**\n * A toolbar for the <RichTextInput>.\n * @param props The toolbar props.\n * @param {ReactNode} props.children The toolbar children, usually many <ToggleButton>.\n * @param {'small' | 'medium' | 'large'} props.size The default size to apply to the **default** children.\n *\n * @example <caption>Customizing the size</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-richtext-tiptap';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the children</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-richtext-tiptap';\n * const MyRichTextInput = ({ size, ...props }) => (\n *     <RichTextInput\n *         toolbar={(\n *             <RichTextInputToolbar>\n *                 <RichTextInputLevelSelect size={size} />\n *                 <FormatButtons size={size} />\n *                 <ListButtons size={size} />\n *                 <LinkButtons size={size} />\n *                 <QuoteButtons size={size} />\n *                 <ClearButtons size={size} />\n *             </RichTextInputToolbar>\n *         )}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n */\nexport var RichTextInputToolbar = function (props) {\n    var classes = useStyles(props);\n    var _a = props.size, size = _a === void 0 ? 'medium' : _a, _b = props.children, children = _b === void 0 ? (React.createElement(React.Fragment, null,\n        React.createElement(RichTextInputLevelSelect, { size: size }),\n        React.createElement(FormatButtons, { size: size }),\n        React.createElement(AlignmentButtons, { size: size }),\n        React.createElement(ListButtons, { size: size }),\n        React.createElement(LinkButtons, { size: size }),\n        React.createElement(QuoteButtons, { size: size }),\n        React.createElement(ClearButtons, { size: size }))) : _b, rest = __rest(props, [\"size\", \"children\"]);\n    return (React.createElement(\"div\", __assign({ className: classes.root }, rest), children));\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    root: {\n        display: 'inline-flex',\n        marginBottom: theme.spacing(1),\n        alignItems: 'center',\n        '& > *': {\n            marginRight: theme.spacing(1),\n        },\n        '& > *:last-child': {\n            marginRight: 0,\n        },\n    },\n}); }, {\n    name: 'RaRichTextInputToolbar',\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}