{"ast":null,"code":"import _defineProperty from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/jean-daniel/Documents/Projets/D\\xE9veloppement/ActivityPods/BCM/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { Node, mergeAttributes, textblockTypeInputRule } from '@tiptap/core';\nvar Heading = Node.create({\n  name: 'heading',\n  addOptions: function addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {}\n    };\n  },\n  content: 'inline*',\n  group: 'block',\n  defining: true,\n  addAttributes: function addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false\n      }\n    };\n  },\n  parseHTML: function parseHTML() {\n    return this.options.levels.map(function (level) {\n      return {\n        tag: \"h\".concat(level),\n        attrs: {\n          level: level\n        }\n      };\n    });\n  },\n  renderHTML: function renderHTML(_ref) {\n    var node = _ref.node,\n      HTMLAttributes = _ref.HTMLAttributes;\n    var hasLevel = this.options.levels.includes(node.attrs.level);\n    var level = hasLevel ? node.attrs.level : this.options.levels[0];\n    return [\"h\".concat(level), mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setHeading: function setHeading(attributes) {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          if (!_this.options.levels.includes(attributes.level)) {\n            return false;\n          }\n          return commands.setNode(_this.name, attributes);\n        };\n      },\n      toggleHeading: function toggleHeading(attributes) {\n        return function (_ref3) {\n          var commands = _ref3.commands;\n          if (!_this.options.levels.includes(attributes.level)) {\n            return false;\n          }\n          return commands.toggleNode(_this.name, 'paragraph', attributes);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return this.options.levels.reduce(function (items, level) {\n      return _objectSpread(_objectSpread({}, items), _defineProperty({}, \"Mod-Alt-\".concat(level), function ModAlt() {\n        return _this2.editor.commands.toggleHeading({\n          level: level\n        });\n      }));\n    }, {});\n  },\n  addInputRules: function addInputRules() {\n    var _this3 = this;\n    return this.options.levels.map(function (level) {\n      return textblockTypeInputRule({\n        find: new RegExp(\"^(#{1,\".concat(level, \"})\\\\s$\")),\n        type: _this3.type,\n        getAttributes: {\n          level: level\n        }\n      });\n    });\n  }\n});\nexport { Heading, Heading as default };","map":{"version":3,"sources":["../src/heading.ts"],"names":[],"mappings":";;;AAwBa,IAAA,OAAO,GAAG,IAAI,CAAC,MAAM,CAAiB;EACjD,IAAI,EAAE,SAAS;EAEf,UAAU,wBAAA;IACR,OAAO;MACL,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1B,cAAc,EAAE,CAAA;KACjB;GACF;EAED,OAAO,EAAE,SAAS;EAElB,KAAK,EAAE,OAAO;EAEd,QAAQ,EAAE,IAAI;EAEd,aAAa,2BAAA;IACX,OAAO;MACL,KAAK,EAAE;QACL,OAAO,EAAE,CAAC;QACV,QAAQ,EAAE;MACX;KACF;GACF;EAED,SAAS,uBAAA;IACP,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CACvB,GAAG,CAAC,UAAC,KAAY;MAAA,OAAM;QACtB,GAAG,aAAM,KAAK,CAAE;QAChB,KAAK,EAAE;UAAE,KAAK,EAAL;QAAK;MACf,CAAA;IAAA,CAAC,CAAC;GACN;EAED,UAAU,4BAAyB;IAAA,IAAtB,IAAI,QAAJ,IAAI;MAAE,cAAc,QAAd,cAAc;IAC/B,IAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;IAC/D,IAAM,KAAK,GAAG,QAAQ,GAClB,IAAI,CAAC,KAAK,CAAC,KAAK,GAChB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAE1B,OAAO,YAAK,KAAK,GAAI,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;GACtF;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,UAAU,EAAE,oBAAA,UAAU;QAAA,OAAI,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UACnC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YACnD,OAAO,KAAK;UACb;UAED,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,IAAI,EAAE,UAAU,CAAC;SAC/C;MAAA;MACD,aAAa,EAAE,uBAAA,UAAU;QAAA,OAAI,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UACtC,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YACnD,OAAO,KAAK;UACb;UAED,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,EAAE,WAAW,EAAE,UAAU,CAAC;SAC/D;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,KAAK;MAAA,uCAC1C,KAAK,yCAEM,KAAK,GAAK;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC;UAAE,KAAK,EAAL;QAAK,CAAE,CAAC;MAAA;IAAA,CAE3E,EAAE,CAAA,CAAE,CAAC;GACR;EAED,aAAa,2BAAA;IAAA;IACX,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,EAAG;MACrC,OAAO,sBAAsB,CAAC;QAC5B,IAAI,EAAE,IAAI,MAAM,iBAAU,KAAK,YAAS;QACxC,IAAI,EAAE,MAAI,CAAC,IAAI;QACf,aAAa,EAAE;UACb,KAAK,EAAL;QACD;MACF,CAAA,CAAC;IACJ,CAAC,CAAC;EACH;AACF,CAAA,CAAA","sourcesContent":["import { mergeAttributes, Node, textblockTypeInputRule } from '@tiptap/core'\n\nexport type Level = 1 | 2 | 3 | 4 | 5 | 6\n\nexport interface HeadingOptions {\n  levels: Level[],\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    heading: {\n      /**\n       * Set a heading node\n       */\n      setHeading: (attributes: { level: Level }) => ReturnType,\n      /**\n       * Toggle a heading node\n       */\n      toggleHeading: (attributes: { level: Level }) => ReturnType,\n    }\n  }\n}\n\nexport const Heading = Node.create<HeadingOptions>({\n  name: 'heading',\n\n  addOptions() {\n    return {\n      levels: [1, 2, 3, 4, 5, 6],\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'inline*',\n\n  group: 'block',\n\n  defining: true,\n\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        rendered: false,\n      },\n    }\n  },\n\n  parseHTML() {\n    return this.options.levels\n      .map((level: Level) => ({\n        tag: `h${level}`,\n        attrs: { level },\n      }))\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    const hasLevel = this.options.levels.includes(node.attrs.level)\n    const level = hasLevel\n      ? node.attrs.level\n      : this.options.levels[0]\n\n    return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.setNode(this.name, attributes)\n      },\n      toggleHeading: attributes => ({ commands }) => {\n        if (!this.options.levels.includes(attributes.level)) {\n          return false\n        }\n\n        return commands.toggleNode(this.name, 'paragraph', attributes)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return this.options.levels.reduce((items, level) => ({\n      ...items,\n      ...{\n        [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),\n      },\n    }), {})\n  },\n\n  addInputRules() {\n    return this.options.levels.map(level => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{1,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: {\n          level,\n        },\n      })\n    })\n  },\n})\n"]},"metadata":{},"sourceType":"module"}