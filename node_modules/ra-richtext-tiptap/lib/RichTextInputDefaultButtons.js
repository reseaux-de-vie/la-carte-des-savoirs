"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClearButtons = exports.QuoteButtons = exports.LinkButtons = exports.AlignmentButtons = exports.ListButtons = exports.FormatButtons = void 0;
var React = __importStar(require("react"));
var lab_1 = require("@material-ui/lab");
var FormatBold_1 = __importDefault(require("@material-ui/icons/FormatBold"));
var FormatItalic_1 = __importDefault(require("@material-ui/icons/FormatItalic"));
var FormatUnderlined_1 = __importDefault(require("@material-ui/icons/FormatUnderlined"));
var FormatStrikethrough_1 = __importDefault(require("@material-ui/icons/FormatStrikethrough"));
var FormatListBulleted_1 = __importDefault(require("@material-ui/icons/FormatListBulleted"));
var FormatListNumbered_1 = __importDefault(require("@material-ui/icons/FormatListNumbered"));
var FormatAlignCenter_1 = __importDefault(require("@material-ui/icons/FormatAlignCenter"));
var FormatAlignLeft_1 = __importDefault(require("@material-ui/icons/FormatAlignLeft"));
var FormatAlignRight_1 = __importDefault(require("@material-ui/icons/FormatAlignRight"));
var FormatAlignJustify_1 = __importDefault(require("@material-ui/icons/FormatAlignJustify"));
var FormatQuote_1 = __importDefault(require("@material-ui/icons/FormatQuote"));
var FormatClear_1 = __importDefault(require("@material-ui/icons/FormatClear"));
var InsertLink_1 = __importDefault(require("@material-ui/icons/InsertLink"));
var Code_1 = __importDefault(require("@material-ui/icons/Code"));
var ra_core_1 = require("ra-core");
var useTiptapEditor_1 = require("./useTiptapEditor");
var FormatButtons = function (props) {
    var editor = (0, useTiptapEditor_1.useTiptapEditor)();
    var translate = (0, ra_core_1.useTranslate)();
    var boldLabel = translate('ra.tiptap.bold', {
        _: 'Bold',
    });
    var italicLabel = translate('ra.tiptap.Italic', {
        _: 'Italic',
    });
    var underlineLabel = translate('ra.tiptap.underline', {
        _: 'Underline',
    });
    var strikeLabel = translate('ra.tiptap.strike', {
        _: 'Strikethrough',
    });
    var codeLabel = translate('ra.tiptap.code', {
        _: 'Code',
    });
    return (React.createElement(lab_1.ToggleButtonGroup, __assign({}, props),
        React.createElement(lab_1.ToggleButton, { "aria-label": boldLabel, title: boldLabel, onClick: function () { return editor.chain().focus().toggleBold().run(); }, selected: editor && editor.isActive('bold') },
            React.createElement(FormatBold_1.default, { fontSize: "inherit" })),
        React.createElement(lab_1.ToggleButton, { "aria-label": italicLabel, title: italicLabel, onClick: function () { return editor.chain().focus().toggleItalic().run(); }, selected: editor && editor.isActive('italic') },
            React.createElement(FormatItalic_1.default, { fontSize: "inherit" })),
        React.createElement(lab_1.ToggleButton, { "aria-label": underlineLabel, title: underlineLabel, onClick: function () { return editor.chain().focus().toggleUnderline().run(); }, selected: editor && editor.isActive('underline') },
            React.createElement(FormatUnderlined_1.default, { fontSize: "inherit" })),
        React.createElement(lab_1.ToggleButton, { "aria-label": strikeLabel, title: strikeLabel, onClick: function () { return editor.chain().focus().toggleStrike().run(); }, selected: editor && editor.isActive('strike') },
            React.createElement(FormatStrikethrough_1.default, { fontSize: "inherit" })),
        React.createElement(lab_1.ToggleButton, { "aria-label": codeLabel, title: codeLabel, onClick: function () { return editor.chain().focus().toggleCode().run(); }, selected: editor && editor.isActive('code') },
            React.createElement(Code_1.default, { fontSize: "inherit" }))));
};
exports.FormatButtons = FormatButtons;
var ListButtons = function (props) {
    var editor = (0, useTiptapEditor_1.useTiptapEditor)();
    var translate = (0, ra_core_1.useTranslate)();
    var bulletListLabel = translate('ra.tiptap.list_bulleted', {
        _: 'Bulleted list',
    });
    var numberListLabel = translate('ra.tiptap.list_numbered', {
        _: 'Numbered list',
    });
    return (React.createElement(lab_1.ToggleButtonGroup, __assign({}, props),
        React.createElement(lab_1.ToggleButton, { "aria-label": bulletListLabel, title: bulletListLabel, onClick: function () { return editor.chain().focus().toggleBulletList().run(); }, selected: editor && editor.isActive('bulletList') },
            React.createElement(FormatListBulleted_1.default, { fontSize: "inherit" })),
        React.createElement(lab_1.ToggleButton, { "aria-label": numberListLabel, title: numberListLabel, onClick: function () { return editor.chain().focus().toggleOrderedList().run(); }, selected: editor && editor.isActive('orderedList') },
            React.createElement(FormatListNumbered_1.default, { fontSize: "inherit" }))));
};
exports.ListButtons = ListButtons;
var AlignmentButtons = function (props) {
    var editor = (0, useTiptapEditor_1.useTiptapEditor)();
    var translate = (0, ra_core_1.useTranslate)();
    var leftLabel = translate('ra.tiptap.align_left', { _: 'Align left' });
    var rightLabel = translate('ra.tiptap.align_right', { _: 'Align right' });
    var centerLabel = translate('ra.tiptap.align_center', { _: 'Center' });
    var justifyLabel = translate('ra.tiptap.align_justify', { _: 'Justify' });
    return (React.createElement(lab_1.ToggleButtonGroup, __assign({}, props),
        React.createElement(lab_1.ToggleButton, { "aria-label": leftLabel, title: leftLabel, onClick: function () { return editor.chain().focus().setTextAlign('left').run(); }, selected: editor && editor.isActive({ textAlign: 'left' }) },
            React.createElement(FormatAlignLeft_1.default, { fontSize: "inherit" })),
        React.createElement(lab_1.ToggleButton, { "aria-label": centerLabel, title: centerLabel, onClick: function () { return editor.chain().focus().setTextAlign('center').run(); }, selected: editor && editor.isActive({ textAlign: 'center' }) },
            React.createElement(FormatAlignCenter_1.default, { fontSize: "inherit" })),
        React.createElement(lab_1.ToggleButton, { "aria-label": rightLabel, title: rightLabel, onClick: function () { return editor.chain().focus().setTextAlign('right').run(); }, selected: editor && editor.isActive({ textAlign: 'right' }) },
            React.createElement(FormatAlignRight_1.default, { fontSize: "inherit" })),
        React.createElement(lab_1.ToggleButton, { "aria-label": justifyLabel, title: justifyLabel, onClick: function () { return editor.chain().focus().setTextAlign('justify').run(); }, selected: editor && editor.isActive({ textAlign: 'justify' }) },
            React.createElement(FormatAlignJustify_1.default, { fontSize: "inherit" }))));
};
exports.AlignmentButtons = AlignmentButtons;
var LinkButtons = function (props) {
    var editor = (0, useTiptapEditor_1.useTiptapEditor)();
    var translate = (0, ra_core_1.useTranslate)();
    var disabled = editor
        ? editor.state.doc.textBetween(editor.state.selection.from, editor.state.selection.to).length === 0
        : false;
    var label = translate('ra.tiptap.link', {
        _: 'Add a link',
    });
    return (React.createElement(lab_1.ToggleButtonGroup, __assign({}, props),
        React.createElement(lab_1.ToggleButton, { "aria-label": label, title: label, onClick: function () {
                if (!editor.can().setLink({ href: '' })) {
                    return;
                }
                var url = window.prompt('URL');
                editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();
            }, selected: editor && editor.isActive('link'), disabled: disabled },
            React.createElement(InsertLink_1.default, { fontSize: "inherit" }))));
};
exports.LinkButtons = LinkButtons;
var QuoteButtons = function (props) {
    var editor = (0, useTiptapEditor_1.useTiptapEditor)();
    var translate = (0, ra_core_1.useTranslate)();
    var label = translate('ra.tiptap.blockquote', {
        _: 'Blockquote',
    });
    return (React.createElement(lab_1.ToggleButtonGroup, __assign({}, props),
        React.createElement(lab_1.ToggleButton, { "aria-label": label, title: label, onClick: function () { return editor.chain().focus().toggleBlockquote().run(); }, selected: editor && editor.isActive('blockquote') },
            React.createElement(FormatQuote_1.default, { fontSize: "inherit" }))));
};
exports.QuoteButtons = QuoteButtons;
var ClearButtons = function (props) {
    var editor = (0, useTiptapEditor_1.useTiptapEditor)();
    var translate = (0, ra_core_1.useTranslate)();
    var label = translate('ra.tiptap.clear_format', {
        _: 'Clear format',
    });
    return (React.createElement(lab_1.ToggleButtonGroup, __assign({}, props),
        React.createElement(lab_1.ToggleButton, { "aria-label": label, title: label, onClick: function () { return editor.chain().focus().unsetAllMarks().run(); }, selected: false },
            React.createElement(FormatClear_1.default, { fontSize: "inherit" }))));
};
exports.ClearButtons = ClearButtons;
