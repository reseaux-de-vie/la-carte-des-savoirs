{"ast":null,"code":"import * as n from \"react\";\nfunction t() {\n  return (t = Object.assign || function (n) {\n    for (var t = 1; t < arguments.length; t++) {\n      var r = arguments[t];\n      for (var e in r) Object.prototype.hasOwnProperty.call(r, e) && (n[e] = r[e]);\n    }\n    return n;\n  }).apply(this, arguments);\n}\nvar r = [\"children\", \"options\"],\n  e = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"className\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce(function (n, t) {\n    return n[t.toLowerCase()] = t, n;\n  }, {\n    for: \"htmlFor\"\n  }),\n  o = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  u = [\"style\", \"script\"],\n  a = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  c = /mailto:/i,\n  i = /\\n{2,}$/,\n  f = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n  l = /^ *> ?/gm,\n  s = /^ {2,}\\n/,\n  _ = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/,\n  d = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/,\n  p = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  g = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  m = /^(?:\\n *)*\\n/,\n  v = /\\r\\n?/g,\n  y = /^\\[\\^([^\\]]+)](:.*)\\n/,\n  h = /^\\[\\^([^\\]]+)]/,\n  k = /\\f/g,\n  x = /^\\s*?\\[(x|\\s)\\]/,\n  b = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  S = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  $ = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n  w = /&([a-z]+);/g,\n  z = /^<!--[\\s\\S]*?(?:-->)/,\n  E = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  A = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  R = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  M = /^<([^ >]+@[^ >]+)>/,\n  O = /^<([^ >]+:\\/[^ >]+)>/,\n  B = / *\\n+$/,\n  L = /(?:^|\\n)( *)$/,\n  T = /-([a-z])?/gi,\n  j = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n  C = /^\\[([^\\]]*)\\]:\\s+(\\S+)\\s*(\"([^\"]*)\")?/,\n  D = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  N = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  Z = /(\\[|\\])/g,\n  F = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  P = /\\t/g,\n  G = /^ *\\| */,\n  H = /(^ *\\||\\| *$)/g,\n  q = / *$/,\n  U = /^ *:-+: *$/,\n  V = /^ *:-+ *$/,\n  W = /^ *-+: *$/,\n  Q = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n  X = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/,\n  J = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n  K = /^\\\\([^0-9A-Za-z\\s])/,\n  Y = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n  nn = /^\\n+/,\n  tn = /^([ \\t]*)/,\n  rn = /\\\\([^0-9A-Z\\s])/gi,\n  en = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +\"),\n  on = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +[^\\\\n]*(?:\\\\n(?!\\\\1(?:[*+-]|\\\\d+\\\\.) )[^\\\\n]*)*(\\\\n|$)\", \"gm\"),\n  un = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1(?:[*+-]|\\\\d+\\\\.) (?!(?:[*+-]|\\\\d+\\\\.) ))\\\\n*|\\\\s*\\\\n*$)\"),\n  an = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\",\n  cn = new RegExp(\"^\\\\[(\" + an + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  fn = new RegExp(\"^!\\\\[(\" + an + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  ln = [f, p, d, b, S, z, on, un, j],\n  sn = [].concat(ln, [/^[^\\n]+(?:  \\n|\\n{2,})/, $, A]);\nfunction _n(n) {\n  return n.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction dn(n) {\n  return W.test(n) ? \"right\" : U.test(n) ? \"center\" : V.test(n) ? \"left\" : null;\n}\nfunction pn(n, t, r) {\n  var e = r.t;\n  r.t = !0;\n  var o = t(n.trim(), r);\n  r.t = e;\n  var u = [[]];\n  return o.forEach(function (n, t) {\n    \"tableSeparator\" === n.type ? 0 !== t && t !== o.length - 1 && u.push([]) : (\"text\" !== n.type || null != o[t + 1] && \"tableSeparator\" !== o[t + 1].type || (n.content = n.content.replace(q, \"\")), u[u.length - 1].push(n));\n  }), u;\n}\nfunction gn(n, t, r) {\n  r.o = !0;\n  var e = pn(n[1], t, r),\n    o = n[2].replace(H, \"\").split(\"|\").map(dn),\n    u = function (n, t, r) {\n      return n.trim().split(\"\\n\").map(function (n) {\n        return pn(n, t, r);\n      });\n    }(n[3], t, r);\n  return r.o = !1, {\n    align: o,\n    cells: u,\n    header: e,\n    type: \"table\"\n  };\n}\nfunction mn(n, t) {\n  return null == n.align[t] ? {} : {\n    textAlign: n.align[t]\n  };\n}\nfunction vn(n) {\n  return function (t, r) {\n    return r.o ? n.exec(t) : null;\n  };\n}\nfunction yn(n) {\n  return function (t, r) {\n    return r.o || r.u ? n.exec(t) : null;\n  };\n}\nfunction hn(n) {\n  return function (t, r) {\n    return r.o || r.u ? null : n.exec(t);\n  };\n}\nfunction kn(n) {\n  return function (t) {\n    return n.exec(t);\n  };\n}\nfunction xn(n, t, r) {\n  if (t.o || t.u) return null;\n  if (r && !r.endsWith(\"\\n\")) return null;\n  var e = \"\";\n  n.split(\"\\n\").every(function (n) {\n    return !ln.some(function (t) {\n      return t.test(n);\n    }) && (e += n + \"\\n\", n.trim());\n  });\n  var o = e.trimEnd();\n  return \"\" == o ? null : [e, o];\n}\nfunction bn(n) {\n  try {\n    if (decodeURIComponent(n).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data):/i)) return null;\n  } catch (n) {\n    return null;\n  }\n  return n;\n}\nfunction Sn(n) {\n  return n.replace(rn, \"$1\");\n}\nfunction $n(n, t, r) {\n  var e = r.o || !1,\n    o = r.u || !1;\n  r.o = !0, r.u = !0;\n  var u = n(t, r);\n  return r.o = e, r.u = o, u;\n}\nfunction wn(n, t, r) {\n  var e = r.o || !1,\n    o = r.u || !1;\n  r.o = !1, r.u = !0;\n  var u = n(t, r);\n  return r.o = e, r.u = o, u;\n}\nfunction zn(n, t, r) {\n  return r.o = !1, n(t + \"\\n\\n\", r);\n}\nvar En,\n  An = function An(n, t, r) {\n    return {\n      content: $n(t, n[1], r)\n    };\n  };\nfunction Rn() {\n  return {};\n}\nfunction In() {\n  return null;\n}\nfunction Mn() {\n  return [].slice.call(arguments).filter(Boolean).join(\" \");\n}\nfunction On(n, t, r) {\n  for (var e = n, o = t.split(\".\"); o.length && void 0 !== (e = e[o[0]]);) o.shift();\n  return e || r;\n}\nfunction Bn(n, t) {\n  var r = On(t, n);\n  return r ? \"function\" == typeof r || \"object\" == typeof r && \"render\" in r ? r : On(t, n + \".component\", n) : n;\n}\nfunction Ln(r, H) {\n  void 0 === H && (H = {}), H.overrides = H.overrides || {}, H.slugify = H.slugify || _n, H.namedCodesToUnicode = H.namedCodesToUnicode ? t({}, o, H.namedCodesToUnicode) : o;\n  var q = H.createElement || n.createElement;\n  function U(n, r) {\n    var e = On(H.overrides, n + \".props\", {});\n    return q.apply(void 0, [Bn(n, H.overrides), t({}, r, e, {\n      className: Mn(null == r ? void 0 : r.className, e.className) || void 0\n    })].concat([].slice.call(arguments, 2)));\n  }\n  function V(t) {\n    var r = !1;\n    H.forceInline ? r = !0 : H.forceBlock || (r = !1 === F.test(t));\n    for (var e = Ln(pn(r ? t : t.trimEnd().replace(nn, \"\") + \"\\n\\n\", {\n      o: r\n    })); \"string\" == typeof e[e.length - 1] && !e[e.length - 1].trim();) e.pop();\n    if (null === H.wrapper) return e;\n    var o,\n      u = H.wrapper || (r ? \"span\" : \"div\");\n    if (e.length > 1 || H.forceWrapper) o = e;else {\n      if (1 === e.length) return \"string\" == typeof (o = e[0]) ? U(\"span\", {\n        key: \"outer\"\n      }, o) : o;\n      o = null;\n    }\n    return n.createElement(u, {\n      key: \"outer\"\n    }, o);\n  }\n  function W(t) {\n    var r = t.match(a);\n    return r ? r.reduce(function (t, r, o) {\n      var u = r.indexOf(\"=\");\n      if (-1 !== u) {\n        var a = function (n) {\n            return -1 !== n.indexOf(\"-\") && null === n.match(E) && (n = n.replace(T, function (n, t) {\n              return t.toUpperCase();\n            })), n;\n          }(r.slice(0, u)).trim(),\n          c = function (n) {\n            var t = n[0];\n            return ('\"' === t || \"'\" === t) && n.length >= 2 && n[n.length - 1] === t ? n.slice(1, -1) : n;\n          }(r.slice(u + 1).trim()),\n          i = e[a] || a,\n          f = t[i] = function (n, t) {\n            return \"style\" === n ? t.split(/;\\s?/).reduce(function (n, t) {\n              var r = t.slice(0, t.indexOf(\":\"));\n              return n[r.replace(/(-[a-z])/g, function (n) {\n                return n[1].toUpperCase();\n              })] = t.slice(r.length + 1).trim(), n;\n            }, {}) : \"href\" === n ? bn(t) : (t.match(R) && (t = t.slice(1, t.length - 1)), \"true\" === t || \"false\" !== t && t);\n          }(a, c);\n        \"string\" == typeof f && ($.test(f) || A.test(f)) && (t[i] = n.cloneElement(V(f.trim()), {\n          key: o\n        }));\n      } else \"style\" !== r && (t[e[r] || r] = !0);\n      return t;\n    }, {}) : void 0;\n  }\n  var rn = [],\n    an = {},\n    ln = {\n      blockQuote: {\n        i: hn(f),\n        l: En.HIGH,\n        _: function _(n, t, r) {\n          return {\n            content: t(n[0].replace(l, \"\"), r)\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"blockquote\", {\n            key: r.g\n          }, t(n.content, r));\n        }\n      },\n      breakLine: {\n        i: kn(s),\n        l: En.HIGH,\n        _: Rn,\n        p: function p(n, t, r) {\n          return U(\"br\", {\n            key: r.g\n          });\n        }\n      },\n      breakThematic: {\n        i: hn(_),\n        l: En.HIGH,\n        _: Rn,\n        p: function p(n, t, r) {\n          return U(\"hr\", {\n            key: r.g\n          });\n        }\n      },\n      codeBlock: {\n        i: hn(p),\n        l: En.MAX,\n        _: function _(n) {\n          return {\n            content: n[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\"),\n            lang: void 0\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"pre\", {\n            key: r.g\n          }, U(\"code\", {\n            className: n.lang ? \"lang-\" + n.lang : \"\"\n          }, n.content));\n        }\n      },\n      codeFenced: {\n        i: hn(d),\n        l: En.MAX,\n        _: function _(n) {\n          return {\n            content: n[3],\n            lang: n[2] || void 0,\n            type: \"codeBlock\"\n          };\n        }\n      },\n      codeInline: {\n        i: yn(g),\n        l: En.LOW,\n        _: function _(n) {\n          return {\n            content: n[2]\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"code\", {\n            key: r.g\n          }, n.content);\n        }\n      },\n      footnote: {\n        i: hn(y),\n        l: En.MAX,\n        _: function _(n) {\n          return rn.push({\n            footnote: n[2],\n            identifier: n[1]\n          }), {};\n        },\n        p: In\n      },\n      footnoteReference: {\n        i: vn(h),\n        l: En.HIGH,\n        _: function _(n) {\n          return {\n            content: n[1],\n            target: \"#\" + H.slugify(n[1])\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"a\", {\n            key: r.g,\n            href: bn(n.target)\n          }, U(\"sup\", {\n            key: r.g\n          }, n.content));\n        }\n      },\n      gfmTask: {\n        i: vn(x),\n        l: En.HIGH,\n        _: function _(n) {\n          return {\n            completed: \"x\" === n[1].toLowerCase()\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"input\", {\n            checked: n.completed,\n            key: r.g,\n            readOnly: !0,\n            type: \"checkbox\"\n          });\n        }\n      },\n      heading: {\n        i: hn(b),\n        l: En.HIGH,\n        _: function _(n, t, r) {\n          return {\n            content: $n(t, n[2], r),\n            id: H.slugify(n[2]),\n            level: n[1].length\n          };\n        },\n        p: function p(n, t, r) {\n          return n.tag = \"h\" + n.level, U(n.tag, {\n            id: n.id,\n            key: r.g\n          }, t(n.content, r));\n        }\n      },\n      headingSetext: {\n        i: hn(S),\n        l: En.MAX,\n        _: function _(n, t, r) {\n          return {\n            content: $n(t, n[1], r),\n            level: \"=\" === n[2] ? 1 : 2,\n            type: \"heading\"\n          };\n        }\n      },\n      htmlComment: {\n        i: kn(z),\n        l: En.HIGH,\n        _: function _() {\n          return {};\n        },\n        p: In\n      },\n      image: {\n        i: yn(fn),\n        l: En.HIGH,\n        _: function _(n) {\n          return {\n            alt: n[1],\n            target: Sn(n[2]),\n            title: n[3]\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"img\", {\n            key: r.g,\n            alt: n.alt || void 0,\n            title: n.title || void 0,\n            src: bn(n.target)\n          });\n        }\n      },\n      link: {\n        i: vn(cn),\n        l: En.LOW,\n        _: function _(n, t, r) {\n          return {\n            content: wn(t, n[1], r),\n            target: Sn(n[2]),\n            title: n[3]\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"a\", {\n            key: r.g,\n            href: bn(n.target),\n            title: n.title\n          }, t(n.content, r));\n        }\n      },\n      linkAngleBraceStyleDetector: {\n        i: vn(O),\n        l: En.MAX,\n        _: function _(n) {\n          return {\n            content: [{\n              content: n[1],\n              type: \"text\"\n            }],\n            target: n[1],\n            type: \"link\"\n          };\n        }\n      },\n      linkBareUrlDetector: {\n        i: function i(n, t) {\n          return t.m ? null : vn(I)(n, t);\n        },\n        l: En.MAX,\n        _: function _(n) {\n          return {\n            content: [{\n              content: n[1],\n              type: \"text\"\n            }],\n            target: n[1],\n            title: void 0,\n            type: \"link\"\n          };\n        }\n      },\n      linkMailtoDetector: {\n        i: vn(M),\n        l: En.MAX,\n        _: function _(n) {\n          var t = n[1],\n            r = n[1];\n          return c.test(r) || (r = \"mailto:\" + r), {\n            content: [{\n              content: t.replace(\"mailto:\", \"\"),\n              type: \"text\"\n            }],\n            target: r,\n            type: \"link\"\n          };\n        }\n      },\n      list: {\n        i: function i(n, t, r) {\n          var e = L.exec(r);\n          return !e || !t.v && t.o ? null : un.exec(n = e[1] + n);\n        },\n        l: En.HIGH,\n        _: function _(n, t, r) {\n          var e = n[2],\n            o = e.length > 1,\n            u = o ? +e : void 0,\n            a = n[0].replace(i, \"\\n\").match(on),\n            c = !1;\n          return {\n            items: a.map(function (n, e) {\n              var o = en.exec(n)[0].length,\n                u = new RegExp(\"^ {1,\" + o + \"}\", \"gm\"),\n                i = n.replace(u, \"\").replace(en, \"\"),\n                f = e === a.length - 1,\n                l = -1 !== i.indexOf(\"\\n\\n\") || f && c;\n              c = l;\n              var s,\n                _ = r.o,\n                d = r.v;\n              r.v = !0, l ? (r.o = !1, s = i.replace(B, \"\\n\\n\")) : (r.o = !0, s = i.replace(B, \"\"));\n              var p = t(s, r);\n              return r.o = _, r.v = d, p;\n            }),\n            ordered: o,\n            start: u\n          };\n        },\n        p: function p(n, t, r) {\n          return U(n.ordered ? \"ol\" : \"ul\", {\n            key: r.g,\n            start: n.start\n          }, n.items.map(function (n, e) {\n            return U(\"li\", {\n              key: e\n            }, t(n, r));\n          }));\n        }\n      },\n      newlineCoalescer: {\n        i: hn(m),\n        l: En.LOW,\n        _: Rn,\n        p: function p() {\n          return \"\\n\";\n        }\n      },\n      paragraph: {\n        i: xn,\n        l: En.LOW,\n        _: An,\n        p: function p(n, t, r) {\n          return U(\"p\", {\n            key: r.g\n          }, t(n.content, r));\n        }\n      },\n      ref: {\n        i: vn(C),\n        l: En.MAX,\n        _: function _(n) {\n          return an[n[1]] = {\n            target: n[2],\n            title: n[4]\n          }, {};\n        },\n        p: In\n      },\n      refImage: {\n        i: yn(D),\n        l: En.MAX,\n        _: function _(n) {\n          return {\n            alt: n[1] || void 0,\n            ref: n[2]\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"img\", {\n            key: r.g,\n            alt: n.alt,\n            src: bn(an[n.ref].target),\n            title: an[n.ref].title\n          });\n        }\n      },\n      refLink: {\n        i: vn(N),\n        l: En.MAX,\n        _: function _(n, t, r) {\n          return {\n            content: t(n[1], r),\n            fallbackContent: t(n[0].replace(Z, \"\\\\$1\"), r),\n            ref: n[2]\n          };\n        },\n        p: function p(n, t, r) {\n          return an[n.ref] ? U(\"a\", {\n            key: r.g,\n            href: bn(an[n.ref].target),\n            title: an[n.ref].title\n          }, t(n.content, r)) : U(\"span\", {\n            key: r.g\n          }, t(n.fallbackContent, r));\n        }\n      },\n      table: {\n        i: hn(j),\n        l: En.HIGH,\n        _: gn,\n        p: function p(n, t, r) {\n          return U(\"table\", {\n            key: r.g\n          }, U(\"thead\", null, U(\"tr\", null, n.header.map(function (e, o) {\n            return U(\"th\", {\n              key: o,\n              style: mn(n, o)\n            }, t(e, r));\n          }))), U(\"tbody\", null, n.cells.map(function (e, o) {\n            return U(\"tr\", {\n              key: o\n            }, e.map(function (e, o) {\n              return U(\"td\", {\n                key: o,\n                style: mn(n, o)\n              }, t(e, r));\n            }));\n          })));\n        }\n      },\n      tableSeparator: {\n        i: function i(n, t) {\n          return t.t ? G.exec(n) : null;\n        },\n        l: En.HIGH,\n        _: function _() {\n          return {\n            type: \"tableSeparator\"\n          };\n        },\n        p: function p() {\n          return \" | \";\n        }\n      },\n      text: {\n        i: kn(Y),\n        l: En.MIN,\n        _: function _(n) {\n          return {\n            content: n[0].replace(w, function (n, t) {\n              return H.namedCodesToUnicode[t] ? H.namedCodesToUnicode[t] : n;\n            })\n          };\n        },\n        p: function p(n) {\n          return n.content;\n        }\n      },\n      textBolded: {\n        i: yn(Q),\n        l: En.MED,\n        _: function _(n, t, r) {\n          return {\n            content: t(n[2], r)\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"strong\", {\n            key: r.g\n          }, t(n.content, r));\n        }\n      },\n      textEmphasized: {\n        i: yn(X),\n        l: En.LOW,\n        _: function _(n, t, r) {\n          return {\n            content: t(n[2], r)\n          };\n        },\n        p: function p(n, t, r) {\n          return U(\"em\", {\n            key: r.g\n          }, t(n.content, r));\n        }\n      },\n      textEscaped: {\n        i: yn(K),\n        l: En.HIGH,\n        _: function _(n) {\n          return {\n            content: n[1],\n            type: \"text\"\n          };\n        }\n      },\n      textStrikethroughed: {\n        i: yn(J),\n        l: En.LOW,\n        _: An,\n        p: function p(n, t, r) {\n          return U(\"del\", {\n            key: r.g\n          }, t(n.content, r));\n        }\n      }\n    };\n  !0 !== H.disableParsingRawHTML && (ln.htmlBlock = {\n    i: kn($),\n    l: En.HIGH,\n    _: function _(n, t, r) {\n      var e,\n        o = n[3].match(tn),\n        a = new RegExp(\"^\" + o[1], \"gm\"),\n        c = n[3].replace(a, \"\"),\n        i = (e = c, sn.some(function (n) {\n          return n.test(e);\n        }) ? zn : $n),\n        f = n[1].toLowerCase(),\n        l = -1 !== u.indexOf(f);\n      r.m = r.m || \"a\" === f;\n      var s = l ? n[3] : i(t, c, r);\n      return r.m = !1, {\n        attrs: W(n[2]),\n        content: s,\n        noInnerParse: l,\n        tag: l ? f : n[1]\n      };\n    },\n    p: function p(n, r, e) {\n      return U(n.tag, t({\n        key: e.g\n      }, n.attrs), n.noInnerParse ? n.content : r(n.content, e));\n    }\n  }, ln.htmlSelfClosing = {\n    i: kn(A),\n    l: En.HIGH,\n    _: function _(n) {\n      return {\n        attrs: W(n[2] || \"\"),\n        tag: n[1]\n      };\n    },\n    p: function p(n, r, e) {\n      return U(n.tag, t({}, n.attrs, {\n        key: e.g\n      }));\n    }\n  });\n  var dn,\n    pn = function (n) {\n      var t = Object.keys(n);\n      function r(e, o) {\n        for (var u = [], a = \"\"; e;) for (var c = 0; c < t.length;) {\n          var i = t[c],\n            f = n[i],\n            l = f.i(e, o, a);\n          if (l) {\n            var s = l[0];\n            e = e.substring(s.length);\n            var _ = f._(l, r, o);\n            null == _.type && (_.type = i), u.push(_), a = s;\n            break;\n          }\n          c++;\n        }\n        return u;\n      }\n      return t.sort(function (t, r) {\n        var e = n[t].l,\n          o = n[r].l;\n        return e !== o ? e - o : t < r ? -1 : 1;\n      }), function (n, t) {\n        return r(function (n) {\n          return n.replace(v, \"\\n\").replace(k, \"\").replace(P, \"    \");\n        }(n), t);\n      };\n    }(ln),\n    Ln = (dn = function (n) {\n      return function (t, r, e) {\n        return n[t.type].p(t, r, e);\n      };\n    }(ln), function n(t, r) {\n      if (void 0 === r && (r = {}), Array.isArray(t)) {\n        for (var e = r.g, o = [], u = !1, a = 0; a < t.length; a++) {\n          r.g = a;\n          var c = n(t[a], r),\n            i = \"string\" == typeof c;\n          i && u ? o[o.length - 1] += c : null !== c && o.push(c), u = i;\n        }\n        return r.g = e, o;\n      }\n      return dn(t, n, r);\n    }),\n    Tn = V(r);\n  return rn.length ? U(\"div\", null, Tn, U(\"footer\", {\n    key: \"footer\"\n  }, rn.map(function (n) {\n    return U(\"div\", {\n      id: H.slugify(n.identifier),\n      key: n.identifier\n    }, n.identifier, Ln(pn(n.footnote, {\n      o: !0\n    })));\n  }))) : Tn;\n}\n!function (n) {\n  n[n.MAX = 0] = \"MAX\", n[n.HIGH = 1] = \"HIGH\", n[n.MED = 2] = \"MED\", n[n.LOW = 3] = \"LOW\", n[n.MIN = 4] = \"MIN\";\n}(En || (En = {}));\nexport default function (t) {\n  var e = t.children,\n    o = t.options,\n    u = function (n, t) {\n      if (null == n) return {};\n      var r,\n        e,\n        o = {},\n        u = Object.keys(n);\n      for (e = 0; e < u.length; e++) t.indexOf(r = u[e]) >= 0 || (o[r] = n[r]);\n      return o;\n    }(t, r);\n  return n.cloneElement(Ln(e, o), u);\n}\nexport { Ln as compiler };","map":{"version":3,"sources":["../index.tsx"],"names":["ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_R","LINK_INSIDE","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","input","some","r","test","str","first","length","slice","slugify","replace","parseTableAlignCapture","alignCapture","parseTableRow","source","parse","state","prevInTable","_inTable","tableRow","trim","cells","forEach","node","i","type","push","content","split","map","rowText","parseTable","capture","_inline","header","align","parseTableCells","getTableStyle","colIndex","textAlign","key","indexOf","match","_","letter","toUpperCase","value","styles","kvPair","substr","sanitizeUrl","rules","ruleList","Object","keys","sort","typeA","typeB","orderA","_order","orderB","nestedParse","result","prevCapture","ruleType","rule","_match","currCaptureString","substring","parsed","_parse","normalizeWhitespace","inlineRegex","regex","exec","simpleInlineRegex","_simple","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","every","line","captured","trimEnd","outputFunc","nestedReactOutput","ast","Array","isArray","oldKey","_key","lastWasString","nodeOut","isString","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","_react","cx","filter","Boolean","join","get","src","path","fb","ptr","frags","undefined","shift","getTag","tag","overrides","override","Priority","compiler","markdown","options","createElementFn","createElement","React","h","props","overrideProps","className","compile","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","normalizeAttributeKey","unquote","mappedKey","normalizedValue","attributeValueToJSXPropValue","cloneElement","footnotes","refs","blockQuote","HIGH","output","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_inAnchor","linkMailtoDetector","address","list","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","item","space","spaceRegex","isLastItem","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","trimmer","trimmed","parseFunc","tagName","noInnerParse","attrs","htmlSelfClosing","parserFor","ruleOutput","def","children"],"mappings":"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","sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce((obj, x) => ((obj[x.toLowerCase()] = x), obj), { for: 'htmlFor' })\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  '^' +\n    LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<\n  ReturnType<typeof parseInline>\n> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node.content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node.target)}>\n            <sup key={state._key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state._key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node.target)}\n            title={node.title}\n          >\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      _match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state._inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state._inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state._inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state._inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state._inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      _react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state._key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, _parse: parse } = rules[key]\n\n  //   rules[key]._match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key]._parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state._key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node.tag {...node.attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n"]},"metadata":{},"sourceType":"module"}