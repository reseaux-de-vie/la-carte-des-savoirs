{"ast":null,"code":"import { Extension } from '@tiptap/core';\nvar TextAlign = Extension.create({\n  name: 'textAlign',\n  addOptions: function addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left'\n    };\n  },\n  addGlobalAttributes: function addGlobalAttributes() {\n    var _this = this;\n    return [{\n      types: this.options.types,\n      attributes: {\n        textAlign: {\n          default: this.options.defaultAlignment,\n          parseHTML: function parseHTML(element) {\n            return element.style.textAlign || _this.options.defaultAlignment;\n          },\n          renderHTML: function renderHTML(attributes) {\n            if (attributes.textAlign === _this.options.defaultAlignment) {\n              return {};\n            }\n            return {\n              style: \"text-align: \".concat(attributes.textAlign)\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands: function addCommands() {\n    var _this2 = this;\n    return {\n      setTextAlign: function setTextAlign(alignment) {\n        return function (_ref) {\n          var commands = _ref.commands;\n          if (!_this2.options.alignments.includes(alignment)) {\n            return false;\n          }\n          return _this2.options.types.every(function (type) {\n            return commands.updateAttributes(type, {\n              textAlign: alignment\n            });\n          });\n        };\n      },\n      unsetTextAlign: function unsetTextAlign() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return _this2.options.types.every(function (type) {\n            return commands.resetAttributes(type, 'textAlign');\n          });\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this3 = this;\n    return {\n      'Mod-Shift-l': function ModShiftL() {\n        return _this3.editor.commands.setTextAlign('left');\n      },\n      'Mod-Shift-e': function ModShiftE() {\n        return _this3.editor.commands.setTextAlign('center');\n      },\n      'Mod-Shift-r': function ModShiftR() {\n        return _this3.editor.commands.setTextAlign('right');\n      },\n      'Mod-Shift-j': function ModShiftJ() {\n        return _this3.editor.commands.setTextAlign('justify');\n      }\n    };\n  }\n});\nexport { TextAlign, TextAlign as default };","map":{"version":3,"sources":["../src/text-align.ts"],"names":[],"mappings":";AAuBa,IAAA,SAAS,GAAG,SAAS,CAAC,MAAM,CAAmB;EAC1D,IAAI,EAAE,WAAW;EAEjB,UAAU,wBAAA;IACR,OAAO;MACL,KAAK,EAAE,EAAE;MACT,UAAU,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC;MAClD,gBAAgB,EAAE;KACnB;GACF;EAED,mBAAmB,iCAAA;IAAA;IACjB,OAAO,CACL;MACE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;MACzB,UAAU,EAAE;QACV,SAAS,EAAE;UACT,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB;UACtC,SAAS,EAAE,mBAAA,OAAO;YAAA,OAAI,OAAO,CAAC,KAAK,CAAC,SAAS,IAAI,KAAI,CAAC,OAAO,CAAC,gBAAgB;UAAA;UAC9E,UAAU,EAAE,oBAAA,UAAU,EAAG;YACvB,IAAI,UAAU,CAAC,SAAS,KAAK,KAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;cAC1D,OAAO,CAAA,CAAE;YACV;YAED,OAAO;cAAE,KAAK,wBAAiB,UAAU,CAAC,SAAS;YAAE,CAAE;UACxD;QACF;MACF;IACF,CAAA,CACF;GACF;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,YAAY,EAAE,sBAAC,SAAiB;QAAA,OAAK,gBAAiB;UAAA,IAAd,QAAQ,QAAR,QAAQ;UAC9C,IAAI,CAAC,MAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAChD,OAAO,KAAK;UACb;UAED,OAAO,MAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,UAAA,IAAI;YAAA,OAAI,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE;cAAE,SAAS,EAAE;YAAS,CAAE,CAAC;UAAA,EAAC;SACnG;MAAA;MAED,cAAc,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAC/B,OAAO,MAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,UAAA,IAAI;YAAA,OAAI,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,WAAW,CAAC;UAAA,EAAC;SACrF;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO;MACL,aAAa,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC;MAAA;MAC9D,aAAa,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC;MAAA;MAChE,aAAa,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC;MAAA;MAC/D,aAAa,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC;MAAA;KAClE;EACF;AACF,CAAA,CAAA","sourcesContent":["import { Extension } from '@tiptap/core'\n\nexport interface TextAlignOptions {\n  types: string[],\n  alignments: string[],\n  defaultAlignment: string,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textAlign: {\n      /**\n       * Set the text align attribute\n       */\n      setTextAlign: (alignment: string) => ReturnType,\n      /**\n       * Unset the text align attribute\n       */\n      unsetTextAlign: () => ReturnType,\n    }\n  }\n}\n\nexport const TextAlign = Extension.create<TextAlignOptions>({\n  name: 'textAlign',\n\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left',\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          textAlign: {\n            default: this.options.defaultAlignment,\n            parseHTML: element => element.style.textAlign || this.options.defaultAlignment,\n            renderHTML: attributes => {\n              if (attributes.textAlign === this.options.defaultAlignment) {\n                return {}\n              }\n\n              return { style: `text-align: ${attributes.textAlign}` }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setTextAlign: (alignment: string) => ({ commands }) => {\n        if (!this.options.alignments.includes(alignment)) {\n          return false\n        }\n\n        return this.options.types.every(type => commands.updateAttributes(type, { textAlign: alignment }))\n      },\n\n      unsetTextAlign: () => ({ commands }) => {\n        return this.options.types.every(type => commands.resetAttributes(type, 'textAlign'))\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify'),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}