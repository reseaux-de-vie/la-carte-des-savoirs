{"ast":null,"code":"/*!\nFullCalendar v5.11.3\nDocs & License: https://fullcalendar.io/\n(c) 2022 Adam Shaw\n*/\nimport './main.css';\nimport { createRef, getStickyHeaderDates, createElement, ViewRoot, SimpleScrollGrid, getStickyFooterScrollbar, renderScrollShim, DateComponent, buildNavLinkAttrs, DayCellContent, Fragment, BaseComponent, createFormatter, StandardEvent, buildSegTimeText, EventRoot, getSegAnchorAttrs, memoize, MoreLinkRoot, getSegMeta, createAriaClickAttrs, getUniqueDomId, setRef, DayCellRoot, WeekNumberRoot, buildEntryKey, intersectSpans, SegHierarchy, intersectRanges, addDays, RefMap, sortEventSegs, isPropsEqual, buildEventRangeKey, BgEvent, renderFill, PositionCache, NowTimer, Slicer, DayHeader, DaySeriesModel, DayTableModel, addWeeks, diffWeeks, DateProfileGenerator, createPlugin } from '@fullcalendar/common';\nimport { __extends, __assign, __spreadArray } from 'tslib';\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\nvar TableView = /** @class */function (_super) {\n  __extends(TableView, _super);\n  function TableView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.headerElRef = createRef();\n    return _this;\n  }\n  TableView.prototype.renderSimpleLayout = function (headerRowContent, bodyContent) {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var sections = [];\n    var stickyHeaderDates = getStickyHeaderDates(context.options);\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunk: {\n        content: bodyContent\n      }\n    });\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-daygrid'].concat(classNames).join(' ')\n      }, createElement(SimpleScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        cols: [] /* TODO: make optional? */,\n        sections: sections\n      }));\n    });\n  };\n  TableView.prototype.renderHScrollLayout = function (headerRowContent, bodyContent, colCnt, dayMinWidth) {\n    var ScrollGrid = this.context.pluginHooks.scrollGridImpl;\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation');\n    }\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options);\n    var stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options);\n    var sections = [];\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunks: [{\n          key: 'main',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent\n        }]\n      });\n    }\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunks: [{\n        key: 'main',\n        content: bodyContent\n      }]\n    });\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'main',\n          content: renderScrollShim\n        }]\n      });\n    }\n    return createElement(ViewRoot, {\n      viewSpec: context.viewSpec\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: ['fc-daygrid'].concat(classNames).join(' ')\n      }, createElement(ScrollGrid, {\n        liquid: !props.isHeightAuto && !props.forPrint,\n        collapsibleWidth: props.forPrint,\n        colGroups: [{\n          cols: [{\n            span: colCnt,\n            minWidth: dayMinWidth\n          }]\n        }],\n        sections: sections\n      }));\n    });\n  };\n  return TableView;\n}(DateComponent);\nfunction splitSegsByRow(segs, rowCnt) {\n  var byRow = [];\n  for (var i = 0; i < rowCnt; i += 1) {\n    byRow[i] = [];\n  }\n  for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n    var seg = segs_1[_i];\n    byRow[seg.row].push(seg);\n  }\n  return byRow;\n}\nfunction splitSegsByFirstCol(segs, colCnt) {\n  var byCol = [];\n  for (var i = 0; i < colCnt; i += 1) {\n    byCol[i] = [];\n  }\n  for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n    var seg = segs_2[_i];\n    byCol[seg.firstCol].push(seg);\n  }\n  return byCol;\n}\nfunction splitInteractionByRow(ui, rowCnt) {\n  var byRow = [];\n  if (!ui) {\n    for (var i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null;\n    }\n  } else {\n    for (var i = 0; i < rowCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: []\n      };\n    }\n    for (var _i = 0, _a = ui.segs; _i < _a.length; _i++) {\n      var seg = _a[_i];\n      byRow[seg.row].segs.push(seg);\n    }\n  }\n  return byRow;\n}\nvar TableCellTop = /** @class */function (_super) {\n  __extends(TableCellTop, _super);\n  function TableCellTop() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableCellTop.prototype.render = function () {\n    var props = this.props;\n    var navLinkAttrs = buildNavLinkAttrs(this.context, props.date);\n    return createElement(DayCellContent, {\n      date: props.date,\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      showDayNumber: props.showDayNumber,\n      extraHookProps: props.extraHookProps,\n      defaultContent: renderTopInner\n    }, function (innerElRef, innerContent) {\n      return (innerContent || props.forceDayTop) && createElement(\"div\", {\n        className: \"fc-daygrid-day-top\",\n        ref: innerElRef\n      }, createElement(\"a\", __assign({\n        id: props.dayNumberId,\n        className: \"fc-daygrid-day-number\"\n      }, navLinkAttrs), innerContent || createElement(Fragment, null, \"\\xA0\")));\n    });\n  };\n  return TableCellTop;\n}(BaseComponent);\nfunction renderTopInner(props) {\n  return props.dayNumberText;\n}\nvar DEFAULT_TABLE_EVENT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow'\n});\nfunction hasListItemDisplay(seg) {\n  var display = seg.eventRange.ui.display;\n  return display === 'list-item' || display === 'auto' && !seg.eventRange.def.allDay && seg.firstCol === seg.lastCol &&\n  // can't be multi-day\n  seg.isStart &&\n  // \"\n  seg.isEnd // \"\n  ;\n}\n\nvar TableBlockEvent = /** @class */function (_super) {\n  __extends(TableBlockEvent, _super);\n  function TableBlockEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableBlockEvent.prototype.render = function () {\n    var props = this.props;\n    return createElement(StandardEvent, __assign({}, props, {\n      extraClassNames: ['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event'],\n      defaultTimeFormat: DEFAULT_TABLE_EVENT_TIME_FORMAT,\n      defaultDisplayEventEnd: props.defaultDisplayEventEnd,\n      disableResizing: !props.seg.eventRange.def.allDay\n    }));\n  };\n  return TableBlockEvent;\n}(BaseComponent);\nvar TableListItemEvent = /** @class */function (_super) {\n  __extends(TableListItemEvent, _super);\n  function TableListItemEvent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  TableListItemEvent.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    var timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT;\n    var timeText = buildSegTimeText(props.seg, timeFormat, context, true, props.defaultDisplayEventEnd);\n    return createElement(EventRoot, {\n      seg: props.seg,\n      timeText: timeText,\n      defaultContent: renderInnerContent,\n      isDragging: props.isDragging,\n      isResizing: false,\n      isDateSelecting: false,\n      isSelected: props.isSelected,\n      isPast: props.isPast,\n      isFuture: props.isFuture,\n      isToday: props.isToday\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return (\n        // we don't use styles!\n        createElement(\"a\", __assign({\n          className: ['fc-daygrid-event', 'fc-daygrid-dot-event'].concat(classNames).join(' '),\n          ref: rootElRef\n        }, getSegAnchorAttrs(props.seg, context)), innerContent)\n      );\n    });\n  };\n  return TableListItemEvent;\n}(BaseComponent);\nfunction renderInnerContent(innerProps) {\n  return createElement(Fragment, null, createElement(\"div\", {\n    className: \"fc-daygrid-event-dot\",\n    style: {\n      borderColor: innerProps.borderColor || innerProps.backgroundColor\n    }\n  }), innerProps.timeText && createElement(\"div\", {\n    className: \"fc-event-time\"\n  }, innerProps.timeText), createElement(\"div\", {\n    className: \"fc-event-title\"\n  }, innerProps.event.title || createElement(Fragment, null, \"\\xA0\")));\n}\nvar TableCellMoreLink = /** @class */function (_super) {\n  __extends(TableCellMoreLink, _super);\n  function TableCellMoreLink() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.compileSegs = memoize(compileSegs);\n    return _this;\n  }\n  TableCellMoreLink.prototype.render = function () {\n    var props = this.props;\n    var _a = this.compileSegs(props.singlePlacements),\n      allSegs = _a.allSegs,\n      invisibleSegs = _a.invisibleSegs;\n    return createElement(MoreLinkRoot, {\n      dateProfile: props.dateProfile,\n      todayRange: props.todayRange,\n      allDayDate: props.allDayDate,\n      moreCnt: props.moreCnt,\n      allSegs: allSegs,\n      hiddenSegs: invisibleSegs,\n      alignmentElRef: props.alignmentElRef,\n      alignGridTop: props.alignGridTop,\n      extraDateSpan: props.extraDateSpan,\n      popoverContent: function popoverContent() {\n        var isForcedInvisible = (props.eventDrag ? props.eventDrag.affectedInstances : null) || (props.eventResize ? props.eventResize.affectedInstances : null) || {};\n        return createElement(Fragment, null, allSegs.map(function (seg) {\n          var instanceId = seg.eventRange.instance.instanceId;\n          return createElement(\"div\", {\n            className: \"fc-daygrid-event-harness\",\n            key: instanceId,\n            style: {\n              visibility: isForcedInvisible[instanceId] ? 'hidden' : ''\n            }\n          }, hasListItemDisplay(seg) ? createElement(TableListItemEvent, __assign({\n            seg: seg,\n            isDragging: false,\n            isSelected: instanceId === props.eventSelection,\n            defaultDisplayEventEnd: false\n          }, getSegMeta(seg, props.todayRange))) : createElement(TableBlockEvent, __assign({\n            seg: seg,\n            isDragging: false,\n            isResizing: false,\n            isDateSelecting: false,\n            isSelected: instanceId === props.eventSelection,\n            defaultDisplayEventEnd: false\n          }, getSegMeta(seg, props.todayRange))));\n        }));\n      }\n    }, function (rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) {\n      return createElement(\"a\", __assign({\n        ref: rootElRef,\n        className: ['fc-daygrid-more-link'].concat(classNames).join(' '),\n        title: title,\n        \"aria-expanded\": isExpanded,\n        \"aria-controls\": popoverId\n      }, createAriaClickAttrs(handleClick)), innerContent);\n    });\n  };\n  return TableCellMoreLink;\n}(BaseComponent);\nfunction compileSegs(singlePlacements) {\n  var allSegs = [];\n  var invisibleSegs = [];\n  for (var _i = 0, singlePlacements_1 = singlePlacements; _i < singlePlacements_1.length; _i++) {\n    var placement = singlePlacements_1[_i];\n    allSegs.push(placement.seg);\n    if (!placement.isVisible) {\n      invisibleSegs.push(placement.seg);\n    }\n  }\n  return {\n    allSegs: allSegs,\n    invisibleSegs: invisibleSegs\n  };\n}\nvar DEFAULT_WEEK_NUM_FORMAT = createFormatter({\n  week: 'narrow'\n});\nvar TableCell = /** @class */function (_super) {\n  __extends(TableCell, _super);\n  function TableCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.rootElRef = createRef();\n    _this.state = {\n      dayNumberId: getUniqueDomId()\n    };\n    _this.handleRootEl = function (el) {\n      setRef(_this.rootElRef, el);\n      setRef(_this.props.elRef, el);\n    };\n    return _this;\n  }\n  TableCell.prototype.render = function () {\n    var _a = this,\n      context = _a.context,\n      props = _a.props,\n      state = _a.state,\n      rootElRef = _a.rootElRef;\n    var date = props.date,\n      dateProfile = props.dateProfile;\n    var navLinkAttrs = buildNavLinkAttrs(context, date, 'week');\n    return createElement(DayCellRoot, {\n      date: date,\n      dateProfile: dateProfile,\n      todayRange: props.todayRange,\n      showDayNumber: props.showDayNumber,\n      extraHookProps: props.extraHookProps,\n      elRef: this.handleRootEl\n    }, function (dayElRef, dayClassNames, rootDataAttrs, isDisabled) {\n      return createElement(\"td\", __assign({\n        ref: dayElRef,\n        role: \"gridcell\",\n        className: ['fc-daygrid-day'].concat(dayClassNames, props.extraClassNames || []).join(' ')\n      }, rootDataAttrs, props.extraDataAttrs, props.showDayNumber ? {\n        'aria-labelledby': state.dayNumberId\n      } : {}), createElement(\"div\", {\n        className: \"fc-daygrid-day-frame fc-scrollgrid-sync-inner\",\n        ref: props.innerElRef /* different from hook system! RENAME */\n      }, props.showWeekNumber && createElement(WeekNumberRoot, {\n        date: date,\n        defaultFormat: DEFAULT_WEEK_NUM_FORMAT\n      }, function (weekElRef, weekClassNames, innerElRef, innerContent) {\n        return createElement(\"a\", __assign({\n          ref: weekElRef,\n          className: ['fc-daygrid-week-number'].concat(weekClassNames).join(' ')\n        }, navLinkAttrs), innerContent);\n      }), !isDisabled && createElement(TableCellTop, {\n        date: date,\n        dateProfile: dateProfile,\n        showDayNumber: props.showDayNumber,\n        dayNumberId: state.dayNumberId,\n        forceDayTop: props.forceDayTop,\n        todayRange: props.todayRange,\n        extraHookProps: props.extraHookProps\n      }), createElement(\"div\", {\n        className: \"fc-daygrid-day-events\",\n        ref: props.fgContentElRef\n      }, props.fgContent, createElement(\"div\", {\n        className: \"fc-daygrid-day-bottom\",\n        style: {\n          marginTop: props.moreMarginTop\n        }\n      }, createElement(TableCellMoreLink, {\n        allDayDate: date,\n        singlePlacements: props.singlePlacements,\n        moreCnt: props.moreCnt,\n        alignmentElRef: rootElRef,\n        alignGridTop: !props.showDayNumber,\n        extraDateSpan: props.extraDateSpan,\n        dateProfile: props.dateProfile,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        todayRange: props.todayRange\n      }))), createElement(\"div\", {\n        className: \"fc-daygrid-day-bg\"\n      }, props.bgContent)));\n    });\n  };\n  return TableCell;\n}(DateComponent);\nfunction computeFgSegPlacement(segs,\n// assumed already sorted\ndayMaxEvents, dayMaxEventRows, strictOrder, eventInstanceHeights, maxContentHeight, cells) {\n  var hierarchy = new DayGridSegHierarchy();\n  hierarchy.allowReslicing = true;\n  hierarchy.strictOrder = strictOrder;\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight;\n    hierarchy.hiddenConsumes = true;\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents;\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows;\n    hierarchy.hiddenConsumes = true;\n  }\n  // create segInputs only for segs with known heights\n  var segInputs = [];\n  var unknownHeightSegs = [];\n  for (var i = 0; i < segs.length; i += 1) {\n    var seg = segs[i];\n    var instanceId = seg.eventRange.instance.instanceId;\n    var eventHeight = eventInstanceHeights[instanceId];\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        thickness: eventHeight,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1\n        }\n      });\n    } else {\n      unknownHeightSegs.push(seg);\n    }\n  }\n  var hiddenEntries = hierarchy.addSegs(segInputs);\n  var segRects = hierarchy.toRects();\n  var _a = placeRects(segRects, segs, cells),\n    singleColPlacements = _a.singleColPlacements,\n    multiColPlacements = _a.multiColPlacements,\n    leftoverMargins = _a.leftoverMargins;\n  var moreCnts = [];\n  var moreMarginTops = [];\n  // add segs with unknown heights\n  for (var _i = 0, unknownHeightSegs_1 = unknownHeightSegs; _i < unknownHeightSegs_1.length; _i++) {\n    var seg = unknownHeightSegs_1[_i];\n    multiColPlacements[seg.firstCol].push({\n      seg: seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n    for (var col = seg.firstCol; col <= seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  }\n  // add the hidden entries\n  for (var col = 0; col < cells.length; col += 1) {\n    moreCnts.push(0);\n  }\n  for (var _b = 0, hiddenEntries_1 = hiddenEntries; _b < hiddenEntries_1.length; _b++) {\n    var hiddenEntry = hiddenEntries_1[_b];\n    var seg = segs[hiddenEntry.index];\n    var hiddenSpan = hiddenEntry.span;\n    multiColPlacements[hiddenSpan.start].push({\n      seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0\n    });\n    for (var col = hiddenSpan.start; col < hiddenSpan.end; col += 1) {\n      moreCnts[col] += 1;\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0\n      });\n    }\n  }\n  // deal with leftover margins\n  for (var col = 0; col < cells.length; col += 1) {\n    moreMarginTops.push(leftoverMargins[col]);\n  }\n  return {\n    singleColPlacements: singleColPlacements,\n    multiColPlacements: multiColPlacements,\n    moreCnts: moreCnts,\n    moreMarginTops: moreMarginTops\n  };\n}\n// rects ordered by top coord, then left\nfunction placeRects(allRects, segs, cells) {\n  var rectsByEachCol = groupRectsByEachCol(allRects, cells.length);\n  var singleColPlacements = [];\n  var multiColPlacements = [];\n  var leftoverMargins = [];\n  for (var col = 0; col < cells.length; col += 1) {\n    var rects = rectsByEachCol[col];\n    // compute all static segs in singlePlacements\n    var singlePlacements = [];\n    var currentHeight = 0;\n    var currentMarginTop = 0;\n    for (var _i = 0, rects_1 = rects; _i < rects_1.length; _i++) {\n      var rect = rects_1[_i];\n      var seg = segs[rect.index];\n      singlePlacements.push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: true,\n        isAbsolute: false,\n        absoluteTop: rect.levelCoord,\n        marginTop: rect.levelCoord - currentHeight\n      });\n      currentHeight = rect.levelCoord + rect.thickness;\n    }\n    // compute mixed static/absolute segs in multiPlacements\n    var multiPlacements = [];\n    currentHeight = 0;\n    currentMarginTop = 0;\n    for (var _a = 0, rects_2 = rects; _a < rects_2.length; _a++) {\n      var rect = rects_2[_a];\n      var seg = segs[rect.index];\n      var isAbsolute = rect.span.end - rect.span.start > 1; // multi-column?\n      var isFirstCol = rect.span.start === col;\n      currentMarginTop += rect.levelCoord - currentHeight; // amount of space since bottom of previous seg\n      currentHeight = rect.levelCoord + rect.thickness; // height will now be bottom of current seg\n      if (isAbsolute) {\n        currentMarginTop += rect.thickness;\n        if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: rect.levelCoord,\n            marginTop: 0\n          });\n        }\n      } else if (isFirstCol) {\n        multiPlacements.push({\n          seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: currentMarginTop // claim the margin\n        });\n\n        currentMarginTop = 0;\n      }\n    }\n    singleColPlacements.push(singlePlacements);\n    multiColPlacements.push(multiPlacements);\n    leftoverMargins.push(currentMarginTop);\n  }\n  return {\n    singleColPlacements: singleColPlacements,\n    multiColPlacements: multiColPlacements,\n    leftoverMargins: leftoverMargins\n  };\n}\nfunction groupRectsByEachCol(rects, colCnt) {\n  var rectsByEachCol = [];\n  for (var col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([]);\n  }\n  for (var _i = 0, rects_3 = rects; _i < rects_3.length; _i++) {\n    var rect = rects_3[_i];\n    for (var col = rect.span.start; col < rect.span.end; col += 1) {\n      rectsByEachCol[col].push(rect);\n    }\n  }\n  return rectsByEachCol;\n}\nfunction resliceSeg(seg, spanStart, spanEnd, cells) {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg;\n  }\n  var eventRange = seg.eventRange;\n  var origRange = eventRange.range;\n  var slicedRange = intersectRanges(origRange, {\n    start: cells[spanStart].date,\n    end: addDays(cells[spanEnd - 1].date, 1)\n  });\n  return __assign(__assign({}, seg), {\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: __assign(__assign({}, eventRange.ui), {\n        durationEditable: false\n      }),\n      instance: eventRange.instance,\n      range: slicedRange\n    },\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()\n  });\n}\nvar DayGridSegHierarchy = /** @class */function (_super) {\n  __extends(DayGridSegHierarchy, _super);\n  function DayGridSegHierarchy() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // config\n    _this.hiddenConsumes = false;\n    // allows us to keep hidden entries in the hierarchy so they take up space\n    _this.forceHidden = {};\n    return _this;\n  }\n  DayGridSegHierarchy.prototype.addSegs = function (segInputs) {\n    var _this = this;\n    var hiddenSegs = _super.prototype.addSegs.call(this, segInputs);\n    var entriesByLevel = this.entriesByLevel;\n    var excludeHidden = function excludeHidden(entry) {\n      return !_this.forceHidden[buildEntryKey(entry)];\n    };\n    // remove the forced-hidden segs\n    for (var level = 0; level < entriesByLevel.length; level += 1) {\n      entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden);\n    }\n    return hiddenSegs;\n  };\n  DayGridSegHierarchy.prototype.handleInvalidInsertion = function (insertion, entry, hiddenEntries) {\n    var _a = this,\n      entriesByLevel = _a.entriesByLevel,\n      forceHidden = _a.forceHidden;\n    var touchingEntry = insertion.touchingEntry,\n      touchingLevel = insertion.touchingLevel,\n      touchingLateral = insertion.touchingLateral;\n    if (this.hiddenConsumes && touchingEntry) {\n      var touchingEntryId = buildEntryKey(touchingEntry);\n      // if not already hidden\n      if (!forceHidden[touchingEntryId]) {\n        if (this.allowReslicing) {\n          var placeholderEntry = __assign(__assign({}, touchingEntry), {\n            span: intersectSpans(touchingEntry.span, entry.span)\n          });\n          var placeholderEntryId = buildEntryKey(placeholderEntry);\n          forceHidden[placeholderEntryId] = true;\n          entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry; // replace touchingEntry with our placeholder\n          this.splitEntry(touchingEntry, entry, hiddenEntries); // split up the touchingEntry, reinsert it\n        } else {\n          forceHidden[touchingEntryId] = true;\n          hiddenEntries.push(touchingEntry);\n        }\n      }\n    }\n    return _super.prototype.handleInvalidInsertion.call(this, insertion, entry, hiddenEntries);\n  };\n  return DayGridSegHierarchy;\n}(SegHierarchy);\nvar TableRow = /** @class */function (_super) {\n  __extends(TableRow, _super);\n  function TableRow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.cellElRefs = new RefMap(); // the <td>\n    _this.frameElRefs = new RefMap(); // the fc-daygrid-day-frame\n    _this.fgElRefs = new RefMap(); // the fc-daygrid-day-events\n    _this.segHarnessRefs = new RefMap(); // indexed by \"instanceId:firstCol\"\n    _this.rootElRef = createRef();\n    _this.state = {\n      framePositions: null,\n      maxContentHeight: null,\n      eventInstanceHeights: {}\n    };\n    return _this;\n  }\n  TableRow.prototype.render = function () {\n    var _this = this;\n    var _a = this,\n      props = _a.props,\n      state = _a.state,\n      context = _a.context;\n    var options = context.options;\n    var colCnt = props.cells.length;\n    var businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt);\n    var bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt);\n    var highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt);\n    var mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt);\n    var _b = computeFgSegPlacement(sortEventSegs(props.fgEventSegs, options.eventOrder), props.dayMaxEvents, props.dayMaxEventRows, options.eventOrderStrict, state.eventInstanceHeights, state.maxContentHeight, props.cells),\n      singleColPlacements = _b.singleColPlacements,\n      multiColPlacements = _b.multiColPlacements,\n      moreCnts = _b.moreCnts,\n      moreMarginTops = _b.moreMarginTops;\n    var isForcedInvisible =\n    // TODO: messy way to compute this\n    props.eventDrag && props.eventDrag.affectedInstances || props.eventResize && props.eventResize.affectedInstances || {};\n    return createElement(\"tr\", {\n      ref: this.rootElRef,\n      role: \"row\"\n    }, props.renderIntro && props.renderIntro(), props.cells.map(function (cell, col) {\n      var normalFgNodes = _this.renderFgSegs(col, props.forPrint ? singleColPlacements[col] : multiColPlacements[col], props.todayRange, isForcedInvisible);\n      var mirrorFgNodes = _this.renderFgSegs(col, buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements), props.todayRange, {}, Boolean(props.eventDrag), Boolean(props.eventResize), false);\n      return createElement(TableCell, {\n        key: cell.key,\n        elRef: _this.cellElRefs.createRef(cell.key),\n        innerElRef: _this.frameElRefs.createRef(cell.key) /* FF <td> problem, but okay to use for left/right. TODO: rename prop */,\n        dateProfile: props.dateProfile,\n        date: cell.date,\n        showDayNumber: props.showDayNumbers,\n        showWeekNumber: props.showWeekNumbers && col === 0,\n        forceDayTop: props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */,\n        todayRange: props.todayRange,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        extraHookProps: cell.extraHookProps,\n        extraDataAttrs: cell.extraDataAttrs,\n        extraClassNames: cell.extraClassNames,\n        extraDateSpan: cell.extraDateSpan,\n        moreCnt: moreCnts[col],\n        moreMarginTop: moreMarginTops[col],\n        singlePlacements: singleColPlacements[col],\n        fgContentElRef: _this.fgElRefs.createRef(cell.key),\n        fgContent:\n        // Fragment scopes the keys\n        createElement(Fragment, null, createElement(Fragment, null, normalFgNodes), createElement(Fragment, null, mirrorFgNodes)),\n        bgContent:\n        // Fragment scopes the keys\n        createElement(Fragment, null, _this.renderFillSegs(highlightSegsByCol[col], 'highlight'), _this.renderFillSegs(businessHoursByCol[col], 'non-business'), _this.renderFillSegs(bgEventSegsByCol[col], 'bg-event'))\n      });\n    }));\n  };\n  TableRow.prototype.componentDidMount = function () {\n    this.updateSizing(true);\n  };\n  TableRow.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var currentProps = this.props;\n    this.updateSizing(!isPropsEqual(prevProps, currentProps));\n  };\n  TableRow.prototype.getHighlightSegs = function () {\n    var props = this.props;\n    if (props.eventDrag && props.eventDrag.segs.length) {\n      // messy check\n      return props.eventDrag.segs;\n    }\n    if (props.eventResize && props.eventResize.segs.length) {\n      // messy check\n      return props.eventResize.segs;\n    }\n    return props.dateSelectionSegs;\n  };\n  TableRow.prototype.getMirrorSegs = function () {\n    var props = this.props;\n    if (props.eventResize && props.eventResize.segs.length) {\n      // messy check\n      return props.eventResize.segs;\n    }\n    return [];\n  };\n  TableRow.prototype.renderFgSegs = function (col, segPlacements, todayRange, isForcedInvisible, isDragging, isResizing, isDateSelecting) {\n    var context = this.context;\n    var eventSelection = this.props.eventSelection;\n    var framePositions = this.state.framePositions;\n    var defaultDisplayEventEnd = this.props.cells.length === 1; // colCnt === 1\n    var isMirror = isDragging || isResizing || isDateSelecting;\n    var nodes = [];\n    if (framePositions) {\n      for (var _i = 0, segPlacements_1 = segPlacements; _i < segPlacements_1.length; _i++) {\n        var placement = segPlacements_1[_i];\n        var seg = placement.seg;\n        var instanceId = seg.eventRange.instance.instanceId;\n        var key = instanceId + ':' + col;\n        var isVisible = placement.isVisible && !isForcedInvisible[instanceId];\n        var isAbsolute = placement.isAbsolute;\n        var left = '';\n        var right = '';\n        if (isAbsolute) {\n          if (context.isRtl) {\n            right = 0;\n            left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol];\n          } else {\n            left = 0;\n            right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol];\n          }\n        }\n        /*\n        known bug: events that are force to be list-item but span multiple days still take up space in later columns\n        todo: in print view, for multi-day events, don't display title within non-start/end segs\n        */\n        nodes.push(createElement(\"div\", {\n          className: 'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : ''),\n          key: key,\n          ref: isMirror ? null : this.segHarnessRefs.createRef(key),\n          style: {\n            visibility: isVisible ? '' : 'hidden',\n            marginTop: isAbsolute ? '' : placement.marginTop,\n            top: isAbsolute ? placement.absoluteTop : '',\n            left: left,\n            right: right\n          }\n        }, hasListItemDisplay(seg) ? createElement(TableListItemEvent, __assign({\n          seg: seg,\n          isDragging: isDragging,\n          isSelected: instanceId === eventSelection,\n          defaultDisplayEventEnd: defaultDisplayEventEnd\n        }, getSegMeta(seg, todayRange))) : createElement(TableBlockEvent, __assign({\n          seg: seg,\n          isDragging: isDragging,\n          isResizing: isResizing,\n          isDateSelecting: isDateSelecting,\n          isSelected: instanceId === eventSelection,\n          defaultDisplayEventEnd: defaultDisplayEventEnd\n        }, getSegMeta(seg, todayRange)))));\n      }\n    }\n    return nodes;\n  };\n  TableRow.prototype.renderFillSegs = function (segs, fillType) {\n    var isRtl = this.context.isRtl;\n    var todayRange = this.props.todayRange;\n    var framePositions = this.state.framePositions;\n    var nodes = [];\n    if (framePositions) {\n      for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        var leftRightCss = isRtl ? {\n          right: 0,\n          left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n        } : {\n          left: 0,\n          right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n        };\n        nodes.push(createElement(\"div\", {\n          key: buildEventRangeKey(seg.eventRange),\n          className: \"fc-daygrid-bg-harness\",\n          style: leftRightCss\n        }, fillType === 'bg-event' ? createElement(BgEvent, __assign({\n          seg: seg\n        }, getSegMeta(seg, todayRange))) : renderFill(fillType)));\n      }\n    }\n    return createElement.apply(void 0, __spreadArray([Fragment, {}], nodes));\n  };\n  TableRow.prototype.updateSizing = function (isExternalSizingChange) {\n    var _a = this,\n      props = _a.props,\n      frameElRefs = _a.frameElRefs;\n    if (!props.forPrint && props.clientWidth !== null // positioning ready?\n    ) {\n      if (isExternalSizingChange) {\n        var frameEls = props.cells.map(function (cell) {\n          return frameElRefs.currentMap[cell.key];\n        });\n        if (frameEls.length) {\n          var originEl = this.rootElRef.current;\n          this.setState({\n            framePositions: new PositionCache(originEl, frameEls, true,\n            // isHorizontal\n            false)\n          });\n        }\n      }\n      var oldInstanceHeights = this.state.eventInstanceHeights;\n      var newInstanceHeights = this.queryEventInstanceHeights();\n      var limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true;\n      this.safeSetState({\n        // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n        // Essentially, once you compute an element's height, never null-out.\n        // TODO: always display all events, as visibility:hidden?\n        eventInstanceHeights: __assign(__assign({}, oldInstanceHeights), newInstanceHeights),\n        maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null\n      });\n    }\n  };\n  TableRow.prototype.queryEventInstanceHeights = function () {\n    var segElMap = this.segHarnessRefs.currentMap;\n    var eventInstanceHeights = {};\n    // get the max height amongst instance segs\n    for (var key in segElMap) {\n      var height = Math.round(segElMap[key].getBoundingClientRect().height);\n      var instanceId = key.split(':')[0]; // deconstruct how renderFgSegs makes the key\n      eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height);\n    }\n    return eventInstanceHeights;\n  };\n  TableRow.prototype.computeMaxContentHeight = function () {\n    var firstKey = this.props.cells[0].key;\n    var cellEl = this.cellElRefs.currentMap[firstKey];\n    var fcContainerEl = this.fgElRefs.currentMap[firstKey];\n    return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top;\n  };\n  TableRow.prototype.getCellEls = function () {\n    var elMap = this.cellElRefs.currentMap;\n    return this.props.cells.map(function (cell) {\n      return elMap[cell.key];\n    });\n  };\n  return TableRow;\n}(DateComponent);\nTableRow.addStateEquality({\n  eventInstanceHeights: isPropsEqual\n});\nfunction buildMirrorPlacements(mirrorSegs, colPlacements) {\n  if (!mirrorSegs.length) {\n    return [];\n  }\n  var topsByInstanceId = buildAbsoluteTopHash(colPlacements); // TODO: cache this at first render?\n  return mirrorSegs.map(function (seg) {\n    return {\n      seg: seg,\n      isVisible: true,\n      isAbsolute: true,\n      absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n      marginTop: 0\n    };\n  });\n}\nfunction buildAbsoluteTopHash(colPlacements) {\n  var topsByInstanceId = {};\n  for (var _i = 0, colPlacements_1 = colPlacements; _i < colPlacements_1.length; _i++) {\n    var placements = colPlacements_1[_i];\n    for (var _a = 0, placements_1 = placements; _a < placements_1.length; _a++) {\n      var placement = placements_1[_a];\n      topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop;\n    }\n  }\n  return topsByInstanceId;\n}\nvar Table = /** @class */function (_super) {\n  __extends(Table, _super);\n  function Table() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.splitBusinessHourSegs = memoize(splitSegsByRow);\n    _this.splitBgEventSegs = memoize(splitSegsByRow);\n    _this.splitFgEventSegs = memoize(splitSegsByRow);\n    _this.splitDateSelectionSegs = memoize(splitSegsByRow);\n    _this.splitEventDrag = memoize(splitInteractionByRow);\n    _this.splitEventResize = memoize(splitInteractionByRow);\n    _this.rowRefs = new RefMap();\n    _this.handleRootEl = function (rootEl) {\n      _this.rootEl = rootEl;\n      if (rootEl) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: rootEl,\n          isHitComboAllowed: _this.props.isHitComboAllowed\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n    return _this;\n  }\n  Table.prototype.render = function () {\n    var _this = this;\n    var props = this.props;\n    var dateProfile = props.dateProfile,\n      dayMaxEventRows = props.dayMaxEventRows,\n      dayMaxEvents = props.dayMaxEvents,\n      expandRows = props.expandRows;\n    var rowCnt = props.cells.length;\n    var businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt);\n    var bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt);\n    var fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt);\n    var dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt);\n    var eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt);\n    var eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt);\n    var limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true;\n    // if rows can't expand to fill fixed height, can't do balanced-height event limit\n    // TODO: best place to normalize these options?\n    if (limitViaBalanced && !expandRows) {\n      limitViaBalanced = false;\n      dayMaxEventRows = null;\n      dayMaxEvents = null;\n    }\n    var classNames = ['fc-daygrid-body', limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', expandRows ? '' : 'fc-daygrid-body-natural' // will height of one row depend on the others?\n    ];\n\n    return createElement(\"div\", {\n      className: classNames.join(' '),\n      ref: this.handleRootEl,\n      style: {\n        // these props are important to give this wrapper correct dimensions for interactions\n        // TODO: if we set it here, can we avoid giving to inner tables?\n        width: props.clientWidth,\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(NowTimer, {\n      unit: \"day\"\n    }, function (nowDate, todayRange) {\n      return createElement(Fragment, null, createElement(\"table\", {\n        role: \"presentation\",\n        className: \"fc-scrollgrid-sync-table\",\n        style: {\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n          height: expandRows ? props.clientHeight : ''\n        }\n      }, props.colGroupNode, createElement(\"tbody\", {\n        role: \"presentation\"\n      }, props.cells.map(function (cells, row) {\n        return createElement(TableRow, {\n          ref: _this.rowRefs.createRef(row),\n          key: cells.length ? cells[0].date.toISOString() /* best? or put key on cell? or use diff formatter? */ : row // in case there are no cells (like when resource view is loading)\n          ,\n          showDayNumbers: rowCnt > 1,\n          showWeekNumbers: props.showWeekNumbers,\n          todayRange: todayRange,\n          dateProfile: dateProfile,\n          cells: cells,\n          renderIntro: props.renderRowIntro,\n          businessHourSegs: businessHourSegsByRow[row],\n          eventSelection: props.eventSelection,\n          bgEventSegs: bgEventSegsByRow[row].filter(isSegAllDay) /* hack */,\n          fgEventSegs: fgEventSegsByRow[row],\n          dateSelectionSegs: dateSelectionSegsByRow[row],\n          eventDrag: eventDragByRow[row],\n          eventResize: eventResizeByRow[row],\n          dayMaxEvents: dayMaxEvents,\n          dayMaxEventRows: dayMaxEventRows,\n          clientWidth: props.clientWidth,\n          clientHeight: props.clientHeight,\n          forPrint: props.forPrint\n        });\n      }))));\n    }));\n  };\n  // Hit System\n  // ----------------------------------------------------------------------------------------------------\n  Table.prototype.prepareHits = function () {\n    this.rowPositions = new PositionCache(this.rootEl, this.rowRefs.collect().map(function (rowObj) {\n      return rowObj.getCellEls()[0];\n    }),\n    // first cell el in each row. TODO: not optimal\n    false, true);\n    this.colPositions = new PositionCache(this.rootEl, this.rowRefs.currentMap[0].getCellEls(),\n    // cell els in first row\n    true,\n    // horizontal\n    false);\n  };\n  Table.prototype.queryHit = function (positionLeft, positionTop) {\n    var _a = this,\n      colPositions = _a.colPositions,\n      rowPositions = _a.rowPositions;\n    var col = colPositions.leftToIndex(positionLeft);\n    var row = rowPositions.topToIndex(positionTop);\n    if (row != null && col != null) {\n      var cell = this.props.cells[row][col];\n      return {\n        dateProfile: this.props.dateProfile,\n        dateSpan: __assign({\n          range: this.getCellRange(row, col),\n          allDay: true\n        }, cell.extraDateSpan),\n        dayEl: this.getCellEl(row, col),\n        rect: {\n          left: colPositions.lefts[col],\n          right: colPositions.rights[col],\n          top: rowPositions.tops[row],\n          bottom: rowPositions.bottoms[row]\n        },\n        layer: 0\n      };\n    }\n    return null;\n  };\n  Table.prototype.getCellEl = function (row, col) {\n    return this.rowRefs.currentMap[row].getCellEls()[col]; // TODO: not optimal\n  };\n\n  Table.prototype.getCellRange = function (row, col) {\n    var start = this.props.cells[row][col].date;\n    var end = addDays(start, 1);\n    return {\n      start: start,\n      end: end\n    };\n  };\n  return Table;\n}(DateComponent);\nfunction isSegAllDay(seg) {\n  return seg.eventRange.def.allDay;\n}\nvar DayTableSlicer = /** @class */function (_super) {\n  __extends(DayTableSlicer, _super);\n  function DayTableSlicer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.forceDayIfListItem = true;\n    return _this;\n  }\n  DayTableSlicer.prototype.sliceRange = function (dateRange, dayTableModel) {\n    return dayTableModel.sliceRange(dateRange);\n  };\n  return DayTableSlicer;\n}(Slicer);\nvar DayTable = /** @class */function (_super) {\n  __extends(DayTable, _super);\n  function DayTable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.slicer = new DayTableSlicer();\n    _this.tableRef = createRef();\n    return _this;\n  }\n  DayTable.prototype.render = function () {\n    var _a = this,\n      props = _a.props,\n      context = _a.context;\n    return createElement(Table, __assign({\n      ref: this.tableRef\n    }, this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel), {\n      dateProfile: props.dateProfile,\n      cells: props.dayTableModel.cells,\n      colGroupNode: props.colGroupNode,\n      tableMinWidth: props.tableMinWidth,\n      renderRowIntro: props.renderRowIntro,\n      dayMaxEvents: props.dayMaxEvents,\n      dayMaxEventRows: props.dayMaxEventRows,\n      showWeekNumbers: props.showWeekNumbers,\n      expandRows: props.expandRows,\n      headerAlignElRef: props.headerAlignElRef,\n      clientWidth: props.clientWidth,\n      clientHeight: props.clientHeight,\n      forPrint: props.forPrint\n    }));\n  };\n  return DayTable;\n}(DateComponent);\nvar DayTableView = /** @class */function (_super) {\n  __extends(DayTableView, _super);\n  function DayTableView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.buildDayTableModel = memoize(buildDayTableModel);\n    _this.headerRef = createRef();\n    _this.tableRef = createRef();\n    return _this;\n  }\n  DayTableView.prototype.render = function () {\n    var _this = this;\n    var _a = this.context,\n      options = _a.options,\n      dateProfileGenerator = _a.dateProfileGenerator;\n    var props = this.props;\n    var dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator);\n    var headerContent = options.dayHeaders && createElement(DayHeader, {\n      ref: this.headerRef,\n      dateProfile: props.dateProfile,\n      dates: dayTableModel.headerDates,\n      datesRepDistinctDays: dayTableModel.rowCnt === 1\n    });\n    var bodyContent = function bodyContent(contentArg) {\n      return createElement(DayTable, {\n        ref: _this.tableRef,\n        dateProfile: props.dateProfile,\n        dayTableModel: dayTableModel,\n        businessHours: props.businessHours,\n        dateSelection: props.dateSelection,\n        eventStore: props.eventStore,\n        eventUiBases: props.eventUiBases,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        nextDayThreshold: options.nextDayThreshold,\n        colGroupNode: contentArg.tableColGroupNode,\n        tableMinWidth: contentArg.tableMinWidth,\n        dayMaxEvents: options.dayMaxEvents,\n        dayMaxEventRows: options.dayMaxEventRows,\n        showWeekNumbers: options.weekNumbers,\n        expandRows: !props.isHeightAuto,\n        headerAlignElRef: _this.headerElRef,\n        clientWidth: contentArg.clientWidth,\n        clientHeight: contentArg.clientHeight,\n        forPrint: props.forPrint\n      });\n    };\n    return options.dayMinWidth ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth) : this.renderSimpleLayout(headerContent, bodyContent);\n  };\n  return DayTableView;\n}(TableView);\nfunction buildDayTableModel(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTableModel(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n}\nvar TableDateProfileGenerator = /** @class */function (_super) {\n  __extends(TableDateProfileGenerator, _super);\n  function TableDateProfileGenerator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  // Computes the date range that will be rendered.\n  TableDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n    var dateEnv = this.props.dateEnv;\n    var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n    var start = renderRange.start;\n    var end = renderRange.end;\n    var endOfWeek;\n    // year and month views should be aligned with weeks. this is already done for week\n    if (/^(year|month)$/.test(currentRangeUnit)) {\n      start = dateEnv.startOfWeek(start);\n      // make end-of-week if not already\n      endOfWeek = dateEnv.startOfWeek(end);\n      if (endOfWeek.valueOf() !== end.valueOf()) {\n        end = addWeeks(endOfWeek, 1);\n      }\n    }\n    // ensure 6 weeks\n    if (this.props.monthMode && this.props.fixedWeekCount) {\n      var rowCnt = Math.ceil(\n      // could be partial weeks due to hiddenDays\n      diffWeeks(start, end));\n      end = addWeeks(end, 6 - rowCnt);\n    }\n    return {\n      start: start,\n      end: end\n    };\n  };\n  return TableDateProfileGenerator;\n}(DateProfileGenerator);\nvar main = createPlugin({\n  initialView: 'dayGridMonth',\n  views: {\n    dayGrid: {\n      component: DayTableView,\n      dateProfileGeneratorClass: TableDateProfileGenerator\n    },\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: {\n        days: 1\n      }\n    },\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: {\n        weeks: 1\n      }\n    },\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: {\n        months: 1\n      },\n      monthMode: true,\n      fixedWeekCount: true\n    }\n  }\n});\nexport default main;\nexport { DayTableView as DayGridView, DayTable, DayTableSlicer, Table, TableView, buildDayTableModel };","map":{"version":3,"sources":["src/TableView.tsx","src/TableSeg.ts","src/TableCellTop.tsx","src/event-rendering.ts","src/TableBlockEvent.tsx","src/TableListItemEvent.tsx","src/TableCellMoreLink.tsx","src/TableCell.tsx","src/event-placement.ts","src/TableRow.tsx","src/Table.tsx","src/DayTableSlicer.tsx","src/DayTable.tsx","src/DayTableView.tsx","src/TableDateProfileGenerator.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  VNode, createElement,\n  SimpleScrollGrid,\n  SimpleScrollGridSection,\n  ChunkContentCallbackArgs,\n  createRef,\n  ScrollGridSectionConfig,\n  ViewRoot,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  ChunkConfigRowContent,\n  Dictionary,\n} from '@fullcalendar/common'\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\n\nexport abstract class TableView<State=Dictionary> extends DateComponent<ViewProps, State> {\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n\n  renderSimpleLayout(\n    headerRowContent: ChunkConfigRowContent,\n    bodyContent: (contentArg: ChunkContentCallbackArgs) => VNode,\n  ) {\n    let { props, context } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunk: { content: bodyContent },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={['fc-daygrid'].concat(classNames).join(' ')}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              cols={[] /* TODO: make optional? */}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: ChunkConfigRowContent,\n    bodyContent: (contentArg: ChunkContentCallbackArgs) => VNode,\n    colCnt: number,\n    dayMinWidth: number,\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { props, context } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunks: [{\n          key: 'main',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        }],\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunks: [{\n        key: 'main',\n        content: bodyContent,\n      }],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'main',\n          content: renderScrollShim,\n        }],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={['fc-daygrid'].concat(classNames).join(' ')}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              colGroups={[{ cols: [{ span: colCnt, minWidth: dayMinWidth }] }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n}\n","import { EventSegUiInteractionState, Seg } from '@fullcalendar/common'\n\n// this is a DATA STRUCTURE, not a component\n\nexport interface TableSeg extends Seg {\n  row: number\n  firstCol: number\n  lastCol: number\n}\n\nexport function splitSegsByRow(segs: TableSeg[], rowCnt: number) {\n  let byRow: TableSeg[][] = []\n\n  for (let i = 0; i < rowCnt; i += 1) {\n    byRow[i] = []\n  }\n\n  for (let seg of segs) {\n    byRow[seg.row].push(seg)\n  }\n\n  return byRow\n}\n\nexport function splitSegsByFirstCol(segs: TableSeg[], colCnt: number) {\n  let byCol: TableSeg[][] = []\n\n  for (let i = 0; i < colCnt; i += 1) {\n    byCol[i] = []\n  }\n\n  for (let seg of segs) {\n    byCol[seg.firstCol].push(seg)\n  }\n\n  return byCol\n}\n\nexport function splitInteractionByRow(ui: EventSegUiInteractionState | null, rowCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.row].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n","import {\n  createElement,\n  DateMarker,\n  DateRange,\n  DayCellContentArg,\n  DayCellContent,\n  BaseComponent,\n  DateProfile,\n  Dictionary,\n  Fragment,\n  buildNavLinkAttrs,\n} from '@fullcalendar/common'\n\ninterface TableCellTopProps {\n  date: DateMarker\n  dateProfile: DateProfile\n  showDayNumber: boolean\n  dayNumberId: string\n  forceDayTop: boolean // hack to force-create an element with height (created by a nbsp)\n  todayRange: DateRange\n  extraHookProps?: Dictionary\n}\n\nexport class TableCellTop extends BaseComponent<TableCellTopProps> {\n  render() {\n    let { props } = this\n    let navLinkAttrs = buildNavLinkAttrs(this.context, props.date)\n\n    return (\n      <DayCellContent\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        showDayNumber={props.showDayNumber}\n        extraHookProps={props.extraHookProps}\n        defaultContent={renderTopInner}\n      >\n        {(innerElRef, innerContent) => (\n          (innerContent || props.forceDayTop) && (\n            <div className=\"fc-daygrid-day-top\" ref={innerElRef}>\n              <a\n                id={props.dayNumberId}\n                className=\"fc-daygrid-day-number\"\n                {...navLinkAttrs}\n              >\n                {innerContent || <Fragment>&nbsp;</Fragment>}\n              </a>\n            </div>\n          )\n        )}\n      </DayCellContent>\n    )\n  }\n}\n\nfunction renderTopInner(props: DayCellContentArg) {\n  return props.dayNumberText\n}\n","import { createFormatter } from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport const DEFAULT_TABLE_EVENT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow',\n})\n\nexport function hasListItemDisplay(seg: TableSeg) {\n  let { display } = seg.eventRange.ui\n\n  return display === 'list-item' || (\n    display === 'auto' &&\n    !seg.eventRange.def.allDay &&\n    seg.firstCol === seg.lastCol && // can't be multi-day\n    seg.isStart && // \"\n    seg.isEnd // \"\n  )\n}\n","import { createElement, StandardEvent, BaseComponent, MinimalEventProps } from '@fullcalendar/common'\nimport { DEFAULT_TABLE_EVENT_TIME_FORMAT } from './event-rendering'\n\nexport interface TableBlockEventProps extends MinimalEventProps {\n  defaultDisplayEventEnd: boolean\n}\n\nexport class TableBlockEvent extends BaseComponent<TableBlockEventProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <StandardEvent\n        {...props}\n        extraClassNames={['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event']}\n        defaultTimeFormat={DEFAULT_TABLE_EVENT_TIME_FORMAT}\n        defaultDisplayEventEnd={props.defaultDisplayEventEnd}\n        disableResizing={!props.seg.eventRange.def.allDay}\n      />\n    )\n  }\n}\n","import {\n  createElement,\n  BaseComponent,\n  Seg,\n  EventRoot,\n  buildSegTimeText,\n  EventContentArg,\n  Fragment,\n  getSegAnchorAttrs,\n} from '@fullcalendar/common'\nimport { DEFAULT_TABLE_EVENT_TIME_FORMAT } from './event-rendering'\n\nexport interface DotTableEventProps {\n  seg: Seg\n  isDragging: boolean\n  isSelected: boolean\n  isPast: boolean\n  isFuture: boolean\n  isToday: boolean\n  defaultDisplayEventEnd: boolean\n}\n\nexport class TableListItemEvent extends BaseComponent<DotTableEventProps> {\n  render() {\n    let { props, context } = this\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT\n    let timeText = buildSegTimeText(\n      props.seg,\n      timeFormat,\n      context,\n      true,\n      props.defaultDisplayEventEnd,\n    )\n\n    return (\n      <EventRoot\n        seg={props.seg}\n        timeText={timeText}\n        defaultContent={renderInnerContent}\n        isDragging={props.isDragging}\n        isResizing={false}\n        isDateSelecting={false}\n        isSelected={props.isSelected}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => ( // we don't use styles!\n          <a\n            className={['fc-daygrid-event', 'fc-daygrid-dot-event'].concat(classNames).join(' ')}\n            ref={rootElRef}\n            {...getSegAnchorAttrs(props.seg, context)}\n          >\n            {innerContent}\n          </a>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderInnerContent(innerProps: EventContentArg) {\n  return (\n    <Fragment>\n      <div\n        className=\"fc-daygrid-event-dot\"\n        style={{ borderColor: innerProps.borderColor || innerProps.backgroundColor }}\n      />\n      {innerProps.timeText && (\n        <div className=\"fc-event-time\">{innerProps.timeText}</div>\n      )}\n      <div className=\"fc-event-title\">\n        {innerProps.event.title || <Fragment>&nbsp;</Fragment>}\n      </div>\n    </Fragment>\n  )\n}\n","import {\n  createElement,\n  MoreLinkRoot,\n  RefObject,\n  BaseComponent,\n  memoize,\n  DateMarker,\n  Dictionary,\n  DateProfile,\n  DateRange,\n  EventSegUiInteractionState,\n  getSegMeta,\n  Fragment,\n  createAriaClickAttrs,\n} from '@fullcalendar/common'\nimport { TableSegPlacement } from './event-placement'\nimport { hasListItemDisplay } from './event-rendering'\nimport { TableBlockEvent } from './TableBlockEvent'\nimport { TableListItemEvent } from './TableListItemEvent'\nimport { TableSeg } from './TableSeg'\n\nexport interface TableCellMoreLinkProps {\n  allDayDate: DateMarker\n  singlePlacements: TableSegPlacement[]\n  moreCnt: number\n  alignmentElRef: RefObject<HTMLElement> // for popover\n  alignGridTop: boolean // for popover\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n}\n\nexport class TableCellMoreLink extends BaseComponent<TableCellMoreLinkProps> {\n  compileSegs = memoize(compileSegs)\n\n  render() {\n    let { props } = this\n    let { allSegs, invisibleSegs } = this.compileSegs(props.singlePlacements)\n\n    return (\n      <MoreLinkRoot\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        allDayDate={props.allDayDate}\n        moreCnt={props.moreCnt}\n        allSegs={allSegs}\n        hiddenSegs={invisibleSegs}\n        alignmentElRef={props.alignmentElRef}\n        alignGridTop={props.alignGridTop}\n        extraDateSpan={props.extraDateSpan}\n        popoverContent={() => {\n          let isForcedInvisible =\n            (props.eventDrag ? props.eventDrag.affectedInstances : null) ||\n            (props.eventResize ? props.eventResize.affectedInstances : null) ||\n            {}\n          return (\n            <Fragment>\n              {allSegs.map((seg) => {\n                let instanceId = seg.eventRange.instance.instanceId\n                return (\n                  <div\n                    className=\"fc-daygrid-event-harness\"\n                    key={instanceId}\n                    style={{\n                      visibility: isForcedInvisible[instanceId] ? 'hidden' : ('' as any),\n                    }}\n                  >\n                    {hasListItemDisplay(seg) ? (\n                      <TableListItemEvent\n                        seg={seg}\n                        isDragging={false}\n                        isSelected={instanceId === props.eventSelection}\n                        defaultDisplayEventEnd={false}\n                        {...getSegMeta(seg, props.todayRange)}\n                      />\n                    ) : (\n                      <TableBlockEvent\n                        seg={seg}\n                        isDragging={false}\n                        isResizing={false}\n                        isDateSelecting={false}\n                        isSelected={instanceId === props.eventSelection}\n                        defaultDisplayEventEnd={false}\n                        {...getSegMeta(seg, props.todayRange)}\n                      />\n                    )}\n                  </div>\n                )\n              })}\n            </Fragment>\n          )\n        }}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) => (\n          <a\n            ref={rootElRef}\n            className={['fc-daygrid-more-link'].concat(classNames).join(' ')}\n            title={title}\n            aria-expanded={isExpanded}\n            aria-controls={popoverId}\n            {...createAriaClickAttrs(handleClick)}\n          >\n            {innerContent}\n          </a>\n        )}\n      </MoreLinkRoot>\n    )\n  }\n}\n\nfunction compileSegs(singlePlacements: TableSegPlacement[]): {\n  allSegs: TableSeg[]\n  invisibleSegs: TableSeg[]\n} {\n  let allSegs: TableSeg[] = []\n  let invisibleSegs: TableSeg[] = []\n\n  for (let placement of singlePlacements) {\n    allSegs.push(placement.seg)\n\n    if (!placement.isVisible) {\n      invisibleSegs.push(placement.seg)\n    }\n  }\n\n  return { allSegs, invisibleSegs }\n}\n","import {\n  Ref,\n  ComponentChildren,\n  createElement,\n  DateMarker,\n  DateComponent,\n  DateRange,\n  buildNavLinkAttrs,\n  WeekNumberRoot,\n  DayCellRoot,\n  DateProfile,\n  setRef,\n  createFormatter,\n  Dictionary,\n  createRef,\n  EventSegUiInteractionState,\n  getUniqueDomId,\n} from '@fullcalendar/common'\nimport { TableCellTop } from './TableCellTop'\nimport { TableCellMoreLink } from './TableCellMoreLink'\nimport { TableSegPlacement } from './event-placement'\n\nexport interface TableCellProps {\n  date: DateMarker\n  dateProfile: DateProfile\n  extraHookProps?: Dictionary\n  extraDataAttrs?: Dictionary\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  elRef?: Ref<HTMLTableCellElement>\n  innerElRef?: Ref<HTMLDivElement>\n  bgContent: ComponentChildren\n  fgContentElRef?: Ref<HTMLDivElement> // TODO: rename!!! classname confusion. is the \"event\" div\n  fgContent: ComponentChildren\n  moreCnt: number\n  moreMarginTop: number\n  showDayNumber: boolean\n  showWeekNumber: boolean\n  forceDayTop: boolean\n  todayRange: DateRange\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  singlePlacements: TableSegPlacement[]\n}\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'narrow' })\n\nexport class TableCell extends DateComponent<TableCellProps> {\n  private rootElRef = createRef<HTMLElement>()\n  state = {\n    dayNumberId: getUniqueDomId(),\n  }\n\n  render() {\n    let { context, props, state, rootElRef } = this\n    let { date, dateProfile } = props\n    let navLinkAttrs = buildNavLinkAttrs(context, date, 'week')\n\n    return (\n      <DayCellRoot\n        date={date}\n        dateProfile={dateProfile}\n        todayRange={props.todayRange}\n        showDayNumber={props.showDayNumber}\n        extraHookProps={props.extraHookProps}\n        elRef={this.handleRootEl}\n      >\n        {(dayElRef, dayClassNames, rootDataAttrs, isDisabled) => (\n          <td\n            ref={dayElRef}\n            role=\"gridcell\"\n            className={['fc-daygrid-day'].concat(dayClassNames, props.extraClassNames || []).join(' ')}\n            {...rootDataAttrs}\n            {...props.extraDataAttrs}\n            {...(props.showDayNumber ? { 'aria-labelledby': state.dayNumberId } : {})}\n          >\n            <div className=\"fc-daygrid-day-frame fc-scrollgrid-sync-inner\" ref={props.innerElRef /* different from hook system! RENAME */}>\n              {props.showWeekNumber && (\n                <WeekNumberRoot date={date} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n                  {(weekElRef, weekClassNames, innerElRef, innerContent) => (\n                    <a\n                      ref={weekElRef}\n                      className={['fc-daygrid-week-number'].concat(weekClassNames).join(' ')}\n                      {...navLinkAttrs}\n                    >\n                      {innerContent}\n                    </a>\n                  )}\n                </WeekNumberRoot>\n              )}\n              {!isDisabled && (\n                <TableCellTop\n                  date={date}\n                  dateProfile={dateProfile}\n                  showDayNumber={props.showDayNumber}\n                  dayNumberId={state.dayNumberId}\n                  forceDayTop={props.forceDayTop}\n                  todayRange={props.todayRange}\n                  extraHookProps={props.extraHookProps}\n                />\n              )}\n              <div\n                className=\"fc-daygrid-day-events\"\n                ref={props.fgContentElRef}\n              >\n                {props.fgContent}\n                <div className=\"fc-daygrid-day-bottom\" style={{ marginTop: props.moreMarginTop }}>\n                  <TableCellMoreLink\n                    allDayDate={date}\n                    singlePlacements={props.singlePlacements}\n                    moreCnt={props.moreCnt}\n                    alignmentElRef={rootElRef}\n                    alignGridTop={!props.showDayNumber}\n                    extraDateSpan={props.extraDateSpan}\n                    dateProfile={props.dateProfile}\n                    eventSelection={props.eventSelection}\n                    eventDrag={props.eventDrag}\n                    eventResize={props.eventResize}\n                    todayRange={props.todayRange}\n                  />\n                </div>\n              </div>\n              <div className=\"fc-daygrid-day-bg\">\n                {props.bgContent}\n              </div>\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement) => {\n    setRef(this.rootElRef, el)\n    setRef(this.props.elRef, el)\n  }\n}\n","import {\n  SegHierarchy,\n  SegRect,\n  SegEntry,\n  SegInsertion,\n  buildEntryKey,\n  EventRenderRange,\n  intersectRanges,\n  addDays,\n  DayTableCell,\n  intersectSpans,\n} from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport interface TableSegPlacement {\n  seg: TableSeg\n  isVisible: boolean\n  isAbsolute: boolean\n  absoluteTop: number // populated regardless of isAbsolute\n  marginTop: number\n}\n\nexport function computeFgSegPlacement(\n  segs: TableSeg[], // assumed already sorted\n  dayMaxEvents: boolean | number,\n  dayMaxEventRows: boolean | number,\n  strictOrder: boolean,\n  eventInstanceHeights: { [instanceId: string]: number },\n  maxContentHeight: number | null,\n  cells: DayTableCell[],\n) {\n  let hierarchy = new DayGridSegHierarchy()\n  hierarchy.allowReslicing = true\n  hierarchy.strictOrder = strictOrder\n\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight\n    hierarchy.hiddenConsumes = true\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows\n    hierarchy.hiddenConsumes = true\n  }\n\n  // create segInputs only for segs with known heights\n  let segInputs: SegEntry[] = []\n  let unknownHeightSegs: TableSeg[] = []\n  for (let i = 0; i < segs.length; i += 1) {\n    let seg = segs[i]\n    let { instanceId } = seg.eventRange.instance\n    let eventHeight = eventInstanceHeights[instanceId]\n\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        thickness: eventHeight,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1,\n        },\n      })\n    } else {\n      unknownHeightSegs.push(seg)\n    }\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let segRects = hierarchy.toRects()\n  let { singleColPlacements, multiColPlacements, leftoverMargins } = placeRects(segRects, segs, cells)\n\n  let moreCnts: number[] = []\n  let moreMarginTops: number[] = []\n\n  // add segs with unknown heights\n  for (let seg of unknownHeightSegs) {\n    multiColPlacements[seg.firstCol].push({\n      seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0,\n    })\n\n    for (let col = seg.firstCol; col <= seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0,\n      })\n    }\n  }\n\n  // add the hidden entries\n  for (let col = 0; col < cells.length; col += 1) {\n    moreCnts.push(0)\n  }\n  for (let hiddenEntry of hiddenEntries) {\n    let seg = segs[hiddenEntry.index]\n    let hiddenSpan = hiddenEntry.span\n\n    multiColPlacements[hiddenSpan.start].push({\n      seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0,\n    })\n\n    for (let col = hiddenSpan.start; col < hiddenSpan.end; col += 1) {\n      moreCnts[col] += 1\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0,\n      })\n    }\n  }\n\n  // deal with leftover margins\n  for (let col = 0; col < cells.length; col += 1) {\n    moreMarginTops.push(leftoverMargins[col])\n  }\n\n  return { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops }\n}\n\n// rects ordered by top coord, then left\nfunction placeRects(allRects: SegRect[], segs: TableSeg[], cells: DayTableCell[]) {\n  let rectsByEachCol = groupRectsByEachCol(allRects, cells.length)\n  let singleColPlacements: TableSegPlacement[][] = []\n  let multiColPlacements: TableSegPlacement[][] = []\n  let leftoverMargins: number[] = []\n\n  for (let col = 0; col < cells.length; col += 1) {\n    let rects = rectsByEachCol[col]\n\n    // compute all static segs in singlePlacements\n    let singlePlacements: TableSegPlacement[] = []\n    let currentHeight = 0\n    let currentMarginTop = 0\n    for (let rect of rects) {\n      let seg = segs[rect.index]\n      singlePlacements.push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: true,\n        isAbsolute: false,\n        absoluteTop: rect.levelCoord,\n        marginTop: rect.levelCoord - currentHeight,\n      })\n      currentHeight = rect.levelCoord + rect.thickness\n    }\n\n    // compute mixed static/absolute segs in multiPlacements\n    let multiPlacements: TableSegPlacement[] = []\n    currentHeight = 0\n    currentMarginTop = 0\n    for (let rect of rects) {\n      let seg = segs[rect.index]\n      let isAbsolute = rect.span.end - rect.span.start > 1 // multi-column?\n      let isFirstCol = rect.span.start === col\n\n      currentMarginTop += rect.levelCoord - currentHeight // amount of space since bottom of previous seg\n      currentHeight = rect.levelCoord + rect.thickness // height will now be bottom of current seg\n\n      if (isAbsolute) {\n        currentMarginTop += rect.thickness\n        if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: rect.levelCoord,\n            marginTop: 0,\n          })\n        }\n      } else if (isFirstCol) {\n        multiPlacements.push({\n          seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: currentMarginTop, // claim the margin\n        })\n        currentMarginTop = 0\n      }\n    }\n\n    singleColPlacements.push(singlePlacements)\n    multiColPlacements.push(multiPlacements)\n    leftoverMargins.push(currentMarginTop)\n  }\n\n  return { singleColPlacements, multiColPlacements, leftoverMargins }\n}\n\nfunction groupRectsByEachCol(rects: SegRect[], colCnt: number): SegRect[][] {\n  let rectsByEachCol: SegRect[][] = []\n\n  for (let col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([])\n  }\n\n  for (let rect of rects) {\n    for (let col = rect.span.start; col < rect.span.end; col += 1) {\n      rectsByEachCol[col].push(rect)\n    }\n  }\n\n  return rectsByEachCol\n}\n\nfunction resliceSeg(seg: TableSeg, spanStart: number, spanEnd: number, cells: DayTableCell[]): TableSeg {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg\n  }\n\n  let eventRange = seg.eventRange\n  let origRange = eventRange.range\n  let slicedRange = intersectRanges(origRange, {\n    start: cells[spanStart].date,\n    end: addDays(cells[spanEnd - 1].date, 1),\n  })\n\n  return {\n    ...seg,\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: { ...eventRange.ui, durationEditable: false }, // hack to disable resizing\n      instance: eventRange.instance,\n      range: slicedRange,\n    } as EventRenderRange,\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf(),\n  }\n}\n\nclass DayGridSegHierarchy extends SegHierarchy {\n  // config\n  hiddenConsumes: boolean = false\n\n  // allows us to keep hidden entries in the hierarchy so they take up space\n  forceHidden: { [entryId: string]: true } = {}\n\n  addSegs(segInputs: SegEntry[]): SegEntry[] {\n    const hiddenSegs = super.addSegs(segInputs)\n    const { entriesByLevel } = this\n    const excludeHidden = (entry: SegEntry) => !this.forceHidden[buildEntryKey(entry)]\n\n    // remove the forced-hidden segs\n    for (let level = 0; level < entriesByLevel.length; level += 1) {\n      entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden)\n    }\n\n    return hiddenSegs\n  }\n\n  handleInvalidInsertion(insertion: SegInsertion, entry: SegEntry, hiddenEntries: SegEntry[]) {\n    const { entriesByLevel, forceHidden } = this\n    const { touchingEntry, touchingLevel, touchingLateral } = insertion\n\n    if (this.hiddenConsumes && touchingEntry) {\n      const touchingEntryId = buildEntryKey(touchingEntry)\n      // if not already hidden\n      if (!forceHidden[touchingEntryId]) {\n        if (this.allowReslicing) {\n          const placeholderEntry: SegEntry = { // placeholder of the \"more\" link\n            ...touchingEntry,\n            span: intersectSpans(touchingEntry.span, entry.span),\n          }\n          const placeholderEntryId = buildEntryKey(placeholderEntry)\n          forceHidden[placeholderEntryId] = true\n          entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry // replace touchingEntry with our placeholder\n          this.splitEntry(touchingEntry, entry, hiddenEntries) // split up the touchingEntry, reinsert it\n        } else {\n          forceHidden[touchingEntryId] = true\n          hiddenEntries.push(touchingEntry)\n        }\n      }\n    }\n\n    return super.handleInvalidInsertion(insertion, entry, hiddenEntries)\n  }\n}\n","import {\n  EventSegUiInteractionState,\n  VNode,\n  DateComponent,\n  createElement,\n  PositionCache,\n  RefMap,\n  CssDimValue,\n  DateRange,\n  getSegMeta,\n  DateProfile,\n  Fragment,\n  BgEvent,\n  renderFill,\n  isPropsEqual,\n  createRef,\n  buildEventRangeKey,\n  sortEventSegs,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TableSeg, splitSegsByFirstCol } from './TableSeg'\nimport { TableCell } from './TableCell'\nimport { TableListItemEvent } from './TableListItemEvent'\nimport { TableBlockEvent } from './TableBlockEvent'\nimport { computeFgSegPlacement, TableSegPlacement } from './event-placement'\nimport { hasListItemDisplay } from './event-rendering'\n\n// TODO: attach to window resize?\n\nexport interface TableRowProps {\n  cells: DayTableCell[]\n  renderIntro?: () => VNode\n  businessHourSegs: TableSeg[]\n  bgEventSegs: TableSeg[]\n  fgEventSegs: TableSeg[]\n  dateSelectionSegs: TableSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  clientWidth: number | null\n  clientHeight: number | null // simply for causing an updateSize, for when liquid height\n  dateProfile: DateProfile\n  todayRange: DateRange\n  showDayNumbers: boolean\n  showWeekNumbers: boolean\n  forPrint: boolean\n}\n\ninterface TableRowState {\n  framePositions: PositionCache\n  maxContentHeight: number | null\n  eventInstanceHeights: { [instanceId: string]: number } // integers\n}\n\nexport class TableRow extends DateComponent<TableRowProps, TableRowState> {\n  private cellElRefs = new RefMap<HTMLTableCellElement>() // the <td>\n  private frameElRefs = new RefMap<HTMLElement>() // the fc-daygrid-day-frame\n  private fgElRefs = new RefMap<HTMLDivElement>() // the fc-daygrid-day-events\n  private segHarnessRefs = new RefMap<HTMLDivElement>() // indexed by \"instanceId:firstCol\"\n  private rootElRef = createRef<HTMLTableRowElement>()\n\n  state: TableRowState = {\n    framePositions: null,\n    maxContentHeight: null,\n    eventInstanceHeights: {},\n  }\n\n  render() {\n    let { props, state, context } = this\n    let { options } = context\n    let colCnt = props.cells.length\n\n    let businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt)\n    let bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt)\n    let highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt)\n    let mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt)\n\n    let { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops } = computeFgSegPlacement(\n      sortEventSegs(props.fgEventSegs, options.eventOrder) as TableSeg[],\n      props.dayMaxEvents,\n      props.dayMaxEventRows,\n      options.eventOrderStrict,\n      state.eventInstanceHeights,\n      state.maxContentHeight,\n      props.cells,\n    )\n\n    let isForcedInvisible = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    return (\n      <tr ref={this.rootElRef} role=\"row\">\n        {props.renderIntro && props.renderIntro()}\n        {props.cells.map((cell, col) => {\n          let normalFgNodes = this.renderFgSegs(\n            col,\n            props.forPrint ? singleColPlacements[col] : multiColPlacements[col],\n            props.todayRange,\n            isForcedInvisible,\n          )\n\n          let mirrorFgNodes = this.renderFgSegs(\n            col,\n            buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements),\n            props.todayRange,\n            {},\n            Boolean(props.eventDrag),\n            Boolean(props.eventResize),\n            false, // date-selecting (because mirror is never drawn for date selection)\n          )\n\n          return (\n            <TableCell\n              key={cell.key}\n              elRef={this.cellElRefs.createRef(cell.key)}\n              innerElRef={this.frameElRefs.createRef(cell.key) /* FF <td> problem, but okay to use for left/right. TODO: rename prop */}\n              dateProfile={props.dateProfile}\n              date={cell.date}\n              showDayNumber={props.showDayNumbers}\n              showWeekNumber={props.showWeekNumbers && col === 0}\n              forceDayTop={props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */}\n              todayRange={props.todayRange}\n              eventSelection={props.eventSelection}\n              eventDrag={props.eventDrag}\n              eventResize={props.eventResize}\n              extraHookProps={cell.extraHookProps}\n              extraDataAttrs={cell.extraDataAttrs}\n              extraClassNames={cell.extraClassNames}\n              extraDateSpan={cell.extraDateSpan}\n              moreCnt={moreCnts[col]}\n              moreMarginTop={moreMarginTops[col]}\n              singlePlacements={singleColPlacements[col]}\n              fgContentElRef={this.fgElRefs.createRef(cell.key)}\n              fgContent={( // Fragment scopes the keys\n                <Fragment>\n                  <Fragment>{normalFgNodes}</Fragment>\n                  <Fragment>{mirrorFgNodes}</Fragment>\n                </Fragment>\n              )}\n              bgContent={( // Fragment scopes the keys\n                <Fragment>\n                  {this.renderFillSegs(highlightSegsByCol[col], 'highlight')}\n                  {this.renderFillSegs(businessHoursByCol[col], 'non-business')}\n                  {this.renderFillSegs(bgEventSegsByCol[col], 'bg-event')}\n                </Fragment>\n              )}\n            />\n          )\n        })}\n      </tr>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing(true)\n  }\n\n  componentDidUpdate(prevProps: TableRowProps, prevState: TableRowState) {\n    let currentProps = this.props\n\n    this.updateSizing(\n      !isPropsEqual(prevProps, currentProps),\n    )\n  }\n\n  getHighlightSegs(): TableSeg[] {\n    let { props } = this\n\n    if (props.eventDrag && props.eventDrag.segs.length) { // messy check\n      return props.eventDrag.segs as TableSeg[]\n    }\n\n    if (props.eventResize && props.eventResize.segs.length) { // messy check\n      return props.eventResize.segs as TableSeg[]\n    }\n\n    return props.dateSelectionSegs\n  }\n\n  getMirrorSegs(): TableSeg[] {\n    let { props } = this\n\n    if (props.eventResize && props.eventResize.segs.length) { // messy check\n      return props.eventResize.segs as TableSeg[]\n    }\n\n    return []\n  }\n\n  renderFgSegs(\n    col: number,\n    segPlacements: TableSegPlacement[],\n    todayRange: DateRange,\n    isForcedInvisible: { [instanceId: string]: any },\n    isDragging?: boolean,\n    isResizing?: boolean,\n    isDateSelecting?: boolean,\n  ): VNode[] {\n    let { context } = this\n    let { eventSelection } = this.props\n    let { framePositions } = this.state\n    let defaultDisplayEventEnd = this.props.cells.length === 1 // colCnt === 1\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let nodes: VNode[] = []\n\n    if (framePositions) {\n      for (let placement of segPlacements) {\n        let { seg } = placement\n        let { instanceId } = seg.eventRange.instance\n        let key = instanceId + ':' + col\n        let isVisible = placement.isVisible && !isForcedInvisible[instanceId]\n        let isAbsolute = placement.isAbsolute\n        let left: CssDimValue = ''\n        let right: CssDimValue = ''\n\n        if (isAbsolute) {\n          if (context.isRtl) {\n            right = 0\n            left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n          } else {\n            left = 0\n            right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n          }\n        }\n\n        /*\n        known bug: events that are force to be list-item but span multiple days still take up space in later columns\n        todo: in print view, for multi-day events, don't display title within non-start/end segs\n        */\n        nodes.push(\n          <div\n            className={'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : '')}\n            key={key}\n            ref={isMirror ? null : this.segHarnessRefs.createRef(key)}\n            style={{\n              visibility: isVisible ? ('' as any) : 'hidden',\n              marginTop: isAbsolute ? '' : placement.marginTop,\n              top: isAbsolute ? placement.absoluteTop : '',\n              left,\n              right,\n            }}\n          >\n            {hasListItemDisplay(seg) ? (\n              <TableListItemEvent\n                seg={seg}\n                isDragging={isDragging}\n                isSelected={instanceId === eventSelection}\n                defaultDisplayEventEnd={defaultDisplayEventEnd}\n                {...getSegMeta(seg, todayRange)}\n              />\n            ) : (\n              <TableBlockEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                defaultDisplayEventEnd={defaultDisplayEventEnd}\n                {...getSegMeta(seg, todayRange)}\n              />\n            )}\n          </div>,\n        )\n      }\n    }\n\n    return nodes\n  }\n\n  renderFillSegs(segs: TableSeg[], fillType: string): VNode {\n    let { isRtl } = this.context\n    let { todayRange } = this.props\n    let { framePositions } = this.state\n    let nodes: VNode[] = []\n\n    if (framePositions) {\n      for (let seg of segs) {\n        let leftRightCss = isRtl ? {\n          right: 0,\n          left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol],\n        } : {\n          left: 0,\n          right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol],\n        }\n\n        nodes.push(\n          <div\n            key={buildEventRangeKey(seg.eventRange)}\n            className=\"fc-daygrid-bg-harness\"\n            style={leftRightCss}\n          >\n            {fillType === 'bg-event' ?\n              <BgEvent seg={seg} {...getSegMeta(seg, todayRange)} /> :\n              renderFill(fillType)}\n          </div>,\n        )\n      }\n    }\n\n    return createElement(Fragment, {}, ...nodes)\n  }\n\n  updateSizing(isExternalSizingChange) {\n    let { props, frameElRefs } = this\n\n    if (\n      !props.forPrint &&\n      props.clientWidth !== null // positioning ready?\n    ) {\n      if (isExternalSizingChange) {\n        let frameEls = props.cells.map((cell) => frameElRefs.currentMap[cell.key])\n\n        if (frameEls.length) {\n          let originEl = this.rootElRef.current\n\n          this.setState({ // will trigger isCellPositionsChanged...\n            framePositions: new PositionCache(\n              originEl,\n              frameEls,\n              true, // isHorizontal\n              false,\n            ),\n          })\n        }\n      }\n\n      const oldInstanceHeights = this.state.eventInstanceHeights\n      const newInstanceHeights = this.queryEventInstanceHeights()\n      const limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true\n\n      this.safeSetState({\n        // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n        // Essentially, once you compute an element's height, never null-out.\n        // TODO: always display all events, as visibility:hidden?\n        eventInstanceHeights: { ...oldInstanceHeights, ...newInstanceHeights },\n\n        maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null,\n      })\n    }\n  }\n\n  queryEventInstanceHeights() {\n    let segElMap = this.segHarnessRefs.currentMap\n    let eventInstanceHeights: { [key: string]: number } = {}\n\n    // get the max height amongst instance segs\n    for (let key in segElMap) {\n      let height = Math.round(segElMap[key].getBoundingClientRect().height)\n      let instanceId = key.split(':')[0] // deconstruct how renderFgSegs makes the key\n      eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height)\n    }\n\n    return eventInstanceHeights\n  }\n\n  computeMaxContentHeight() {\n    let firstKey = this.props.cells[0].key\n    let cellEl = this.cellElRefs.currentMap[firstKey]\n    let fcContainerEl = this.fgElRefs.currentMap[firstKey]\n\n    return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top\n  }\n\n  public getCellEls() {\n    let elMap = this.cellElRefs.currentMap\n\n    return this.props.cells.map((cell) => elMap[cell.key])\n  }\n}\n\nTableRow.addStateEquality({\n  eventInstanceHeights: isPropsEqual,\n})\n\nfunction buildMirrorPlacements(mirrorSegs: TableSeg[], colPlacements: TableSegPlacement[][]): TableSegPlacement[] {\n  if (!mirrorSegs.length) {\n    return []\n  }\n  let topsByInstanceId = buildAbsoluteTopHash(colPlacements) // TODO: cache this at first render?\n  return mirrorSegs.map((seg: TableSeg) => ({\n    seg,\n    isVisible: true,\n    isAbsolute: true,\n    absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n    marginTop: 0,\n  }))\n}\n\nfunction buildAbsoluteTopHash(colPlacements: TableSegPlacement[][]): { [instanceId: string]: number } {\n  let topsByInstanceId: { [instanceId: string]: number } = {}\n\n  for (let placements of colPlacements) {\n    for (let placement of placements) {\n      topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop\n    }\n  }\n\n  return topsByInstanceId\n}\n","import {\n  EventSegUiInteractionState,\n  VNode,\n  DateComponent,\n  RefObject,\n  CssDimValue,\n  createElement,\n  PositionCache,\n  memoize,\n  addDays,\n  RefMap,\n  DateRange,\n  NowTimer,\n  DateMarker,\n  DateProfile,\n  Fragment,\n  Hit,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TableSeg, splitSegsByRow, splitInteractionByRow } from './TableSeg'\nimport { TableRow } from './TableRow'\n\nexport interface TableProps {\n  dateProfile: DateProfile\n  cells: DayTableCell[][] // cells-BY-ROW\n  renderRowIntro?: () => VNode\n  colGroupNode: VNode\n  tableMinWidth: CssDimValue\n  expandRows: boolean\n  showWeekNumbers: boolean\n  clientWidth: number | null\n  clientHeight: number | null\n  businessHourSegs: TableSeg[]\n  bgEventSegs: TableSeg[]\n  fgEventSegs: TableSeg[]\n  dateSelectionSegs: TableSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  headerAlignElRef?: RefObject<HTMLElement>\n  forPrint: boolean\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\nexport class Table extends DateComponent<TableProps> {\n  private splitBusinessHourSegs = memoize(splitSegsByRow)\n  private splitBgEventSegs = memoize(splitSegsByRow)\n  private splitFgEventSegs = memoize(splitSegsByRow)\n  private splitDateSelectionSegs = memoize(splitSegsByRow)\n  private splitEventDrag = memoize(splitInteractionByRow)\n  private splitEventResize = memoize(splitInteractionByRow)\n  private rootEl: HTMLElement\n  private rowRefs = new RefMap<TableRow>()\n  private rowPositions: PositionCache\n  private colPositions: PositionCache\n\n  render() {\n    let { props } = this\n    let { dateProfile, dayMaxEventRows, dayMaxEvents, expandRows } = props\n    let rowCnt = props.cells.length\n\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt)\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt)\n\n    let limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true\n\n    // if rows can't expand to fill fixed height, can't do balanced-height event limit\n    // TODO: best place to normalize these options?\n    if (limitViaBalanced && !expandRows) {\n      limitViaBalanced = false\n      dayMaxEventRows = null\n      dayMaxEvents = null\n    }\n\n    let classNames = [\n      'fc-daygrid-body',\n      limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', // will all row heights be equal?\n      expandRows ? '' : 'fc-daygrid-body-natural', // will height of one row depend on the others?\n    ]\n\n    return (\n      <div\n        className={classNames.join(' ')}\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <NowTimer unit=\"day\">\n          {(nowDate: DateMarker, todayRange: DateRange) => (\n            <Fragment>\n              <table\n                role=\"presentation\"\n                className=\"fc-scrollgrid-sync-table\"\n                style={{\n                  width: props.clientWidth,\n                  minWidth: props.tableMinWidth,\n                  height: expandRows ? props.clientHeight : '',\n                }}\n              >\n                {props.colGroupNode}\n                <tbody role=\"presentation\">\n                  {props.cells.map((cells, row) => (\n                    <TableRow\n                      ref={this.rowRefs.createRef(row)}\n                      key={\n                        cells.length\n                          ? cells[0].date.toISOString() /* best? or put key on cell? or use diff formatter? */\n                          : row // in case there are no cells (like when resource view is loading)\n                      }\n                      showDayNumbers={rowCnt > 1}\n                      showWeekNumbers={props.showWeekNumbers}\n                      todayRange={todayRange}\n                      dateProfile={dateProfile}\n                      cells={cells}\n                      renderIntro={props.renderRowIntro}\n                      businessHourSegs={businessHourSegsByRow[row]}\n                      eventSelection={props.eventSelection}\n                      bgEventSegs={bgEventSegsByRow[row].filter(isSegAllDay) /* hack */}\n                      fgEventSegs={fgEventSegsByRow[row]}\n                      dateSelectionSegs={dateSelectionSegsByRow[row]}\n                      eventDrag={eventDragByRow[row]}\n                      eventResize={eventResizeByRow[row]}\n                      dayMaxEvents={dayMaxEvents}\n                      dayMaxEventRows={dayMaxEventRows}\n                      clientWidth={props.clientWidth}\n                      clientHeight={props.clientHeight}\n                      forPrint={props.forPrint}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </Fragment>\n          )}\n        </NowTimer>\n      </div>\n    )\n  }\n\n  handleRootEl = (rootEl: HTMLElement | null) => {\n    this.rootEl = rootEl\n\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, {\n        el: rootEl,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  // Hit System\n  // ----------------------------------------------------------------------------------------------------\n\n  prepareHits() {\n    this.rowPositions = new PositionCache(\n      this.rootEl,\n      this.rowRefs.collect().map((rowObj) => rowObj.getCellEls()[0]), // first cell el in each row. TODO: not optimal\n      false,\n      true, // vertical\n    )\n\n    this.colPositions = new PositionCache(\n      this.rootEl,\n      this.rowRefs.currentMap[0].getCellEls(), // cell els in first row\n      true, // horizontal\n      false,\n    )\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { colPositions, rowPositions } = this\n    let col = colPositions.leftToIndex(positionLeft)\n    let row = rowPositions.topToIndex(positionTop)\n\n    if (row != null && col != null) {\n      let cell = this.props.cells[row][col]\n\n      return {\n        dateProfile: this.props.dateProfile,\n        dateSpan: {\n          range: this.getCellRange(row, col),\n          allDay: true,\n          ...cell.extraDateSpan,\n        },\n        dayEl: this.getCellEl(row, col),\n        rect: {\n          left: colPositions.lefts[col],\n          right: colPositions.rights[col],\n          top: rowPositions.tops[row],\n          bottom: rowPositions.bottoms[row],\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n\n  private getCellEl(row, col) {\n    return this.rowRefs.currentMap[row].getCellEls()[col] // TODO: not optimal\n  }\n\n  private getCellRange(row, col) {\n    let start = this.props.cells[row][col].date\n    let end = addDays(start, 1)\n    return { start, end }\n  }\n}\n\nfunction isSegAllDay(seg: TableSeg) {\n  return seg.eventRange.def.allDay\n}\n","import { DayTableModel, DateRange, Slicer } from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport class DayTableSlicer extends Slicer<TableSeg, [DayTableModel]> {\n  forceDayIfListItem = true\n\n  sliceRange(dateRange: DateRange, dayTableModel: DayTableModel): TableSeg[] {\n    return dayTableModel.sliceRange(dateRange)\n  }\n}\n","import {\n  createElement, createRef, VNode,\n  EventStore,\n  EventUiHash,\n  DateSpan,\n  EventInteractionState,\n  DayTableModel,\n  Duration,\n  DateComponent,\n  ViewContext,\n  RefObject,\n  CssDimValue,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { Table } from './Table'\nimport { DayTableSlicer } from './DayTableSlicer'\n\nexport interface DayTableProps {\n  dateProfile: DateProfile,\n  dayTableModel: DayTableModel\n  nextDayThreshold: Duration\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  colGroupNode: VNode\n  tableMinWidth: CssDimValue\n  renderRowIntro?: () => VNode\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  expandRows: boolean\n  showWeekNumbers: boolean\n  headerAlignElRef?: RefObject<HTMLElement> // for more popover alignment\n  clientWidth: number | null\n  clientHeight: number | null\n  forPrint: boolean\n}\n\nexport class DayTable extends DateComponent<DayTableProps, ViewContext> {\n  private slicer = new DayTableSlicer()\n  private tableRef = createRef<Table>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <Table\n        ref={this.tableRef}\n        {...this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel)}\n        dateProfile={props.dateProfile}\n        cells={props.dayTableModel.cells}\n        colGroupNode={props.colGroupNode}\n        tableMinWidth={props.tableMinWidth}\n        renderRowIntro={props.renderRowIntro}\n        dayMaxEvents={props.dayMaxEvents}\n        dayMaxEventRows={props.dayMaxEventRows}\n        showWeekNumbers={props.showWeekNumbers}\n        expandRows={props.expandRows}\n        headerAlignElRef={props.headerAlignElRef}\n        clientWidth={props.clientWidth}\n        clientHeight={props.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n  }\n}\n","import {\n  createElement, createRef,\n  DayHeader,\n  DateProfileGenerator,\n  DateProfile,\n  memoize,\n  DaySeriesModel,\n  DayTableModel,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { TableView } from './TableView'\nimport { DayTable } from './DayTable'\n\nexport class DayTableView extends TableView {\n  private buildDayTableModel = memoize(buildDayTableModel)\n  private headerRef = createRef<DayHeader>()\n  private tableRef = createRef<DayTable>()\n\n  render() {\n    let { options, dateProfileGenerator } = this.context\n    let { props } = this\n    let dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator)\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        ref={this.headerRef}\n        dateProfile={props.dateProfile}\n        dates={dayTableModel.headerDates}\n        datesRepDistinctDays={dayTableModel.rowCnt === 1}\n      />\n    )\n\n    let bodyContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        ref={this.tableRef}\n        dateProfile={props.dateProfile}\n        dayTableModel={dayTableModel}\n        businessHours={props.businessHours}\n        dateSelection={props.dateSelection}\n        eventStore={props.eventStore}\n        eventUiBases={props.eventUiBases}\n        eventSelection={props.eventSelection}\n        eventDrag={props.eventDrag}\n        eventResize={props.eventResize}\n        nextDayThreshold={options.nextDayThreshold}\n        colGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        dayMaxEvents={options.dayMaxEvents}\n        dayMaxEventRows={options.dayMaxEventRows}\n        showWeekNumbers={options.weekNumbers}\n        expandRows={!props.isHeightAuto}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n\n    return options.dayMinWidth\n      ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth)\n      : this.renderSimpleLayout(headerContent, bodyContent)\n  }\n}\n\nexport function buildDayTableModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(\n    daySeries,\n    /year|month|week/.test(dateProfile.currentRangeUnit),\n  )\n}\n","import {\n  DateProfileGenerator,\n  addWeeks, diffWeeks,\n  DateRange,\n} from '@fullcalendar/common'\n\nexport class TableDateProfileGenerator extends DateProfileGenerator {\n  // Computes the date range that will be rendered.\n  buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay): DateRange {\n    let { dateEnv } = this.props\n    let renderRange = super.buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay)\n    let start = renderRange.start\n    let end = renderRange.end\n    let endOfWeek\n\n    // year and month views should be aligned with weeks. this is already done for week\n    if (/^(year|month)$/.test(currentRangeUnit)) {\n      start = dateEnv.startOfWeek(start)\n\n      // make end-of-week if not already\n      endOfWeek = dateEnv.startOfWeek(end)\n      if (endOfWeek.valueOf() !== end.valueOf()) {\n        end = addWeeks(endOfWeek, 1)\n      }\n    }\n\n    // ensure 6 weeks\n    if (\n      this.props.monthMode &&\n      this.props.fixedWeekCount\n    ) {\n      let rowCnt = Math.ceil( // could be partial weeks due to hiddenDays\n        diffWeeks(start, end),\n      )\n      end = addWeeks(end, 6 - rowCnt)\n    }\n\n    return { start, end }\n  }\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { DayTableView } from './DayTableView'\nimport { TableDateProfileGenerator } from './TableDateProfileGenerator'\nimport './main.css'\n\nexport { DayTable } from './DayTable'\nexport { DayTableSlicer } from './DayTableSlicer'\nexport { Table } from './Table'\nexport { TableSeg } from './TableSeg'\nexport { TableView } from './TableView'\nexport { buildDayTableModel } from './DayTableView'\nexport { DayTableView as DayGridView } // export as old name!\n\nexport default createPlugin({\n  initialView: 'dayGridMonth',\n  views: {\n\n    dayGrid: {\n      component: DayTableView,\n      dateProfileGeneratorClass: TableDateProfileGenerator,\n    },\n\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: { days: 1 },\n    },\n\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: { weeks: 1 },\n    },\n\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: { months: 1 },\n      monthMode: true,\n      fixedWeekCount: true,\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}