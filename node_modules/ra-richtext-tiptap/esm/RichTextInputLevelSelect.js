import * as React from 'react';
import { useState } from 'react';
import { List, ListItem, ListItemText, Menu, MenuItem } from '@material-ui/core';
import { makeStyles, alpha } from '@material-ui/core/styles';
import ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';
import { useTranslate } from 'ra-core';
import clsx from 'clsx';
import { useTiptapEditor } from './useTiptapEditor';
export var RichTextInputLevelSelect = function (props) {
    var _a;
    var translate = useTranslate();
    var editor = useTiptapEditor();
    var _b = useState(null), anchorElement = _b[0], setAnchorElement = _b[1];
    var classes = useStyles(props);
    var size = props.size;
    var handleMenuItemClick = function (event, index) {
        setAnchorElement(null);
        var selectedItem = options[index];
        if (selectedItem.value === 'paragraph') {
            editor.chain().focus().setParagraph().run();
        }
        else if (selectedItem.value === 'heading') {
            editor.chain().focus().setHeading({ level: selectedItem.level }).run();
        }
    };
    var handleClickListItem = function (event) {
        setAnchorElement(event.currentTarget);
    };
    var handleClose = function (event) {
        setAnchorElement(null);
    };
    var selectedOption = options.find(function (option) { return isSelectedOption(editor, option); }) || options[0];
    return (React.createElement(React.Fragment, null,
        React.createElement(List, { component: "nav", "aria-label": translate('ra.tiptap.select_level', {
                _: 'Select the level',
            }), dense: true, disablePadding: true, className: classes.list },
            React.createElement(ListItem, { button: true, "aria-haspopup": "true", "aria-controls": "level-menu", "aria-label": translate('ra.tiptap.current_level', {
                    _: 'Current level',
                }), onClick: handleClickListItem, className: clsx((_a = {},
                    _a[classes.sizeSmall] = size === 'small',
                    _a[classes.sizeLarge] = size === 'large',
                    _a)) },
                React.createElement(ListItemText, { primary: translate(selectedOption.label, {
                        _: selectedOption.defaultLabel,
                    }) }),
                React.createElement(ArrowDropDownIcon, null))),
        React.createElement(Menu, { anchorEl: anchorElement, open: Boolean(anchorElement), id: "level-menu", onClose: handleClose }, options.map(function (option, index) { return (React.createElement(MenuItem, { key: option.label, selected: option === selectedOption, onClick: function (event) {
                handleMenuItemClick(event, index);
            } }, translate(option.label, { _: option.defaultLabel }))); }))));
};
var options = [
    { label: 'ra.tiptap.paragraph', defaultLabel: 'Normal', value: 'paragraph' },
    {
        label: 'ra.tiptap.heading1',
        defaultLabel: 'Heading 1',
        value: 'heading',
        level: 1,
    },
    {
        label: 'ra.tiptap.heading2',
        defaultLabel: 'Heading 2',
        value: 'heading',
        level: 2,
    },
    {
        label: 'ra.tiptap.heading3',
        defaultLabel: 'Heading 3',
        value: 'heading',
        level: 3,
    },
    {
        label: 'ra.tiptap.heading4',
        defaultLabel: 'Heading 4',
        value: 'heading',
        level: 4,
    },
    {
        label: 'ra.tiptap.heading5',
        defaultLabel: 'Heading 5',
        value: 'heading',
        level: 5,
    },
    {
        label: 'ra.tiptap.heading6',
        defaultLabel: 'Heading 6',
        value: 'heading',
        level: 6,
    },
];
var isSelectedOption = function (editor, option) {
    if (!editor) {
        return false;
    }
    if (option.value === 'paragraph') {
        return editor.isActive('paragraph');
    }
    return editor.isActive('heading', { level: option.level });
};
var useStyles = makeStyles(function (theme) { return ({
    list: {
        borderRadius: theme.shape.borderRadius,
        border: "1px solid " + alpha(theme.palette.action.active, 0.12),
    },
    /* Styles applied to the root element if `size="small"`. */
    sizeSmall: {
        paddingTop: 1,
        paddingBottom: 1,
        '& .MuiTypography-root': {
            fontSize: theme.typography.pxToRem(13),
        },
    },
    /* Styles applied to the root element if `size="large"`. */
    sizeLarge: {
        paddingTop: 8,
        paddingBottom: 8,
        '& .MuiTypography-root': {
            fontSize: theme.typography.pxToRem(15),
        },
    },
}); }, {
    name: 'RaRichTextInputLevelSelect',
});
