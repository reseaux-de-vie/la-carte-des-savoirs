{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\nvar Paragraph = Node.create({\n  name: 'paragraph',\n  priority: 1000,\n  addOptions: function addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block',\n  content: 'inline*',\n  parseHTML: function parseHTML() {\n    return [{\n      tag: 'p'\n    }];\n  },\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    return {\n      setParagraph: function setParagraph() {\n        return function (_ref2) {\n          var commands = _ref2.commands;\n          return commands.setNode(_this.name);\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    return {\n      'Mod-Alt-0': function ModAlt0() {\n        return _this2.editor.commands.setParagraph();\n      }\n    };\n  }\n});\nexport { Paragraph, Paragraph as default };","map":{"version":3,"sources":["../src/paragraph.ts"],"names":[],"mappings":";AAiBa,IAAA,SAAS,GAAG,IAAI,CAAC,MAAM,CAAmB;EACrD,IAAI,EAAE,WAAW;EAEjB,QAAQ,EAAE,IAAI;EAEd,UAAU,wBAAA;IACR,OAAO;MACL,cAAc,EAAE,CAAA;KACjB;GACF;EAED,KAAK,EAAE,OAAO;EAEd,OAAO,EAAE,SAAS;EAElB,SAAS,uBAAA;IACP,OAAO,CACL;MAAE,GAAG,EAAE;IAAG,CAAE,CACb;GACF;EAED,UAAU,4BAAmB;IAAA,IAAhB,cAAc,QAAd,cAAc;IACzB,OAAO,CAAC,GAAG,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;GAC9E;EAED,WAAW,yBAAA;IAAA;IACT,OAAO;MACL,YAAY,EAAE;QAAA,OAAM,iBAAiB;UAAA,IAAd,QAAQ,SAAR,QAAQ;UAC7B,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,IAAI,CAAC;SACnC;MAAA;KACF;GACF;EAED,oBAAoB,kCAAA;IAAA;IAClB,OAAO;MACL,WAAW,EAAE;QAAA,OAAM,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE;MAAA;KACvD;EACF;AACF,CAAA,CAAA","sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    paragraph: {\n      /**\n       * Toggle a paragraph\n       */\n      setParagraph: () => ReturnType,\n    }\n  }\n}\n\nexport const Paragraph = Node.create<ParagraphOptions>({\n  name: 'paragraph',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [\n      { tag: 'p' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setParagraph: () => ({ commands }) => {\n        return commands.setNode(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph(),\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}